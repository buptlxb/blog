<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>BLxG</title><link href="http://www.gotit.sinaapp.com/" rel="alternate"></link><link href="http://gotit.sinaapp.com/feeds/all.atom.xml" rel="self"></link><id>http://www.gotit.sinaapp.com/</id><updated>2015-04-15T20:35:00+08:00</updated><entry><title>Derived Class Constructor Initialization List</title><link href="http://www.gotit.sinaapp.com/derived-class-constructor-initialization-list.html" rel="alternate"></link><updated>2015-04-15T20:35:00+08:00</updated><author><name>ictlxb</name></author><id>tag:www.gotit.sinaapp.com,2015-04-15:derived-class-constructor-initialization-list.html</id><summary type="html">&lt;p&gt;&lt;strong&gt;Encapsulation&lt;/strong&gt;, &lt;strong&gt;Inheritance&lt;/strong&gt; and &lt;strong&gt;Polymorphism&lt;/strong&gt; are three key concepts in Object-Oriented Programing.
Here is something intresting about derived class constructor initialization list.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;

&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;X&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;X&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;_m&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="n"&gt;X&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;_m&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20150304&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="k"&gt;protected&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;_m&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="nl"&gt;A&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;X&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;short&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;_m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="nl"&gt;B&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;X&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;B&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="nl"&gt;C&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;X&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;short&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="nl"&gt;D&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;X&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;D&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="n"&gt;_m&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;){}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="nl"&gt;E&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;X&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;E&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;short&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_m&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;One of the derived class is incorrect. If you can figure out which one is incorrect, it is not necessary for you to read
the &lt;a href="http://www.learncpp.com/cpp-tutorial/114-constructors-and-initialization-of-derived-classes/"&gt;post&lt;/a&gt;.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;The answer is D. Initializing variable of base class in initialization list of constructor of derived class is
forbidden. The rational behind this rule may relate to the difference between &lt;strong&gt;initialization&lt;/strong&gt; and &lt;strong&gt;assignment&lt;/strong&gt;.&lt;/p&gt;</summary><category term="constructor"></category><category term="inheritance"></category></entry><entry><title>On Object Array</title><link href="http://www.gotit.sinaapp.com/on-object-array.html" rel="alternate"></link><updated>2015-04-11T23:54:00+08:00</updated><author><name>ictlxb</name></author><id>tag:www.gotit.sinaapp.com,2015-04-11:on-object-array.html</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;Whereever an object array is defined in an cpp program, the array is always initialized. If no initializer is given,
the default constructor is invoked. The following simple program speaks louder than words.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;

&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Test&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;Test&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Test constructor invoked &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;Test&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Test&lt;/span&gt; &lt;span class="n"&gt;test_array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Test&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot; &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;test_array&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The Result is as follow:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Test constructor invoked 0
Test constructor invoked 1
Test constructor invoked 2
Test constructor invoked 3
Test constructor invoked 4
Test constructor invoked 5
Test constructor invoked 6
Test constructor invoked 7
Test constructor invoked 8
Test constructor invoked 9
1 10
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;One some thing you may notice is that a class without any instance variables has a size of 1 byte.&lt;/p&gt;</summary><category term="cpp"></category><category term="array"></category><category term="contructor"></category></entry><entry><title>On Runtime Monitoring Tools</title><link href="http://www.gotit.sinaapp.com/on-runtime-monitoring-tools.html" rel="alternate"></link><updated>2014-09-21T00:00:00+08:00</updated><author><name>ictlxb</name></author><id>tag:www.gotit.sinaapp.com,2014-09-21:on-runtime-monitoring-tools.html</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;Runtime monitoring tools make use of runtime information to
detect bugs that are difficult to detect statically. Existing
dynamic monitoring schemes fall into three categories: programming-rule based
(PRB), invariant-rule-based (IRB), and execution-statistics based (ESB).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Programming Rule Based (PRB)&lt;/h2&gt;
&lt;p&gt;PRB checks for violations of &lt;strong&gt;programming language specifications&lt;/strong&gt;,
&lt;strong&gt;programming paradigms&lt;/strong&gt;, or &lt;strong&gt;software development specifications&lt;/strong&gt;.
For example &lt;code&gt;array index cannot exceed the array bounds''
and&lt;/code&gt;concurrent accesses to a shared variable should be
synchronized''
are the kinds of rules PRB checkers use to detect bugs.&lt;/p&gt;
&lt;h2&gt;Invariant Rule Based (IRB)&lt;/h2&gt;
&lt;p&gt;IRB extracts invariant rules (e.g. PC and value invariants) from
&lt;strong&gt;successful runs&lt;/strong&gt; or &lt;strong&gt;multiple periods of a single long-running
execution&lt;/strong&gt;, and then uses these rules to check for violations in a
later execution or later periods of an execution in a long-running
job. Valueinvariance maintains, for each variable, a set of values
that the variable hes held. When a value not in the set is found at
runtime, it is recorded as an invariant violation. Program Counter
(PC) invariance maintains for each memory location a set of program
counter values(i.e. program locations) that access the variable. When
a datum is accessed by a program location that has not previously
accessed it, the access is recorded as an anomalous access.&lt;/p&gt;
&lt;h2&gt;Execution Statistics Based (ESB)&lt;/h2&gt;
&lt;p&gt;ESB extracts &lt;strong&gt;statistics that characterize the program's runtime
behavior&lt;/strong&gt;, and uses statistical analysis to detect bugs on the fly.&lt;/p&gt;</summary><category term="Security"></category></entry><entry><title>Basic Concept on Security</title><link href="http://www.gotit.sinaapp.com/basic-concept-on-security.html" rel="alternate"></link><updated>2014-09-17T00:00:00+08:00</updated><author><name>ictlxb</name></author><id>tag:www.gotit.sinaapp.com,2014-09-17:basic-concept-on-security.html</id><summary type="html">&lt;h2&gt;Authentication vs. Authorization&lt;/h2&gt;
&lt;h4&gt;Authentication&lt;/h4&gt;
&lt;p&gt;Authentication verifies &lt;strong&gt;who you are&lt;/strong&gt;. It is the process of
ascertaining that somebody really is who he/she claims to be.&lt;/p&gt;
&lt;h4&gt;Authorization&lt;/h4&gt;
&lt;p&gt;Authorization verifies &lt;strong&gt;what you are authorized to do&lt;/strong&gt;. It refers
ot rules that determine who is allowed to do what.&lt;/p&gt;</summary><category term="Security"></category></entry><entry><title>Web Vulnerability</title><link href="http://www.gotit.sinaapp.com/web-vulnerability.html" rel="alternate"></link><updated>2014-09-16T00:00:00+08:00</updated><author><name>ictlxb</name></author><id>tag:www.gotit.sinaapp.com,2014-09-16:web-vulnerability.html</id><summary type="html">&lt;h4&gt;Two Main Approaches to Testing Software Application&lt;/h4&gt;
&lt;p&gt;In &lt;strong&gt;white-box&lt;/strong&gt; testing, the source code of application is analyzed in an
attempt to track down defective or vulnerable lines of code. This operation is
often integrated into the development process by creating add-on tools for
common deveploment environments.&lt;/p&gt;
&lt;p&gt;In &lt;strong&gt;black-blox&lt;/strong&gt; testing, the source code is not examined directly. Instead,
special input test cases are generated and sent to the application. Then, the
results returned by the application are analyzed for unexpected behavior that
indicate errors or vulnerabilities.&lt;/p&gt;</summary><category term="Security"></category></entry><entry><title>Some Common Weakness Enumeration</title><link href="http://www.gotit.sinaapp.com/some-common-weakness-enumeration.html" rel="alternate"></link><updated>2014-09-11T00:00:00+08:00</updated><author><name>ictlxb</name></author><id>tag:www.gotit.sinaapp.com,2014-09-11:some-common-weakness-enumeration.html</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;Here is a common weakness enumeration. Maybe simple but useful.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Insecure Interaction Between Components&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;These weaknesses are related to insecure ways in which data is sent adn
received between separate components, modules, programs, procesces, threads
or systems.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')&lt;/h4&gt;
&lt;p&gt;The software constructs all or part of an OS command using
externally-influenced input from an upstream component, but it does not
neutralize or incorrectly neutralizes special elements that could modify
the intended OS command when it is sent to a downstream component.&lt;/p&gt;
&lt;h4&gt;Improper Neutralization of Input During Web Page Generation ('Cross-size Scripting')&lt;/h4&gt;
&lt;p&gt;The software does not neutralize or incorrectly neutralizes user-controllable
input before it is placed in output that is used as a web page that is served
to other users.&lt;/p&gt;
&lt;h4&gt;Improper Neutralization of Special Elements used in an SQL Command('SQL Injection')&lt;/h4&gt;
&lt;p&gt;The software constructs all or part of an SQL command using
externally-influenced input form an upstream component, but it does not
neutralization or incorrectly neutralizes special elements that could modify
the intended SQL command when it sent to downstream component.&lt;/p&gt;
&lt;h4&gt;Cross-Site Request Forgery (CSRF)&lt;/h4&gt;
&lt;p&gt;The web page does not, or cannot, sufficiently verify whether a well-formed, valid,
constient request was intentionally provided by the user who submitted the
request.&lt;/p&gt;
&lt;h4&gt;Unrestricted Upload of File with Dangerous Type&lt;/h4&gt;
&lt;p&gt;The software allows attackers to upload or transfer files of dangerous types
that can be automatically processed within the product`s environment.&lt;/p&gt;
&lt;h4&gt;URL Redirected to Untrusted Site ('Open Redirect')&lt;/h4&gt;
&lt;p&gt;A web page accepts user-controllable input that specifies a link to external
site, and use that link in a Redirect. This simpilifies phishing attacks.&lt;/p&gt;
&lt;h2&gt;Risky Resource Management&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;These weaknesses are related to ways in which software does not properly
manage the creation, usage, transfer, or destruction of important system
resources.
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Imporper Limitation of Pathname to a Restricted Directory ('Path Tranversal')&lt;/h4&gt;
&lt;p&gt;The software uses external input to construct a pathname that is intended to
identify a file or directory that is located underneath a restricted parent
directory, but the software does not properly neutralize special elements
within pathname that can cause the pathname to resolve to a location that is
outside of the restricted directory.&lt;/p&gt;
&lt;h4&gt;Buffer Copy without Checkint Size of Input ('Classic Buffer Overflow')&lt;/h4&gt;
&lt;p&gt;The program copies an input buffer to an output buffer without verifying that
the size of input buffer is less than the size of output buffer, leading to a
buffer overflow.&lt;/p&gt;
&lt;h4&gt;Incorrect Calculation of Buffer Size&lt;/h4&gt;
&lt;p&gt;The software does not correctly calculate the size to be used when allocating a
buffer, which could lead to a buffer overflow.&lt;/p&gt;
&lt;h4&gt;Uncontrolled Format String&lt;/h4&gt;
&lt;p&gt;The software uses externally-controlled strings in print-style functions, which
can lead to buffer overflow or data representation problem.&lt;/p&gt;
&lt;h4&gt;Integer Overflow or Wraparound&lt;/h4&gt;
&lt;p&gt;The software performs a calculation that can produce an integer overflow or
wraparound, when the logic assumes that the resulting value will always be
larger than the original value. This can introduce other weaknesses when the
calculation is used for resource management or execution control.&lt;/p&gt;
&lt;h4&gt;Download of Code without Integrity Check&lt;/h4&gt;
&lt;p&gt;The product downloads source code or an executable from a remote location and
executes that code without sufficiently verifying the origin or integrity of
the code.&lt;/p&gt;
&lt;h4&gt;Use of Potentially Dangerous Function&lt;/h4&gt;
&lt;p&gt;The program invokes a potentially dangerous function that could introduce a
vulnerability if it is used incorrectly, but the function can also be used
safely.&lt;/p&gt;
&lt;h4&gt;Inclusion of Functionality from Untrusted Control Sphere&lt;/h4&gt;
&lt;p&gt;The software imports, requires, or includes executable functionality (such as a
library) from a source that is outside of the intended control sphere.&lt;/p&gt;</summary><category term="Security"></category></entry><entry><title>Program Optimization Experiments</title><link href="http://www.gotit.sinaapp.com/program-optimization-experiments.html" rel="alternate"></link><updated>2014-05-03T00:00:00+08:00</updated><author><name>ictlxb</name></author><id>tag:www.gotit.sinaapp.com,2014-05-03:program-optimization-experiments.html</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;Program optimization is a very intresting problem. With the different matrix-multiply
program, I want to find the factors which might have influence on the
performace of the programs. Several experiments has been conducted on my
computer. Source code and results will be listed as follow. Also, I will give a
brief analysis and some simple conclusions on them.
Machine Information can be found &lt;a href="/assets/misc/info.pdf"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;1 There Loops Resolution&lt;/h3&gt;
&lt;h4&gt;1.1 Source Code&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;stdlib.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;time.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;string.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;sys/time.h&amp;gt;&lt;/span&gt;

&lt;span class="cp"&gt;#define DIM 4096&lt;/span&gt;
&lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;MATRIX&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="n"&gt;DIM&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;multiply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MATRIX&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;MATRIX&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;MATRIX&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;dim&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;dim&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;col&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;dim&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;tmp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;idx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;idx&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;dim&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;tmp&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
            &lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;init_matrix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MATRIX&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;dim&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;isRandom&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;isRandom&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;srandom&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;dim&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;col&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;dim&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;263&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="n"&gt;memset&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dim&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;dim&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;print_matrix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MATRIX&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;dim&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;dim&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;col&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;dim&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%f &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
        &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;MATRIX&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MATRIX&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;malloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DIM&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;DIM&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="n"&gt;MATRIX&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MATRIX&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;malloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DIM&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;DIM&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="n"&gt;MATRIX&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MATRIX&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;malloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DIM&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;DIM&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="n"&gt;init_matrix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;DIM&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;init_matrix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;DIM&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;init_matrix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;DIM&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;timeval&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;gettimeofday&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;multiply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;DIM&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;gettimeofday&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tv_sec&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tv_sec&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;opts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;DIM&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;DIM&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;DIM&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;speed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;opts&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;1000000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%d matrix multiply&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;DIM&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;time : %ds&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s"&gt;speed: %.2f MFLOPS&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;speed&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;1.2 Results&lt;/h4&gt;
&lt;h5&gt;1.2.1 No Optimization&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;ict-lxb@ictlxb-Zhaoyang-E49:~/Workspace/test&lt;span class="nv"&gt;$ &lt;/span&gt;./matrix
&lt;span class="m"&gt;4096&lt;/span&gt; matrix multiply
&lt;span class="nb"&gt;time&lt;/span&gt; : 1038s    speed: 132.39 MFLOPS
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;1.2.2 -O2 Optimization&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;ict-lxb@ictlxb-Zhaoyang-E49:~/Workspace/test&lt;span class="nv"&gt;$ &lt;/span&gt;./matrix_O2 
&lt;span class="m"&gt;4096&lt;/span&gt; matrix multiply
&lt;span class="nb"&gt;time&lt;/span&gt; : 944s speed: 145.57 MFLOPS
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;1.3 Conclusion&lt;/h4&gt;
&lt;p&gt;After analysing the results above, we can see that the same source code
compiled with different optimization options might result in very different
performance. The compiler can improve the performance by reordering the
instructions, which might cause bubble in the instruction parallel, and so
on.&lt;/p&gt;
&lt;h3&gt;2 Three Loops Resulotion (4097X4097)&lt;/h3&gt;
&lt;h4&gt;2.1 Source Code&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;stdlib.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;time.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;string.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;sys/time.h&amp;gt;&lt;/span&gt;

&lt;span class="cp"&gt;#define DIM 4097&lt;/span&gt;
&lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;MATRIX&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="n"&gt;DIM&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;multiply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MATRIX&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;MATRIX&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;MATRIX&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;dim&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;dim&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;col&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;dim&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;tmp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;idx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;idx&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;dim&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;tmp&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
            &lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;init_matrix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MATRIX&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;dim&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;isRandom&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;isRandom&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;srandom&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;dim&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;col&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;dim&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;263&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="n"&gt;memset&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dim&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;dim&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;print_matrix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MATRIX&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;dim&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;dim&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;col&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;dim&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%f &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
        &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;MATRIX&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MATRIX&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;malloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DIM&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;DIM&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="n"&gt;MATRIX&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MATRIX&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;malloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DIM&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;DIM&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="n"&gt;MATRIX&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MATRIX&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;malloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DIM&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;DIM&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="n"&gt;init_matrix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;DIM&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;init_matrix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;DIM&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;init_matrix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;DIM&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;timeval&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;gettimeofday&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;multiply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;DIM&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;gettimeofday&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tv_sec&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tv_sec&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="c1"&gt;//unsigned long long opts = (unsigned long long)DIM*DIM*(2*DIM-1);&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DIM&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;opts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;speed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;opts&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;1000000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%d matrix multiply&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;DIM&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;time : %ds&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s"&gt;speed: %.2f MFLOPS&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;speed&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;2.2 Results&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;ict&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;lxb&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;ictlxb&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Zhaoyang&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nl"&gt;E49&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="n"&gt;Workspace&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;matrix_4097&lt;/span&gt; 
&lt;span class="mi"&gt;4097&lt;/span&gt; &lt;span class="n"&gt;matrix&lt;/span&gt; &lt;span class="n"&gt;multiply&lt;/span&gt;
&lt;span class="nl"&gt;time&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;901&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="nl"&gt;speed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;152.52&lt;/span&gt; &lt;span class="n"&gt;MFLOPS&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;2.3 Conclusion&lt;/h4&gt;
&lt;p&gt;After analysing the results above, we can see that the performance was improved
due in large part to cache miss rate decreasing. 4097 matrix might decrease the
collision of cache line becuase of its irregular layout.&lt;/p&gt;
&lt;h3&gt;3 Three Loops Resulotion With Transpose&lt;/h3&gt;
&lt;h4&gt;3.1 Source Code&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;stdlib.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;time.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;string.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;sys/time.h&amp;gt;&lt;/span&gt;

&lt;span class="cp"&gt;#define DIM 4096&lt;/span&gt;
&lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;MATRIX&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="n"&gt;DIM&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;transpose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MATRIX&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;dim&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;dim&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;col&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;tmp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
            &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
            &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;multiply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MATRIX&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;MATRIX&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;MATRIX&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;dim&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;transpose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dim&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;dim&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;col&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;dim&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;tmp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;idx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;idx&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;dim&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;tmp&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
            &lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;init_matrix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MATRIX&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;dim&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;isRandom&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;isRandom&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;srandom&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;dim&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;col&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;dim&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;263&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="n"&gt;memset&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dim&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;dim&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;print_matrix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MATRIX&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;dim&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;dim&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;col&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;dim&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%f &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
        &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;MATRIX&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MATRIX&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;malloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DIM&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;DIM&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="n"&gt;MATRIX&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MATRIX&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;malloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DIM&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;DIM&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="n"&gt;MATRIX&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MATRIX&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;malloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DIM&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;DIM&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="n"&gt;init_matrix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;DIM&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;init_matrix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;DIM&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;init_matrix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;DIM&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;timeval&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;gettimeofday&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;multiply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;DIM&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;gettimeofday&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tv_sec&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tv_sec&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;opts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;DIM&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;DIM&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;DIM&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;speed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;opts&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;1000000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%d matrix multiply&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;DIM&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;time : %ds&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s"&gt;speed: %.2f MFLOPS&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;speed&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;3.2 Results&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;ct-lxb@ictlxb-Zhaoyang-E49:~/Workspace/test&lt;span class="nv"&gt;$ &lt;/span&gt;./matrix_transpose 
&lt;span class="m"&gt;4096&lt;/span&gt; matrix multiply
&lt;span class="nb"&gt;time&lt;/span&gt; : 72s  speed: 1908.64 MFLOPS
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;3.3 Conclusion&lt;/h4&gt;
&lt;p&gt;After analysing the results above, we can see that the performance is improved
so much. The reasons for that might be that the array in C program language is
row-major and that cache miss rate decreases due to the transpose. Temporal
locality and spatial locality is the key point in this improvement.&lt;/p&gt;
&lt;h3&gt;4 Three Loops Resulotion With Partition&lt;/h3&gt;
&lt;h4&gt;4.1 Source Code&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;stdlib.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;time.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;string.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;sys/time.h&amp;gt;&lt;/span&gt;

&lt;span class="cp"&gt;#define B 128&lt;/span&gt;
&lt;span class="cp"&gt;#define DIM 4096&lt;/span&gt;
&lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;MATRIX&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="n"&gt;DIM&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="cp"&gt;#define MIN(x, y) ((x) &amp;gt; (y) ? (y) : (x))&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;multiply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MATRIX&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;MATRIX&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;MATRIX&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;dim&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ri&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ci&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;dim&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;col&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;dim&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ri&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;ri&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;dim&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;ri&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ci&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;ci&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;MIN&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dim&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;ci&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;tmp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;idx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;idx&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;MIN&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dim&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                        &lt;span class="n"&gt;tmp&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ri&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;ci&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
                    &lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ri&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;ci&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;init_matrix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MATRIX&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;dim&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;isRandom&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;isRandom&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;dim&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;col&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;dim&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;263&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="n"&gt;memset&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dim&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;dim&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;print_matrix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MATRIX&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;dim&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;dim&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;col&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;dim&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%f &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
        &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;srandom&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="cp"&gt;#if 1&lt;/span&gt;
    &lt;span class="n"&gt;MATRIX&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MATRIX&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;malloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DIM&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;DIM&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="n"&gt;MATRIX&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MATRIX&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;malloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DIM&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;DIM&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="n"&gt;MATRIX&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MATRIX&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;malloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DIM&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;DIM&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="n"&gt;init_matrix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;DIM&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;init_matrix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;DIM&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;init_matrix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;DIM&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="cp"&gt;#else&lt;/span&gt;
    &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;DIM&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;DIM&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;DIM&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;DIM&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;DIM&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;DIM&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="cp"&gt;#endif&lt;/span&gt;
    &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;timeval&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;gettimeofday&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;multiply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;DIM&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;gettimeofday&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tv_sec&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tv_sec&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;opts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;DIM&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;DIM&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;DIM&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;speed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;opts&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;1000000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%d matrix multiply&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;DIM&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;time : %ds&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s"&gt;speed: %.2f MFLOPS&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;speed&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="cp"&gt;#if 0&lt;/span&gt;&lt;span class="c"&gt;&lt;/span&gt;
&lt;span class="c"&gt;    print_matrix(x, DIM);&lt;/span&gt;
&lt;span class="c"&gt;    print_matrix(y, DIM);&lt;/span&gt;
&lt;span class="c"&gt;    print_matrix(z, DIM);&lt;/span&gt;
&lt;span class="cp"&gt;#endif&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;4.2 Results&lt;/h4&gt;
&lt;p&gt;&lt;img alt="b-mflops" src="/assets/images/b_mflops.png" /&gt;&lt;/p&gt;
&lt;h4&gt;4.3 Conclusion&lt;/h4&gt;
&lt;p&gt;After analysing the results above, we can see that the performance is optimal
when B is 64.&lt;/p&gt;
&lt;h3&gt;5 Serial Program Analysis&lt;/h3&gt;
&lt;p&gt;From all the experiments above, we can see that the bottlenect of the serial
program (matrix multiply) is memory access delay. With some optimization such
as instructions reordering by compilers, improving temporal locality and
spatial locality of data, the performance could be improved due to less cache
misses.&lt;/p&gt;
&lt;h3&gt;6 Optimal Program With Pthread&lt;/h3&gt;
&lt;h4&gt;6.1 Source Code&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;stdlib.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;time.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;string.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;sys/time.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;pthread.h&amp;gt;&lt;/span&gt;

&lt;span class="cp"&gt;#define CORES 2&lt;/span&gt;
&lt;span class="cp"&gt;#define THREADS 4&lt;/span&gt;
&lt;span class="cp"&gt;#define WORKERS (THREADS)&lt;/span&gt;


&lt;span class="cp"&gt;#define DIM 4096&lt;/span&gt;
&lt;span class="cp"&gt;#define COL (DIM/WORKERS)&lt;/span&gt;
&lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;MATRIX&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="n"&gt;DIM&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;MATRIX&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;MATRIX&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;MATRIX&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;row_start&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;pthread_t&lt;/span&gt; &lt;span class="n"&gt;pid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="n"&gt;Arguments&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;Arguments&lt;/span&gt; &lt;span class="n"&gt;argument&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;WORKERS&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;print_matrix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MATRIX&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;dim&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;dim&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;col&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;dim&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%f &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
        &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;transpose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MATRIX&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;dim&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;dim&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;col&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;tmp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
            &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
            &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;multiply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MATRIX&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;MATRIX&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;MATRIX&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;row_offset&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;row_offset&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;COL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;row_offset&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;col&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;DIM&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;tmp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;idx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;idx&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;DIM&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;tmp&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
            &lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nf"&gt;worker&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Arguments&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Arguments&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;multiply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;row_start&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;init_matrix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MATRIX&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;dim&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;isRandom&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;isRandom&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;srandom&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;dim&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;col&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;dim&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;263&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="n"&gt;memset&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dim&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;dim&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;MATRIX&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MATRIX&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;malloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DIM&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;DIM&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="n"&gt;MATRIX&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MATRIX&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;malloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DIM&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;DIM&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="n"&gt;MATRIX&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MATRIX&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;malloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DIM&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;DIM&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="n"&gt;init_matrix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;DIM&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;init_matrix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;DIM&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;init_matrix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;DIM&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;timeval&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;gettimeofday&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;transpose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;DIM&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;WORKERS&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;argument&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;argument&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;argument&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;argument&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;row_start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;COL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;pthread_create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;argument&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;pid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;worker&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;argument&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;multiply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;WORKERS&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;pthread_join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argument&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;pid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;gettimeofday&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tv_sec&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tv_sec&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;opts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;DIM&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;DIM&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;DIM&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;speed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;opts&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;1000000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%d matrix multiply with %d workers&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;DIM&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;WORKERS&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;time : %ds&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s"&gt;speed: %.2f MFLOPS&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;speed&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;6.2 Results&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;ict-lxb@ictlxb-Zhaoyang-E49:~/Workspace/test&lt;span class="nv"&gt;$ &lt;/span&gt;./matrix_pthread 
&lt;span class="m"&gt;4096&lt;/span&gt; matrix multiply with &lt;span class="m"&gt;2&lt;/span&gt; workers
&lt;span class="nb"&gt;time&lt;/span&gt; : 49s  speed: 2804.53 MFLOPS

ict-lxb@ictlxb-Zhaoyang-E49:~/Workspace/test&lt;span class="nv"&gt;$ &lt;/span&gt;./matrix_pthread 
&lt;span class="m"&gt;4096&lt;/span&gt; matrix multiply with &lt;span class="m"&gt;4&lt;/span&gt; workers
&lt;span class="nb"&gt;time&lt;/span&gt; : 31s  speed: 4432.97 MFLOPS

ict-lxb@ictlxb-Zhaoyang-E49:~/Workspace/test&lt;span class="nv"&gt;$ &lt;/span&gt;./matrix_pthread 
&lt;span class="m"&gt;4096&lt;/span&gt; matrix multiply with &lt;span class="m"&gt;8&lt;/span&gt; workers
&lt;span class="nb"&gt;time&lt;/span&gt; : 44s  speed: 3123.23 MFLOPS

ict-lxb@ictlxb-Zhaoyang-E49:~/Workspace/test&lt;span class="nv"&gt;$ &lt;/span&gt;./matrix_pthread 
&lt;span class="m"&gt;4096&lt;/span&gt; matrix multiply with &lt;span class="m"&gt;16&lt;/span&gt; workers
&lt;span class="nb"&gt;time&lt;/span&gt; : 43s  speed: 3195.86 MFLOPS

...

ict-lxb@ictlxb-Zhaoyang-E49:~/Workspace/test&lt;span class="nv"&gt;$ &lt;/span&gt;./matrix_pthread 
&lt;span class="m"&gt;4096&lt;/span&gt; matrix multiply with &lt;span class="m"&gt;4096&lt;/span&gt; workers
&lt;span class="nb"&gt;time&lt;/span&gt; : 42s  speed: 3271.96 MFLOPS
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;rate = 72 / 49 = 1.47&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;rate = 72 / 31 = 2&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;rate = 72 / 44 = 1.64&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;6.3 Conclusion&lt;/h4&gt;
&lt;p&gt;After analysing the results above, we can see that the performance is imporved
so much that 4096 matrix multiply with 16 workers took only 43 seconds.
Parallel optimization can improve the performance in a reasonable way. However,
With the number of workers increasing, the performance did not decrease as
expected, I guess thread switch might be optimized so well that the cost could
be ignored.&lt;/p&gt;
&lt;h3&gt;7 Optimization With BLAS (optional)&lt;/h3&gt;
&lt;p&gt;(To be continued)&lt;/p&gt;</summary><category term="optimization"></category><category term="cache miss"></category><category term="row-major"></category></entry><entry><title>Stack Switching During OS Setup</title><link href="http://www.gotit.sinaapp.com/stack-switching-during-os-setup.html" rel="alternate"></link><updated>2014-04-14T00:00:00+08:00</updated><author><name>ictlxb</name></author><id>tag:www.gotit.sinaapp.com,2014-04-14:stack-switching-during-os-setup.html</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;Stack switching might be a frustrating problem during OS setup.In linux 0.11,
It is easy to find that there are more than one stack defined during the time of OS setup.
Here is a simple experiment, which indicates that the stacks are defined for different purposes.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;1. Stack Definition&lt;/h2&gt;
&lt;h4&gt;1.1. The Definition of user_stack&lt;/h4&gt;
&lt;p&gt;The &lt;code&gt;user_stack&lt;/code&gt; appears at &lt;code&gt;line 23&lt;/code&gt; in &lt;code&gt;boot/head.s&lt;/code&gt; as follow:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="na"&gt;.text&lt;/span&gt;
&lt;span class="na"&gt;.globl&lt;/span&gt; &lt;span class="no"&gt;_idt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="no"&gt;_gdt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="no"&gt;_pg_dir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="no"&gt;_tmp_floppy_area&lt;/span&gt;
&lt;span class="nl"&gt;_pg_dir:&lt;/span&gt;
&lt;span class="nl"&gt;startup_32:&lt;/span&gt;

    &lt;span class="na"&gt;...&lt;/span&gt;

    &lt;span class="nf"&gt;lss&lt;/span&gt; &lt;span class="no"&gt;_stack_start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nv"&gt;%esp&lt;/span&gt;
    &lt;span class="nf"&gt;call&lt;/span&gt; &lt;span class="no"&gt;setup_idt&lt;/span&gt;

    &lt;span class="na"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The definition of &lt;code&gt;stack_start&lt;/code&gt; can be found at &lt;code&gt;line 69&lt;/code&gt; in &lt;code&gt;kernel/sched.c&lt;/code&gt; as follow:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;user_stack&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="n"&gt;PAGE_SIZE&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;short&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="n"&gt;stack_start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;user_stack&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;PAGE_SIZE&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0x10&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It is not difficult to understand the struct &lt;code&gt;stack_start&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;long* a&lt;/code&gt; indicates &lt;code&gt;ESP&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;short b&lt;/code&gt; indicates &lt;code&gt;SS&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;1.2. The definition of Privilege 0 stack&lt;/h4&gt;
&lt;p&gt;The definition of &lt;code&gt;Privilege 0 stack&lt;/code&gt; can be found at &lt;code&gt;line 53&lt;/code&gt; in &lt;code&gt;kernel/sched.c&lt;/code&gt; as follow:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;union&lt;/span&gt; &lt;span class="n"&gt;task_union&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;task_struct&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;PAGE_SIZE&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;union&lt;/span&gt; &lt;span class="n"&gt;task_union&lt;/span&gt; &lt;span class="n"&gt;init_task&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;INIT_TASK&lt;/span&gt;&lt;span class="p"&gt;,};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The macro &lt;code&gt;INIT_TASK&lt;/code&gt; can be found at &lt;code&gt;line 113&lt;/code&gt; in &lt;code&gt;include/linux/sched.h&lt;/code&gt; as follow:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt; *  INIT_TASK is used to set up the first task table, touch at&lt;/span&gt;
&lt;span class="cm"&gt; * your own risk!. Base=0, limit=0x9ffff (=640kB)&lt;/span&gt;
&lt;span class="cm"&gt; */&lt;/span&gt;
&lt;span class="cp"&gt;#define INIT_TASK \&lt;/span&gt;
&lt;span class="cm"&gt;/* state etc */&lt;/span&gt;&lt;span class="cp"&gt; { 0,15,15, \&lt;/span&gt;
&lt;span class="cm"&gt;/* signals */&lt;/span&gt;&lt;span class="cp"&gt;   0,{ {},},0, \&lt;/span&gt;
&lt;span class="cm"&gt;/* ec,brk... */&lt;/span&gt;&lt;span class="cp"&gt; 0,0,0,0,0,0, \&lt;/span&gt;
&lt;span class="cm"&gt;/* pid etc.. */&lt;/span&gt;&lt;span class="cp"&gt; 0,-1,0,0,0, \&lt;/span&gt;
&lt;span class="cm"&gt;/* uid etc */&lt;/span&gt;&lt;span class="cp"&gt;   0,0,0,0,0,0, \&lt;/span&gt;
&lt;span class="cm"&gt;/* alarm */&lt;/span&gt;&lt;span class="cp"&gt; 0,0,0,0,0,0, \&lt;/span&gt;
&lt;span class="cm"&gt;/* math */&lt;/span&gt;&lt;span class="cp"&gt;  0, \&lt;/span&gt;
&lt;span class="cm"&gt;/* fs info */&lt;/span&gt;&lt;span class="cp"&gt;   -1,0022,NULL,NULL,NULL,0, \&lt;/span&gt;
&lt;span class="cm"&gt;/* filp */&lt;/span&gt;&lt;span class="cp"&gt;  {NULL,}, \&lt;/span&gt;
&lt;span class="cp"&gt;    { \&lt;/span&gt;
&lt;span class="cp"&gt;        {0,0}, \&lt;/span&gt;
&lt;span class="cm"&gt;/* ldt */&lt;/span&gt;&lt;span class="cp"&gt;   {0x9f,0xc0fa00}, \&lt;/span&gt;
&lt;span class="cp"&gt;        {0x9f,0xc0f200}, \&lt;/span&gt;
&lt;span class="cp"&gt;    }, \&lt;/span&gt;
&lt;span class="cm"&gt;/*tss*/&lt;/span&gt;&lt;span class="cp"&gt; {0,PAGE_SIZE+(long)&amp;amp;init_task,0x10,0,0,0,0,(long)&amp;amp;pg_dir,\&lt;/span&gt;
&lt;span class="cp"&gt;     0,0,0,0,0,0,0,0, \&lt;/span&gt;
&lt;span class="cp"&gt;     0,0,0x17,0x17,0x17,0x17,0x17,0x17, \&lt;/span&gt;
&lt;span class="cp"&gt;     _LDT(0),0x80000000, \&lt;/span&gt;
&lt;span class="cp"&gt;        {} \&lt;/span&gt;
&lt;span class="cp"&gt;    }, \&lt;/span&gt;
&lt;span class="cp"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;tss_struct&lt;/code&gt; is defined at &lt;code&gt;line 51&lt;/code&gt; in &lt;code&gt;include/linux/sched.h&lt;/code&gt; as follow:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;tss_struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;long&lt;/span&gt;    &lt;span class="n"&gt;back_link&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="cm"&gt;/* 16 high bits zero */&lt;/span&gt;
    &lt;span class="kt"&gt;long&lt;/span&gt;    &lt;span class="n"&gt;esp0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;long&lt;/span&gt;    &lt;span class="n"&gt;ss0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;        &lt;span class="cm"&gt;/* 16 high bits zero */&lt;/span&gt;
    &lt;span class="kt"&gt;long&lt;/span&gt;    &lt;span class="n"&gt;esp1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;long&lt;/span&gt;    &lt;span class="n"&gt;ss1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;        &lt;span class="cm"&gt;/* 16 high bits zero */&lt;/span&gt;
    &lt;span class="kt"&gt;long&lt;/span&gt;    &lt;span class="n"&gt;esp2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;long&lt;/span&gt;    &lt;span class="n"&gt;ss2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;        &lt;span class="cm"&gt;/* 16 high bits zero */&lt;/span&gt;
    &lt;span class="kt"&gt;long&lt;/span&gt;    &lt;span class="n"&gt;cr3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;long&lt;/span&gt;    &lt;span class="n"&gt;eip&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;long&lt;/span&gt;    &lt;span class="n"&gt;eflags&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;long&lt;/span&gt;    &lt;span class="n"&gt;eax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;ecx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;edx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;ebx&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;long&lt;/span&gt;    &lt;span class="n"&gt;esp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;long&lt;/span&gt;    &lt;span class="n"&gt;ebp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;long&lt;/span&gt;    &lt;span class="n"&gt;esi&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;long&lt;/span&gt;    &lt;span class="n"&gt;edi&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;long&lt;/span&gt;    &lt;span class="n"&gt;es&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;     &lt;span class="cm"&gt;/* 16 high bits zero */&lt;/span&gt;
    &lt;span class="kt"&gt;long&lt;/span&gt;    &lt;span class="n"&gt;cs&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;     &lt;span class="cm"&gt;/* 16 high bits zero */&lt;/span&gt;
    &lt;span class="kt"&gt;long&lt;/span&gt;    &lt;span class="n"&gt;ss&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;     &lt;span class="cm"&gt;/* 16 high bits zero */&lt;/span&gt;
    &lt;span class="kt"&gt;long&lt;/span&gt;    &lt;span class="n"&gt;ds&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;     &lt;span class="cm"&gt;/* 16 high bits zero */&lt;/span&gt;
    &lt;span class="kt"&gt;long&lt;/span&gt;    &lt;span class="n"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;     &lt;span class="cm"&gt;/* 16 high bits zero */&lt;/span&gt;
    &lt;span class="kt"&gt;long&lt;/span&gt;    &lt;span class="n"&gt;gs&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;     &lt;span class="cm"&gt;/* 16 high bits zero */&lt;/span&gt;
    &lt;span class="kt"&gt;long&lt;/span&gt;    &lt;span class="n"&gt;ldt&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;        &lt;span class="cm"&gt;/* 16 high bits zero */&lt;/span&gt;
    &lt;span class="kt"&gt;long&lt;/span&gt;    &lt;span class="n"&gt;trace_bitmap&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;   &lt;span class="cm"&gt;/* bits: trace 0, bitmap 16-31 */&lt;/span&gt;
    &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;i387_struct&lt;/span&gt; &lt;span class="n"&gt;i387&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It is not difficult to figure out the initializers of &lt;code&gt;esp0&lt;/code&gt; and &lt;code&gt;ss0&lt;/code&gt;, which describe the Privilege 0 stack.&lt;/p&gt;
&lt;h2&gt;2. Simple Experiment&lt;/h2&gt;
&lt;p&gt;System Info:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Linux ictlxb-Zhaoyang-E49 3.2.0-60-generic #91-Ubuntu SMP Wed Feb 19 03:54:44 UTC 2014 x86_64 x86_64 x86_64 GNU/Linux
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;2.1. The Address of user_stack&lt;/h4&gt;
&lt;p&gt;&lt;img alt="the address of user_stack" src="/assets/images/stack_addr.png" /&gt;&lt;/p&gt;
&lt;p&gt;It is easy to know that&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;stack_start.a = 0x0001de00&lt;/li&gt;
&lt;li&gt;stack_start.b = 0x0010&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;2.2. The SS and ESP after lsll&lt;/h4&gt;
&lt;p&gt;&lt;img alt="the ss and esp after lsll" src="/assets/images/sreg_and_reg.png" /&gt;&lt;/p&gt;
&lt;p&gt;It is easy to find that&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ESP = 0x0001de00&lt;/li&gt;
&lt;li&gt;SS = 0x10&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;2.3. The Current Stack Content(user_stack)&lt;/h4&gt;
&lt;p&gt;&lt;img alt="the current stack content" src="/assets/images/stack.png" /&gt;&lt;/p&gt;
&lt;h4&gt;2.4. The Stack Content Before Jumping to 'main'&lt;/h4&gt;
&lt;p&gt;The code follow is a part of &lt;code&gt;boot/head.s&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="na"&gt;...&lt;/span&gt;

    &lt;span class="nf"&gt;pushl&lt;/span&gt; &lt;span class="no"&gt;$0&lt;/span&gt;        &lt;span class="c"&gt;# These are the parameters to main :-)&lt;/span&gt;
    &lt;span class="nf"&gt;pushl&lt;/span&gt; &lt;span class="no"&gt;$0&lt;/span&gt;
    &lt;span class="nf"&gt;pushl&lt;/span&gt; &lt;span class="no"&gt;$0&lt;/span&gt;
    &lt;span class="nf"&gt;pushl&lt;/span&gt; &lt;span class="no"&gt;$L6&lt;/span&gt;       &lt;span class="c"&gt;# return address for main, if it decides to.&lt;/span&gt;
    &lt;span class="nf"&gt;pushl&lt;/span&gt; &lt;span class="no"&gt;$_main&lt;/span&gt;
    &lt;span class="nf"&gt;jmp&lt;/span&gt; &lt;span class="no"&gt;setup_paging&lt;/span&gt;
&lt;span class="nl"&gt;L6:&lt;/span&gt;
    &lt;span class="nf"&gt;jmp&lt;/span&gt; &lt;span class="no"&gt;L6&lt;/span&gt;          &lt;span class="c"&gt;# main should never return here, but&lt;/span&gt;
                &lt;span class="c"&gt;# just in case, we know what happens.&lt;/span&gt;

    &lt;span class="na"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="the stack content before jumping to main" src="/assets/images/stack_before_main.png" /&gt;&lt;/p&gt;
&lt;p&gt;It is easy to know that&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;_main&lt;/code&gt; stands for address 0x0000670d&lt;/li&gt;
&lt;li&gt;&lt;code&gt;L6&lt;/code&gt; stands for address 0x00005412&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;2.5. The Stack Content After 'ret' to 'main'&lt;/h4&gt;
&lt;p&gt;&lt;img alt="the stack content after ret to main" src="/assets/images/ret_to_main.png" /&gt;&lt;/p&gt;
&lt;h4&gt;2.6. The Stack Content After Saving Callee-save Registers&lt;/h4&gt;
&lt;p&gt;According to the calling convension, the registers (&lt;code&gt;ebp&lt;/code&gt;, &lt;code&gt;ebx&lt;/code&gt;, &lt;code&gt;edi&lt;/code&gt;, &lt;code&gt;esi&lt;/code&gt;) should be saved in the sub-routine.&lt;/p&gt;
&lt;p&gt;&lt;img alt="the stack content after saving calle-save registers" src="/assets/images/stack_after_save_register.png" /&gt;&lt;/p&gt;
&lt;h4&gt;2.7. The Stack Content Before Call 'mem_init'&lt;/h4&gt;
&lt;p&gt;&lt;img alt="the stack content before call mem_init" src="/assets/images/stack_before_call.png" /&gt;&lt;/p&gt;
&lt;h4&gt;2.8. The Stack Before 'iret' in 'move_to_user_mode'&lt;/h4&gt;
&lt;p&gt;&lt;img alt="the stack content before iret" src="/assets/images/stack_before_iret.png" /&gt;&lt;/p&gt;
&lt;h4&gt;2.9. The Registers After 'iret'&lt;/h4&gt;
&lt;p&gt;&lt;img alt="the registers after iret" src="/assets/images/reg_after_iret.png" /&gt;&lt;/p&gt;
&lt;h4&gt;2.10. The Stack Content After 'iret'&lt;/h4&gt;
&lt;p&gt;&lt;img alt="the stack content after iret" src="/assets/images/stack_after_iret.png" /&gt;&lt;/p&gt;
&lt;h4&gt;2.11. The Registers Before 'int 0x80'&lt;/h4&gt;
&lt;p&gt;&lt;img alt="the registers before int" src="/assets/images/reg_before_int.png" /&gt;&lt;/p&gt;
&lt;h4&gt;2.11. The Stack Content Before 'int 0x80'&lt;/h4&gt;
&lt;p&gt;&lt;img alt="the stack content before int" src="/assets/images/stack_before_int.png" /&gt;&lt;/p&gt;
&lt;h4&gt;2.12. The Registers After 'int 0x80'&lt;/h4&gt;
&lt;p&gt;&lt;img alt="the registers after int" src="/assets/images/reg_after_int.png" /&gt;&lt;/p&gt;
&lt;h4&gt;2.13. The Stack Content After 'int 0x80'&lt;/h4&gt;
&lt;p&gt;&lt;img alt="the Stack Content after int" src="/assets/images/stack_after_int.png" /&gt;&lt;/p&gt;
&lt;h3&gt;&lt;em&gt;Notice: 2.12 and 2.13 shows the registers change and stack switch!!!&lt;/em&gt;&lt;/h3&gt;
&lt;h2&gt;3. Conclusion&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;user_stack&lt;/code&gt; is used by kernel before Process 0 &lt;code&gt;move to user mode&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;user_stack&lt;/code&gt; is used as &lt;code&gt;Privilege 3 stack&lt;/code&gt; (so-called &lt;code&gt;user stack&lt;/code&gt; of Porcess 0) by Process 0 after it &lt;code&gt;move to user mode&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When Process 0 executes &lt;code&gt;int 0x80&lt;/code&gt;, the hardware will switch stack to &lt;code&gt;Privilege 0&lt;/code&gt; stack (so-called &lt;code&gt;kernel stack&lt;/code&gt; of Porcess 0) along with Privilege changing from &lt;code&gt;3&lt;/code&gt; to &lt;code&gt;0&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The Process 0 and Process 1 share the &lt;code&gt;user_stack&lt;/code&gt; as their &lt;code&gt;user stack&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary><category term="linxu"></category><category term="os"></category><category term="bochs"></category></entry><entry><title>Several Problems about Linux Kernel</title><link href="http://www.gotit.sinaapp.com/several-problems-about-linux-kernel.html" rel="alternate"></link><updated>2014-04-13T00:00:00+08:00</updated><author><name>ictlxb</name></author><id>tag:www.gotit.sinaapp.com,2014-04-13:several-problems-about-linux-kernel.html</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;There are several problems, which deserve being thought carefully, about linux kernel(version 0.11).
I will not give detail answers to the following questions, but give a brief outline for each question.
I do NOT promise the answers is exactly correct. 
if you find any mistake, please email liuxuebao AT ict.ac.cn. Thank you!
Have fun!
Good luck!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;1. Why BIOS is executed in the beginning after computer setup? Why not the Operating System?&lt;/h4&gt;
&lt;p&gt;The root cause might be the &lt;code&gt;von Neumann architecture&lt;/code&gt;.(CPU can only execute the code residing in the main memory.)&lt;/p&gt;
&lt;p&gt;The main memory is usually made of RAM in current computers.(RAM will lose all datas without power.)&lt;/p&gt;
&lt;p&gt;Therefore, there is no code in main memory to be executed just after computer setup.&lt;/p&gt;
&lt;p&gt;The code contained in BIOS will be executed first to boot the OS in the external storage such as disk, floppy and so on.&lt;/p&gt;
&lt;h4&gt;2. Why BIOS just loads the first sector of the disk, which is so-called bootsect, and the successive sectors is loaded by bootsect? Why not load all sectors through the BIOS?&lt;/h4&gt;
&lt;p&gt;It might be &lt;code&gt;historical reasons&lt;/code&gt; that Only the first sector of the disk is loaded by BIOS.Why not the second one, the third one and so on? It is just a convention.&lt;/p&gt;
&lt;p&gt;But the connvention is necessary and crucial because the BIOS and the OS are developed seperately by different teams. They known nothing about each other and cannot cooperate with each other without the conventions.  A good convention can give both of the BIOS and the OS scalability. The BIOS or the OS just cares about the functionality of itself and conform to the conventions.&lt;/p&gt;
&lt;p&gt;Different OSs might have different memory layouts. So, the BIOS load the bootsect rather than all of the sectors in order that the OS manage the memory itself and the BIOS keep simple and naive. The better the convention is, the less the BIOS and OS depend on each other.&lt;/p&gt;
&lt;h4&gt;3. Why the BIOS load the bootsect to the address 0x07c00 instand of 0x00000? Why bootsect is moved to the address 0x90000 after being loaded? Why not load to the correct address at the first time?&lt;/h4&gt;
&lt;p&gt;It might also be &lt;code&gt;historical reasons&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In the convention, the interrupt vector table is loaded to the address 0x00000. Obviously, if you load the bootsect here, the interrupt vector table  will be overwrittern by it. Nothing serious will happen if you are sure what you do.&lt;/p&gt;
&lt;p&gt;The bootsect is moved to the address 0x90000 becuase of the memory layouts of linux kernel(version 0.11). You can give some details about the layouts.&lt;/p&gt;
&lt;h4&gt;4. How the bootsect, the setup and the head cooperate(connect) with each other? Give some evidences(code).&lt;/h4&gt;
&lt;p&gt;We can easily find the follow assembly code in &lt;code&gt;boot/bootsect.s&lt;/code&gt;, which makes the execution turn to setup.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="nf"&gt;SETUPSEG&lt;/span&gt; &lt;span class="err"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0x9020&lt;/span&gt;           &lt;span class="err"&gt;!&lt;/span&gt; &lt;span class="no"&gt;setup&lt;/span&gt; &lt;span class="no"&gt;starts&lt;/span&gt; &lt;span class="no"&gt;here&lt;/span&gt; 

    &lt;span class="no"&gt;...&lt;/span&gt;

&lt;span class="err"&gt;!&lt;/span&gt; &lt;span class="nf"&gt;after&lt;/span&gt; &lt;span class="no"&gt;that&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;everyting&lt;/span&gt; &lt;span class="no"&gt;loaded&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="no"&gt;we&lt;/span&gt; &lt;span class="no"&gt;jump&lt;/span&gt; &lt;span class="no"&gt;to&lt;/span&gt;                                                                                                           
&lt;span class="err"&gt;!&lt;/span&gt; &lt;span class="no"&gt;the&lt;/span&gt; &lt;span class="no"&gt;setup-routine&lt;/span&gt; &lt;span class="no"&gt;loaded&lt;/span&gt; &lt;span class="no"&gt;directly&lt;/span&gt; &lt;span class="no"&gt;after&lt;/span&gt;
&lt;span class="err"&gt;!&lt;/span&gt; &lt;span class="nf"&gt;the&lt;/span&gt; &lt;span class="no"&gt;bootblock&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

    &lt;span class="nf"&gt;jmpi&lt;/span&gt;    &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="no"&gt;SETUPSEG&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Similarly, the follow assembly code, which makes the execution turn to head, can be found in &lt;code&gt;boot/setup.s&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;!&lt;/span&gt; &lt;span class="nf"&gt;Well&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;now&lt;/span&gt; &lt;span class="no"&gt;is&lt;/span&gt; &lt;span class="no"&gt;the&lt;/span&gt; &lt;span class="no"&gt;time&lt;/span&gt; &lt;span class="no"&gt;to&lt;/span&gt; &lt;span class="no"&gt;actually&lt;/span&gt; &lt;span class="no"&gt;move&lt;/span&gt; &lt;span class="no"&gt;into&lt;/span&gt; &lt;span class="no"&gt;protected&lt;/span&gt; &lt;span class="no"&gt;mode.&lt;/span&gt; &lt;span class="no"&gt;To&lt;/span&gt; &lt;span class="no"&gt;make&lt;/span&gt;
&lt;span class="err"&gt;!&lt;/span&gt; &lt;span class="nf"&gt;things&lt;/span&gt; &lt;span class="no"&gt;as&lt;/span&gt; &lt;span class="no"&gt;simple&lt;/span&gt; &lt;span class="no"&gt;as&lt;/span&gt; &lt;span class="no"&gt;possible&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;we&lt;/span&gt; &lt;span class="no"&gt;do&lt;/span&gt; &lt;span class="no"&gt;no&lt;/span&gt; &lt;span class="no"&gt;register&lt;/span&gt; &lt;span class="no"&gt;set-up&lt;/span&gt; &lt;span class="no"&gt;or&lt;/span&gt; &lt;span class="no"&gt;anything&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="err"&gt;!&lt;/span&gt; &lt;span class="nf"&gt;we&lt;/span&gt; &lt;span class="no"&gt;let&lt;/span&gt; &lt;span class="no"&gt;the&lt;/span&gt; &lt;span class="no"&gt;gnu-compiled&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="no"&gt;bit&lt;/span&gt; &lt;span class="no"&gt;programs&lt;/span&gt; &lt;span class="no"&gt;do&lt;/span&gt; &lt;span class="no"&gt;that.&lt;/span&gt; &lt;span class="no"&gt;We&lt;/span&gt; &lt;span class="no"&gt;just&lt;/span&gt; &lt;span class="no"&gt;jump&lt;/span&gt; &lt;span class="no"&gt;to&lt;/span&gt;
&lt;span class="err"&gt;!&lt;/span&gt; &lt;span class="nf"&gt;absolute&lt;/span&gt; &lt;span class="no"&gt;address&lt;/span&gt; &lt;span class="mi"&gt;0x00000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;in&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="no"&gt;bit&lt;/span&gt; &lt;span class="no"&gt;protected&lt;/span&gt; &lt;span class="no"&gt;mode.&lt;/span&gt;

    &lt;span class="nf"&gt;mov&lt;/span&gt; &lt;span class="no"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="c"&gt;#0x0001  ! protected mode (PE) bit&lt;/span&gt;
    &lt;span class="nf"&gt;lmsw&lt;/span&gt;    &lt;span class="no"&gt;ax&lt;/span&gt;      &lt;span class="err"&gt;!&lt;/span&gt; &lt;span class="no"&gt;This&lt;/span&gt; &lt;span class="no"&gt;is&lt;/span&gt; &lt;span class="no"&gt;it&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt;
    &lt;span class="nf"&gt;jmpi&lt;/span&gt;    &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;     &lt;span class="err"&gt;!&lt;/span&gt; &lt;span class="no"&gt;jmp&lt;/span&gt; &lt;span class="no"&gt;offset&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="no"&gt;of&lt;/span&gt; &lt;span class="no"&gt;segment&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;cs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;5. What is the meaning of 8 of the code &lt;code&gt;jmpi 0, 8&lt;/code&gt; in the boot/setup.s?&lt;/h4&gt;
&lt;p&gt;In 32-bit protected mode, the CS (Code Segment register) is used as code segment selector. The 8 (1000b) is the value of CS.&lt;/p&gt;
&lt;p&gt;A segment selector is a 16-bit identifier for a segment. It does not point directly to the segment, but instead points to the segment descriptor that defines the segment. A segment selector contains the following items:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Index&lt;/strong&gt;
(Bits 3 throuth 15) -- Selects one of 8192 descriptors in the GDT or LDT.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TI(table indicator) flag&lt;/strong&gt;
(Bit 2) -- Specifies the descriptor table to use:clearing this flag selects the GDT; setting this flag selects the current LDT.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Requested Privilege Level(RPL)&lt;/strong&gt;
(Bits 0 and 1) -- Specifies the privilege level of the selector. The privilege level can range from 0 to 3, with 0 being the most privileged level.&lt;/p&gt;
&lt;p&gt;Therefore, the 8 (1000b) means:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Index is 1.&lt;/li&gt;
&lt;li&gt;Selecting GDT.&lt;/li&gt;
&lt;li&gt;RPL is 0&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The code &lt;code&gt;jmpi 0, 8&lt;/code&gt; just indicates that we just jump to absolute address 0x00000000, in 32-bit protected mode.&lt;/p&gt;
&lt;h4&gt;6. What is protected in the protected mode? Where does the protection work? What is the meaning and purpose of privilege level? Is the Paging able to provide protections?&lt;/h4&gt;
&lt;p&gt;In protected mode, the IA-32 architectures provides a protections mechanism that operates at both the segment level and the page level.&lt;/p&gt;
&lt;p&gt;This protection mechanism provides the ability to &lt;code&gt;limit access to certain segments or pges based on privilege levels&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;When the protection mechanism is used, each memory reference is checked to verify that it satisfies various protection checks. The protection checks that are performed fall into the following categories:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Limit checks.&lt;/li&gt;
&lt;li&gt;Type checks.&lt;/li&gt;
&lt;li&gt;Privilege level checks.&lt;/li&gt;
&lt;li&gt;Restriction of addressable domain.&lt;/li&gt;
&lt;li&gt;Restriction of procedure entry-points.&lt;/li&gt;
&lt;li&gt;Restriction of instruction set.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All protection violtion results in an exception being generated.&lt;/p&gt;
&lt;p&gt;There are four privilege levels for segments and two privilege levels of pages in protected mode. The protection mechanism wiil prevent the less privileged code from accessing the more privileged code and data in any but a contorlled, defined manner.&lt;/p&gt;
&lt;h4&gt;7. GDT is set in setup. However, why is it discarded and set again in head? Why is it set twice instead of once?&lt;/h4&gt;
&lt;p&gt;The GDT which is set in setup will be overwritten according to the memory layout of linux kernel (version 0.11). So you must set it again in head &lt;/p&gt;
&lt;h4&gt;8. Where is the task_struct of Process 0? What is the content of it?&lt;/h4&gt;
&lt;p&gt;I do &lt;code&gt;NOT&lt;/code&gt; known where the task_struct of Process 0 is. But when I trace the linux kernel in my machine with bochs, I found it at the address 0x17280. Of course, it is meaningless.&lt;/p&gt;
&lt;p&gt;The content of it is as follow:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt; *  INIT_TASK is used to set up the first task table, touch at&lt;/span&gt;
&lt;span class="cm"&gt; * your own risk!. Base=0, limit=0x9ffff (=640kB)&lt;/span&gt;
&lt;span class="cm"&gt; */&lt;/span&gt;
&lt;span class="cp"&gt;#define INIT_TASK \&lt;/span&gt;
&lt;span class="cp"&gt;    &lt;/span&gt;&lt;span class="cm"&gt;/* state etc */&lt;/span&gt;&lt;span class="cp"&gt; { 0,15,15, \&lt;/span&gt;
&lt;span class="cp"&gt;        &lt;/span&gt;&lt;span class="cm"&gt;/* signals */&lt;/span&gt;&lt;span class="cp"&gt;   0,{ { },},0, \&lt;/span&gt;
&lt;span class="cp"&gt;        &lt;/span&gt;&lt;span class="cm"&gt;/* ec,brk... */&lt;/span&gt;&lt;span class="cp"&gt; 0,0,0,0,0,0, \&lt;/span&gt;
&lt;span class="cp"&gt;        &lt;/span&gt;&lt;span class="cm"&gt;/* pid etc.. */&lt;/span&gt;&lt;span class="cp"&gt; 0,-1,0,0,0, \&lt;/span&gt;
&lt;span class="cp"&gt;        &lt;/span&gt;&lt;span class="cm"&gt;/* uid etc */&lt;/span&gt;&lt;span class="cp"&gt;   0,0,0,0,0,0, \&lt;/span&gt;
&lt;span class="cp"&gt;        &lt;/span&gt;&lt;span class="cm"&gt;/* alarm */&lt;/span&gt;&lt;span class="cp"&gt; 0,0,0,0,0,0, \&lt;/span&gt;
&lt;span class="cp"&gt;        &lt;/span&gt;&lt;span class="cm"&gt;/* math */&lt;/span&gt;&lt;span class="cp"&gt;  0, \&lt;/span&gt;
&lt;span class="cp"&gt;        &lt;/span&gt;&lt;span class="cm"&gt;/* fs info */&lt;/span&gt;&lt;span class="cp"&gt;   -1,0022,NULL,NULL,NULL,0, \&lt;/span&gt;
&lt;span class="cp"&gt;        &lt;/span&gt;&lt;span class="cm"&gt;/* filp */&lt;/span&gt;&lt;span class="cp"&gt;  {NULL,}, \&lt;/span&gt;
&lt;span class="cp"&gt;        { \&lt;/span&gt;
&lt;span class="cp"&gt;            {0,0}, \&lt;/span&gt;
&lt;span class="cp"&gt;            &lt;/span&gt;&lt;span class="cm"&gt;/* ldt */&lt;/span&gt;&lt;span class="cp"&gt;   {0x9f,0xc0fa00}, \&lt;/span&gt;
&lt;span class="cp"&gt;            {0x9f,0xc0f200}, \&lt;/span&gt;
&lt;span class="cp"&gt;        }, \&lt;/span&gt;
&lt;span class="cp"&gt;        &lt;/span&gt;&lt;span class="cm"&gt;/*tss*/&lt;/span&gt;&lt;span class="cp"&gt; {0,PAGE_SIZE+(long)&amp;amp;init_task,0x10,0,0,0,0,(long)&amp;amp;pg_dir,\&lt;/span&gt;
&lt;span class="cp"&gt;            0,0,0,0,0,0,0,0, \&lt;/span&gt;
&lt;span class="cp"&gt;            0,0,0x17,0x17,0x17,0x17,0x17,0x17, \&lt;/span&gt;
&lt;span class="cp"&gt;            _LDT(0),0x80000000, \&lt;/span&gt;
&lt;span class="cp"&gt;            {} \&lt;/span&gt;
&lt;span class="cp"&gt;        }, \&lt;/span&gt;
&lt;span class="cp"&gt;    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It might look like &lt;a href="/assets/misc/task_struct.mem"&gt;this&lt;/a&gt; in memory.&lt;/p&gt;
&lt;h4&gt;9. Draw a picture describing the relationship between the first 7 pages after paging. Give some evidences(code).&lt;/h4&gt;
&lt;p&gt;The following picture comes from the book -- The Art of Linux Kernel Design.&lt;/p&gt;
&lt;p&gt;&lt;img alt="paging" src="/assets/images/paging.png" /&gt;&lt;/p&gt;
&lt;p&gt;Paging code is as follow:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nl"&gt;setup_paging:&lt;/span&gt;
    &lt;span class="nf"&gt;movl&lt;/span&gt; &lt;span class="no"&gt;$1024&lt;/span&gt;&lt;span class="p"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nv"&gt;%ecx&lt;/span&gt;       &lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="p"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="no"&gt;pages&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="no"&gt;pg_dir&lt;/span&gt;&lt;span class="err"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="no"&gt;page&lt;/span&gt; &lt;span class="no"&gt;tables&lt;/span&gt; &lt;span class="p"&gt;*&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;
    &lt;span class="nf"&gt;xorl&lt;/span&gt; &lt;span class="nv"&gt;%eax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nv"&gt;%eax&lt;/span&gt;
    &lt;span class="nf"&gt;xorl&lt;/span&gt; &lt;span class="nv"&gt;%edi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nv"&gt;%edi&lt;/span&gt;          &lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="p"&gt;*&lt;/span&gt; &lt;span class="no"&gt;pg_dir&lt;/span&gt; &lt;span class="no"&gt;is&lt;/span&gt; &lt;span class="no"&gt;at&lt;/span&gt; &lt;span class="mi"&gt;0x000&lt;/span&gt; &lt;span class="p"&gt;*&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;
    &lt;span class="nf"&gt;cld&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;&lt;span class="no"&gt;rep&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;&lt;span class="no"&gt;stosl&lt;/span&gt;
    &lt;span class="nf"&gt;movl&lt;/span&gt; &lt;span class="no"&gt;$pg0&lt;/span&gt;&lt;span class="err"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="no"&gt;_pg_dir&lt;/span&gt;     &lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="p"&gt;*&lt;/span&gt; &lt;span class="no"&gt;set&lt;/span&gt; &lt;span class="no"&gt;present&lt;/span&gt; &lt;span class="no"&gt;bit&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="no"&gt;user&lt;/span&gt; &lt;span class="no"&gt;r&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="no"&gt;w&lt;/span&gt; &lt;span class="p"&gt;*&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;
    &lt;span class="nf"&gt;movl&lt;/span&gt; &lt;span class="no"&gt;$pg1&lt;/span&gt;&lt;span class="err"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="no"&gt;_pg_dir&lt;/span&gt;&lt;span class="err"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;       &lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="p"&gt;*&lt;/span&gt;  &lt;span class="p"&gt;---------&lt;/span&gt; &lt;span class="err"&gt;&amp;quot;&lt;/span&gt; &lt;span class="err"&gt;&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;---------&lt;/span&gt; &lt;span class="p"&gt;*&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;
    &lt;span class="nf"&gt;movl&lt;/span&gt; &lt;span class="no"&gt;$pg2&lt;/span&gt;&lt;span class="err"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="no"&gt;_pg_dir&lt;/span&gt;&lt;span class="err"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;       &lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="p"&gt;*&lt;/span&gt;  &lt;span class="p"&gt;---------&lt;/span&gt; &lt;span class="err"&gt;&amp;quot;&lt;/span&gt; &lt;span class="err"&gt;&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;---------&lt;/span&gt; &lt;span class="p"&gt;*&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;
    &lt;span class="nf"&gt;movl&lt;/span&gt; &lt;span class="no"&gt;$pg3&lt;/span&gt;&lt;span class="err"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="no"&gt;_pg_dir&lt;/span&gt;&lt;span class="err"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;      &lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="p"&gt;*&lt;/span&gt;  &lt;span class="p"&gt;---------&lt;/span&gt; &lt;span class="err"&gt;&amp;quot;&lt;/span&gt; &lt;span class="err"&gt;&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;---------&lt;/span&gt; &lt;span class="p"&gt;*&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;
    &lt;span class="nf"&gt;movl&lt;/span&gt; &lt;span class="no"&gt;$pg3&lt;/span&gt;&lt;span class="err"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;4092&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nv"&gt;%edi&lt;/span&gt;
    &lt;span class="nf"&gt;movl&lt;/span&gt; &lt;span class="no"&gt;$0xfff007&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nv"&gt;%eax&lt;/span&gt;     &lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="p"&gt;*&lt;/span&gt;  &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="no"&gt;Mb&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;4096&lt;/span&gt; &lt;span class="err"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;r&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="no"&gt;w&lt;/span&gt; &lt;span class="no"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="no"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;*&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;
    &lt;span class="nf"&gt;std&lt;/span&gt;
&lt;span class="err"&gt;1:&lt;/span&gt;  &lt;span class="nf"&gt;stosl&lt;/span&gt;           &lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="p"&gt;*&lt;/span&gt; &lt;span class="no"&gt;fill&lt;/span&gt; &lt;span class="no"&gt;pages&lt;/span&gt; &lt;span class="no"&gt;backwards&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="no"&gt;more&lt;/span&gt; &lt;span class="no"&gt;efficient&lt;/span&gt; &lt;span class="p"&gt;:-)&lt;/span&gt; &lt;span class="p"&gt;*&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;
    &lt;span class="nf"&gt;subl&lt;/span&gt; &lt;span class="no"&gt;$0x1000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nv"&gt;%eax&lt;/span&gt;
    &lt;span class="nf"&gt;jge&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="no"&gt;b&lt;/span&gt;
    &lt;span class="nf"&gt;xorl&lt;/span&gt; &lt;span class="nv"&gt;%eax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nv"&gt;%eax&lt;/span&gt;      &lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="p"&gt;*&lt;/span&gt; &lt;span class="no"&gt;pg_dir&lt;/span&gt; &lt;span class="no"&gt;is&lt;/span&gt; &lt;span class="no"&gt;at&lt;/span&gt; &lt;span class="mi"&gt;0x0000&lt;/span&gt; &lt;span class="p"&gt;*&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;
    &lt;span class="nf"&gt;movl&lt;/span&gt; &lt;span class="nv"&gt;%eax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nv"&gt;%cr3&lt;/span&gt;      &lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="p"&gt;*&lt;/span&gt; &lt;span class="no"&gt;cr3&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="no"&gt;page&lt;/span&gt; &lt;span class="no"&gt;directory&lt;/span&gt; &lt;span class="no"&gt;start&lt;/span&gt; &lt;span class="p"&gt;*&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;
    &lt;span class="nf"&gt;movl&lt;/span&gt; &lt;span class="nv"&gt;%cr0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nv"&gt;%eax&lt;/span&gt;
    &lt;span class="nf"&gt;orl&lt;/span&gt; &lt;span class="no"&gt;$0x80000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nv"&gt;%eax&lt;/span&gt;
    &lt;span class="nf"&gt;movl&lt;/span&gt; &lt;span class="nv"&gt;%eax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nv"&gt;%cr0&lt;/span&gt;      &lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="p"&gt;*&lt;/span&gt; &lt;span class="no"&gt;set&lt;/span&gt; &lt;span class="no"&gt;paging&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;PG&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="no"&gt;bit&lt;/span&gt; &lt;span class="p"&gt;*&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;
    &lt;span class="nf"&gt;ret&lt;/span&gt;         &lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="p"&gt;*&lt;/span&gt; &lt;span class="no"&gt;this&lt;/span&gt; &lt;span class="no"&gt;also&lt;/span&gt; &lt;span class="no"&gt;flushes&lt;/span&gt; &lt;span class="no"&gt;prefetch-queue&lt;/span&gt; &lt;span class="p"&gt;*&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;10. What is the content of 184 bytes just before IDT after head finish executing? Why the code is left?&lt;/h4&gt;
&lt;p&gt;The content is as follow:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nl"&gt;after_page_tables:&lt;/span&gt;
    &lt;span class="nf"&gt;pushl&lt;/span&gt; &lt;span class="no"&gt;$0&lt;/span&gt;        &lt;span class="c"&gt;# These are the parameters to main :-)&lt;/span&gt;
    &lt;span class="nf"&gt;pushl&lt;/span&gt; &lt;span class="no"&gt;$0&lt;/span&gt;
    &lt;span class="nf"&gt;pushl&lt;/span&gt; &lt;span class="no"&gt;$0&lt;/span&gt;
    &lt;span class="nf"&gt;pushl&lt;/span&gt; &lt;span class="no"&gt;$L6&lt;/span&gt;       &lt;span class="c"&gt;# return address for main, if it decides to.&lt;/span&gt;
    &lt;span class="nf"&gt;pushl&lt;/span&gt; &lt;span class="no"&gt;$_main&lt;/span&gt;
    &lt;span class="nf"&gt;jmp&lt;/span&gt; &lt;span class="no"&gt;setup_paging&lt;/span&gt;
&lt;span class="nl"&gt;L6:&lt;/span&gt;
    &lt;span class="nf"&gt;jmp&lt;/span&gt; &lt;span class="no"&gt;L6&lt;/span&gt;          &lt;span class="c"&gt;# main should never return here, but&lt;/span&gt;
                &lt;span class="c"&gt;# just in case, we know what happens.&lt;/span&gt;

&lt;span class="err"&gt;/*&lt;/span&gt; &lt;span class="nf"&gt;This&lt;/span&gt; &lt;span class="no"&gt;is&lt;/span&gt; &lt;span class="no"&gt;the&lt;/span&gt; &lt;span class="no"&gt;default&lt;/span&gt; &lt;span class="no"&gt;interrupt&lt;/span&gt; &lt;span class="err"&gt;&amp;quot;&lt;/span&gt;&lt;span class="no"&gt;handler&lt;/span&gt;&lt;span class="err"&gt;&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;:-)&lt;/span&gt; &lt;span class="p"&gt;*&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;
&lt;span class="nl"&gt;int_msg:&lt;/span&gt;
    &lt;span class="na"&gt;.asciz&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Unknown interrupt\n\r&amp;quot;&lt;/span&gt;
&lt;span class="na"&gt;.align&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="nl"&gt;ignore_int:&lt;/span&gt;
    &lt;span class="nf"&gt;pushl&lt;/span&gt; &lt;span class="nv"&gt;%eax&lt;/span&gt;
    &lt;span class="nf"&gt;pushl&lt;/span&gt; &lt;span class="nv"&gt;%ecx&lt;/span&gt;
    &lt;span class="nf"&gt;pushl&lt;/span&gt; &lt;span class="nv"&gt;%edx&lt;/span&gt;
    &lt;span class="nf"&gt;push&lt;/span&gt; &lt;span class="nv"&gt;%ds&lt;/span&gt;
    &lt;span class="nf"&gt;push&lt;/span&gt; &lt;span class="nv"&gt;%es&lt;/span&gt;
    &lt;span class="nf"&gt;push&lt;/span&gt; &lt;span class="nv"&gt;%fs&lt;/span&gt;
    &lt;span class="nf"&gt;movl&lt;/span&gt; &lt;span class="no"&gt;$0x10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nv"&gt;%eax&lt;/span&gt;
    &lt;span class="nf"&gt;mov&lt;/span&gt; &lt;span class="nv"&gt;%ax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nv"&gt;%ds&lt;/span&gt;
    &lt;span class="nf"&gt;mov&lt;/span&gt; &lt;span class="nv"&gt;%ax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nv"&gt;%es&lt;/span&gt;
    &lt;span class="nf"&gt;mov&lt;/span&gt; &lt;span class="nv"&gt;%ax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nv"&gt;%fs&lt;/span&gt;
    &lt;span class="nf"&gt;pushl&lt;/span&gt; &lt;span class="no"&gt;$int_msg&lt;/span&gt;
    &lt;span class="nf"&gt;call&lt;/span&gt; &lt;span class="no"&gt;_printk&lt;/span&gt;
    &lt;span class="nf"&gt;popl&lt;/span&gt; &lt;span class="nv"&gt;%eax&lt;/span&gt;
    &lt;span class="nf"&gt;pop&lt;/span&gt; &lt;span class="nv"&gt;%fs&lt;/span&gt;
    &lt;span class="nf"&gt;pop&lt;/span&gt; &lt;span class="nv"&gt;%es&lt;/span&gt;
    &lt;span class="nf"&gt;pop&lt;/span&gt; &lt;span class="nv"&gt;%ds&lt;/span&gt;
    &lt;span class="nf"&gt;popl&lt;/span&gt; &lt;span class="nv"&gt;%edx&lt;/span&gt;
    &lt;span class="nf"&gt;popl&lt;/span&gt; &lt;span class="nv"&gt;%ecx&lt;/span&gt;
    &lt;span class="nf"&gt;popl&lt;/span&gt; &lt;span class="nv"&gt;%eax&lt;/span&gt;
    &lt;span class="nf"&gt;iret&lt;/span&gt;

&lt;span class="na"&gt;.align&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="nl"&gt;setup_paging:&lt;/span&gt;
    &lt;span class="nf"&gt;movl&lt;/span&gt; &lt;span class="no"&gt;$1024&lt;/span&gt;&lt;span class="p"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nv"&gt;%ecx&lt;/span&gt;       &lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="p"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="no"&gt;pages&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="no"&gt;pg_dir&lt;/span&gt;&lt;span class="err"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="no"&gt;page&lt;/span&gt; &lt;span class="no"&gt;tables&lt;/span&gt; &lt;span class="p"&gt;*&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;
    &lt;span class="nf"&gt;xorl&lt;/span&gt; &lt;span class="nv"&gt;%eax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nv"&gt;%eax&lt;/span&gt;
    &lt;span class="nf"&gt;xorl&lt;/span&gt; &lt;span class="nv"&gt;%edi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nv"&gt;%edi&lt;/span&gt;          &lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="p"&gt;*&lt;/span&gt; &lt;span class="no"&gt;pg_dir&lt;/span&gt; &lt;span class="no"&gt;is&lt;/span&gt; &lt;span class="no"&gt;at&lt;/span&gt; &lt;span class="mi"&gt;0x000&lt;/span&gt; &lt;span class="p"&gt;*&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;
    &lt;span class="nf"&gt;cld&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;&lt;span class="no"&gt;rep&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;&lt;span class="no"&gt;stosl&lt;/span&gt;
    &lt;span class="nf"&gt;movl&lt;/span&gt; &lt;span class="no"&gt;$pg0&lt;/span&gt;&lt;span class="err"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="no"&gt;_pg_dir&lt;/span&gt;     &lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="p"&gt;*&lt;/span&gt; &lt;span class="no"&gt;set&lt;/span&gt; &lt;span class="no"&gt;present&lt;/span&gt; &lt;span class="no"&gt;bit&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="no"&gt;user&lt;/span&gt; &lt;span class="no"&gt;r&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="no"&gt;w&lt;/span&gt; &lt;span class="p"&gt;*&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;
    &lt;span class="nf"&gt;movl&lt;/span&gt; &lt;span class="no"&gt;$pg1&lt;/span&gt;&lt;span class="err"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="no"&gt;_pg_dir&lt;/span&gt;&lt;span class="err"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;       &lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="p"&gt;*&lt;/span&gt;  &lt;span class="p"&gt;---------&lt;/span&gt; &lt;span class="err"&gt;&amp;quot;&lt;/span&gt; &lt;span class="err"&gt;&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;---------&lt;/span&gt; &lt;span class="p"&gt;*&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;
    &lt;span class="nf"&gt;movl&lt;/span&gt; &lt;span class="no"&gt;$pg2&lt;/span&gt;&lt;span class="err"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="no"&gt;_pg_dir&lt;/span&gt;&lt;span class="err"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;       &lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="p"&gt;*&lt;/span&gt;  &lt;span class="p"&gt;---------&lt;/span&gt; &lt;span class="err"&gt;&amp;quot;&lt;/span&gt; &lt;span class="err"&gt;&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;---------&lt;/span&gt; &lt;span class="p"&gt;*&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;
    &lt;span class="nf"&gt;movl&lt;/span&gt; &lt;span class="no"&gt;$pg3&lt;/span&gt;&lt;span class="err"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="no"&gt;_pg_dir&lt;/span&gt;&lt;span class="err"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;      &lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="p"&gt;*&lt;/span&gt;  &lt;span class="p"&gt;---------&lt;/span&gt; &lt;span class="err"&gt;&amp;quot;&lt;/span&gt; &lt;span class="err"&gt;&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;---------&lt;/span&gt; &lt;span class="p"&gt;*&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;
    &lt;span class="nf"&gt;movl&lt;/span&gt; &lt;span class="no"&gt;$pg3&lt;/span&gt;&lt;span class="err"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;4092&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nv"&gt;%edi&lt;/span&gt;
    &lt;span class="nf"&gt;movl&lt;/span&gt; &lt;span class="no"&gt;$0xfff007&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nv"&gt;%eax&lt;/span&gt;     &lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="p"&gt;*&lt;/span&gt;  &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="no"&gt;Mb&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;4096&lt;/span&gt; &lt;span class="err"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;r&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="no"&gt;w&lt;/span&gt; &lt;span class="no"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="no"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;*&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;
    &lt;span class="nf"&gt;std&lt;/span&gt;
&lt;span class="err"&gt;1:&lt;/span&gt;  &lt;span class="nf"&gt;stosl&lt;/span&gt;           &lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="p"&gt;*&lt;/span&gt; &lt;span class="no"&gt;fill&lt;/span&gt; &lt;span class="no"&gt;pages&lt;/span&gt; &lt;span class="no"&gt;backwards&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="no"&gt;more&lt;/span&gt; &lt;span class="no"&gt;efficient&lt;/span&gt; &lt;span class="p"&gt;:-)&lt;/span&gt; &lt;span class="p"&gt;*&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;
    &lt;span class="nf"&gt;subl&lt;/span&gt; &lt;span class="no"&gt;$0x1000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nv"&gt;%eax&lt;/span&gt;
    &lt;span class="nf"&gt;jge&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="no"&gt;b&lt;/span&gt;
    &lt;span class="nf"&gt;xorl&lt;/span&gt; &lt;span class="nv"&gt;%eax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nv"&gt;%eax&lt;/span&gt;      &lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="p"&gt;*&lt;/span&gt; &lt;span class="no"&gt;pg_dir&lt;/span&gt; &lt;span class="no"&gt;is&lt;/span&gt; &lt;span class="no"&gt;at&lt;/span&gt; &lt;span class="mi"&gt;0x0000&lt;/span&gt; &lt;span class="p"&gt;*&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;
    &lt;span class="nf"&gt;movl&lt;/span&gt; &lt;span class="nv"&gt;%eax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nv"&gt;%cr3&lt;/span&gt;      &lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="p"&gt;*&lt;/span&gt; &lt;span class="no"&gt;cr3&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="no"&gt;page&lt;/span&gt; &lt;span class="no"&gt;directory&lt;/span&gt; &lt;span class="no"&gt;start&lt;/span&gt; &lt;span class="p"&gt;*&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;
    &lt;span class="nf"&gt;movl&lt;/span&gt; &lt;span class="nv"&gt;%cr0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nv"&gt;%eax&lt;/span&gt;
    &lt;span class="nf"&gt;orl&lt;/span&gt; &lt;span class="no"&gt;$0x80000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nv"&gt;%eax&lt;/span&gt;
    &lt;span class="nf"&gt;movl&lt;/span&gt; &lt;span class="nv"&gt;%eax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nv"&gt;%cr0&lt;/span&gt;      &lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="p"&gt;*&lt;/span&gt; &lt;span class="no"&gt;set&lt;/span&gt; &lt;span class="no"&gt;paging&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;PG&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="no"&gt;bit&lt;/span&gt; &lt;span class="p"&gt;*&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;
    &lt;span class="nf"&gt;ret&lt;/span&gt;         &lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="p"&gt;*&lt;/span&gt; &lt;span class="no"&gt;this&lt;/span&gt; &lt;span class="no"&gt;also&lt;/span&gt; &lt;span class="no"&gt;flushes&lt;/span&gt; &lt;span class="no"&gt;prefetch-queue&lt;/span&gt; &lt;span class="p"&gt;*&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;

&lt;span class="na"&gt;.align&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="na"&gt;.word&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="nl"&gt;idt_descr:&lt;/span&gt;
    &lt;span class="na"&gt;.word&lt;/span&gt; &lt;span class="mi"&gt;256&lt;/span&gt;&lt;span class="p"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;       &lt;span class="c"&gt;# idt contains 256 entries&lt;/span&gt;
    &lt;span class="na"&gt;.long&lt;/span&gt; &lt;span class="no"&gt;_idt&lt;/span&gt;
&lt;span class="na"&gt;.align&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="na"&gt;.word&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="nl"&gt;gdt_descr:&lt;/span&gt;
    &lt;span class="na"&gt;.word&lt;/span&gt; &lt;span class="mi"&gt;256&lt;/span&gt;&lt;span class="p"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;       &lt;span class="c"&gt;# so does gdt (not that that is any&lt;/span&gt;
    &lt;span class="na"&gt;.long&lt;/span&gt; &lt;span class="no"&gt;_gdt&lt;/span&gt;      &lt;span class="c"&gt;# magic number, but it works for me :^)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Obviously, the code left performs paging and turn the execution to main. It also contains some crucial data such as the initializer of IDTR and GDTR.&lt;/p&gt;
&lt;h4&gt;11. Why execution is turned to main by 'ret'? Why not turn the execution by call? Draw a picture to describe it and give some evidences.&lt;/h4&gt;
&lt;p&gt;It is a logical problem. If we use &lt;code&gt;call&lt;/code&gt; here, we admin that something &lt;code&gt;call&lt;/code&gt; to the OS. But there is nothing but the OS during the head execution. &lt;code&gt;ret&lt;/code&gt; might solve the logical dilemma.&lt;/p&gt;
&lt;p&gt;The code evidence is as follow:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nl"&gt;after_page_tables:&lt;/span&gt;
    &lt;span class="nf"&gt;pushl&lt;/span&gt; &lt;span class="no"&gt;$0&lt;/span&gt;        &lt;span class="c"&gt;# These are the parameters to main :-)&lt;/span&gt;
    &lt;span class="nf"&gt;pushl&lt;/span&gt; &lt;span class="no"&gt;$0&lt;/span&gt;
    &lt;span class="nf"&gt;pushl&lt;/span&gt; &lt;span class="no"&gt;$0&lt;/span&gt;
    &lt;span class="nf"&gt;pushl&lt;/span&gt; &lt;span class="no"&gt;$L6&lt;/span&gt;       &lt;span class="c"&gt;# return address for main, if it decides to.&lt;/span&gt;
    &lt;span class="nf"&gt;pushl&lt;/span&gt; &lt;span class="no"&gt;$_main&lt;/span&gt;
    &lt;span class="nf"&gt;jmp&lt;/span&gt; &lt;span class="no"&gt;setup_paging&lt;/span&gt;
&lt;span class="nl"&gt;L6:&lt;/span&gt;
    &lt;span class="nf"&gt;jmp&lt;/span&gt; &lt;span class="no"&gt;L6&lt;/span&gt;          &lt;span class="c"&gt;# main should never return here, but&lt;/span&gt;
                &lt;span class="c"&gt;# just in case, we know what happens.&lt;/span&gt;

&lt;span class="nl"&gt;setup_paging:&lt;/span&gt;
    &lt;span class="nf"&gt;movl&lt;/span&gt; &lt;span class="no"&gt;$1024&lt;/span&gt;&lt;span class="p"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nv"&gt;%ecx&lt;/span&gt;       &lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="p"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="no"&gt;pages&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="no"&gt;pg_dir&lt;/span&gt;&lt;span class="err"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="no"&gt;page&lt;/span&gt; &lt;span class="no"&gt;tables&lt;/span&gt; &lt;span class="p"&gt;*&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;

    &lt;span class="na"&gt;...&lt;/span&gt;

    &lt;span class="nf"&gt;ret&lt;/span&gt;         &lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="p"&gt;*&lt;/span&gt; &lt;span class="no"&gt;this&lt;/span&gt; &lt;span class="no"&gt;also&lt;/span&gt; &lt;span class="no"&gt;flushes&lt;/span&gt; &lt;span class="no"&gt;prefetch-queue&lt;/span&gt; &lt;span class="p"&gt;*&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;12. Describe the initialization of Interrupt Descriptor Table. Give an example.&lt;/h4&gt;
&lt;p&gt;In the &lt;code&gt;main&lt;/code&gt; function, &lt;code&gt;trap_init&lt;/code&gt; is called.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;trap_init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;set_trap_gate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;divide_error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;set_trap_gate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="p"&gt;...&lt;/span&gt;

    &lt;span class="n"&gt;set_trap_gate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;39&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;parallel_interrupt&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;set_trap_gate&lt;/code&gt; and &lt;code&gt;_set_gate&lt;/code&gt; is as follow:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#define set_trap_gate(n,addr) \                                                                                                 &lt;/span&gt;
&lt;span class="nf"&gt;_set_gate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;amp;&lt;/span&gt;&lt;span class="no"&gt;idt&lt;/span&gt;&lt;span class="err"&gt;[&lt;/span&gt;&lt;span class="no"&gt;n&lt;/span&gt;&lt;span class="err"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="no"&gt;addr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;#define _set_gate(gate_addr,type,dpl,addr) \                                                                                   &lt;/span&gt;
    &lt;span class="nf"&gt;__asm__&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;quot;&lt;/span&gt;&lt;span class="no"&gt;movw&lt;/span&gt; &lt;span class="err"&gt;%&lt;/span&gt;&lt;span class="nv"&gt;%dx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;%&lt;/span&gt;&lt;span class="nv"&gt;%ax&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="no"&gt;n&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="no"&gt;t&lt;/span&gt;&lt;span class="err"&gt;&amp;quot;&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;
            &lt;span class="err"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nf"&gt;movw&lt;/span&gt; &lt;span class="err"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;%&lt;/span&gt;&lt;span class="nv"&gt;%dx&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="no"&gt;n&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="no"&gt;t&lt;/span&gt;&lt;span class="err"&gt;&amp;quot;&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;
            &lt;span class="err"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nf"&gt;movl&lt;/span&gt; &lt;span class="err"&gt;%&lt;/span&gt;&lt;span class="nv"&gt;%eax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="no"&gt;n&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="no"&gt;t&lt;/span&gt;&lt;span class="err"&gt;&amp;quot;&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;
            &lt;span class="err"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nf"&gt;movl&lt;/span&gt; &lt;span class="err"&gt;%&lt;/span&gt;&lt;span class="nv"&gt;%edx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="err"&gt;&amp;quot;&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;
            &lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;
            &lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="err"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nf"&gt;i&lt;/span&gt;&lt;span class="err"&gt;&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="no"&gt;short&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0x8000&lt;/span&gt;&lt;span class="err"&gt;+&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;dpl&lt;/span&gt;&lt;span class="err"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;+&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;type&lt;/span&gt;&lt;span class="err"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;))),&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;
            &lt;span class="err"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nf"&gt;o&lt;/span&gt;&lt;span class="err"&gt;&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;(*((&lt;/span&gt;&lt;span class="no"&gt;char&lt;/span&gt; &lt;span class="p"&gt;*)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;gate_addr&lt;/span&gt;&lt;span class="p"&gt;))),&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;
            &lt;span class="err"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nf"&gt;o&lt;/span&gt;&lt;span class="err"&gt;&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;(*(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="err"&gt;+&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;char&lt;/span&gt; &lt;span class="p"&gt;*)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;gate_addr&lt;/span&gt;&lt;span class="p"&gt;))),&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;
            &lt;span class="err"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nf"&gt;d&lt;/span&gt;&lt;span class="err"&gt;&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="no"&gt;char&lt;/span&gt; &lt;span class="p"&gt;*)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;addr&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;&lt;span class="err"&gt;&amp;quot;&lt;/span&gt;&lt;span class="no"&gt;a&lt;/span&gt;&lt;span class="err"&gt;&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0x00080000&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;13. There are more than 20 instructions can be only executed in Privilege 0 in the IA-32 architectures. However, other instructions like 'cli' is not one of them. Why does the process with Priviledge 3 cannot execute it in linux 0.11?&lt;/h4&gt;
&lt;p&gt;The instructions &lt;code&gt;cli&lt;/code&gt; and &lt;code&gt;sti&lt;/code&gt; are under control of IOPL (Input/Output Privilege Level), which resdes in eflags. When the IOPL field is 0, the process with Privilege 3 cannnot execute them.&lt;/p&gt;
&lt;p&gt;The code evidence is as follow:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt; *  INIT_TASK is used to set up the first task table, touch at&lt;/span&gt;
&lt;span class="cm"&gt; * your own risk!. Base=0, limit=0x9ffff (=640kB)&lt;/span&gt;
&lt;span class="cm"&gt; */&lt;/span&gt;
&lt;span class="cp"&gt;#define INIT_TASK \&lt;/span&gt;
&lt;span class="cp"&gt;    &lt;/span&gt;&lt;span class="cm"&gt;/* state etc */&lt;/span&gt;&lt;span class="cp"&gt; { 0,15,15, \&lt;/span&gt;
&lt;span class="cp"&gt;        &lt;/span&gt;&lt;span class="cm"&gt;/* signals */&lt;/span&gt;&lt;span class="cp"&gt;   0,{ { },},0, \&lt;/span&gt;
&lt;span class="cp"&gt;        &lt;/span&gt;&lt;span class="cm"&gt;/* ec,brk... */&lt;/span&gt;&lt;span class="cp"&gt; 0,0,0,0,0,0, \&lt;/span&gt;
&lt;span class="cp"&gt;        &lt;/span&gt;&lt;span class="cm"&gt;/* pid etc.. */&lt;/span&gt;&lt;span class="cp"&gt; 0,-1,0,0,0, \&lt;/span&gt;
&lt;span class="cp"&gt;        &lt;/span&gt;&lt;span class="cm"&gt;/* uid etc */&lt;/span&gt;&lt;span class="cp"&gt;   0,0,0,0,0,0, \&lt;/span&gt;
&lt;span class="cp"&gt;        &lt;/span&gt;&lt;span class="cm"&gt;/* alarm */&lt;/span&gt;&lt;span class="cp"&gt; 0,0,0,0,0,0, \&lt;/span&gt;
&lt;span class="cp"&gt;        &lt;/span&gt;&lt;span class="cm"&gt;/* math */&lt;/span&gt;&lt;span class="cp"&gt;  0, \&lt;/span&gt;
&lt;span class="cp"&gt;        &lt;/span&gt;&lt;span class="cm"&gt;/* fs info */&lt;/span&gt;&lt;span class="cp"&gt;   -1,0022,NULL,NULL,NULL,0, \&lt;/span&gt;
&lt;span class="cp"&gt;        &lt;/span&gt;&lt;span class="cm"&gt;/* filp */&lt;/span&gt;&lt;span class="cp"&gt;  {NULL,}, \&lt;/span&gt;
&lt;span class="cp"&gt;        { \&lt;/span&gt;
&lt;span class="cp"&gt;            {0,0}, \&lt;/span&gt;
&lt;span class="cp"&gt;            &lt;/span&gt;&lt;span class="cm"&gt;/* ldt */&lt;/span&gt;&lt;span class="cp"&gt;   {0x9f,0xc0fa00}, \&lt;/span&gt;
&lt;span class="cp"&gt;            {0x9f,0xc0f200}, \&lt;/span&gt;
&lt;span class="cp"&gt;        }, \&lt;/span&gt;
&lt;span class="cp"&gt;        &lt;/span&gt;&lt;span class="cm"&gt;/*tss*/&lt;/span&gt;&lt;span class="cp"&gt; {0,PAGE_SIZE+(long)&amp;amp;init_task,0x10,0,0,0,0,(long)&amp;amp;pg_dir,\&lt;/span&gt;
&lt;span class="cp"&gt;            0,0&lt;/span&gt;&lt;span class="cm"&gt;/* eflags */&lt;/span&gt;&lt;span class="cp"&gt;,0,0,0,0,0,0, \&lt;/span&gt;
&lt;span class="cp"&gt;            0,0,0x17,0x17,0x17,0x17,0x17,0x17, \&lt;/span&gt;
&lt;span class="cp"&gt;            _LDT(0),0x80000000, \&lt;/span&gt;
&lt;span class="cp"&gt;            {} \&lt;/span&gt;
&lt;span class="cp"&gt;        }, \&lt;/span&gt;
&lt;span class="cp"&gt;    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The task sturct of process 0 is initialized with &lt;code&gt;INIT_TASK&lt;/code&gt;. Obviously, the &lt;code&gt;eflags.IOPL&lt;/code&gt; is 0. The task structs of other processes are copy of &lt;code&gt;INIT_TASK&lt;/code&gt; with no changing &lt;code&gt;eflags.IOPL&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;copy_process&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;nr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;ebp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;edi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;esi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;gs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;none&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;ebx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;ecx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;edx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;es&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;ds&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
        &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;eip&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;cs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;eflags&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;esp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;ss&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;task_struct&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 

    &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;task_struct&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;get_free_page&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;EAGAIN&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;nr&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;current&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="cm"&gt;/* NOTE! this doesn&amp;#39;t copy the supervisor stack */&lt;/span&gt;

    &lt;span class="p"&gt;...&lt;/span&gt;

    &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;tss&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;eflags&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;eflags&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="p"&gt;...&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;14. It is the same as question 8.&lt;/h4&gt;
&lt;h4&gt;15. Interrupt gate, trap gate and system call are set throuth _set_gate function. The difference between them is that the DPL of system call gate is 3, but the DPL of the other two is 0. Try to explain it.&lt;/h4&gt;
&lt;p&gt;When the DPL of a gate is 0, the gate can only be called by the processes with privilege 0, such as kernel.&lt;/p&gt;
&lt;p&gt;When the DPL of a gate is 3, the gate can be called by the processes with privilege 3, such as user application.&lt;/p&gt;
&lt;p&gt;Usually, the interrupt gate and trap gate are critical system function, which should be executed only by kernel.&lt;/p&gt;
&lt;p&gt;However, the system call is designed for the user applications to use the functions provided by OS.&lt;/p&gt;
&lt;h4&gt;16. Why the Process 0 calls the 'move_to_user_mode()' bofore forking the Process 1? How does the function work? Try to explain it.&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;In Linux, all the processes expect Process 0 should be created by an existing process running in the Privilege 3.
The Process 0 is designed by OS designers and is running in Privilege 0 before &lt;code&gt;move_to_user_mode()&lt;/code&gt;.
In order to conform the standards, Process 0 should call &lt;code&gt;move_to_user_mode&lt;/code&gt; to change the current privilege level before forking the Process 1.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The explanation above is given by &lt;code&gt;The Art of Linux Kernel Design&lt;/code&gt;. But it seems unreasonable.&lt;/p&gt;
&lt;p&gt;According to my best knowledge, if the privilege level does not change after call gate, the stack will not be switched.This might cause unexpected results. Stack switching during an interprivilege-level call should be the root cause.&lt;/p&gt;
&lt;p&gt;The function &lt;code&gt;move_to_user_mode&lt;/code&gt; imitate what the hardware do when an interrupt occurs.
Firstly, &lt;code&gt;SS&lt;/code&gt;, &lt;code&gt;ESP&lt;/code&gt;, &lt;code&gt;EFLAGS&lt;/code&gt;, &lt;code&gt;CS&lt;/code&gt; and &lt;code&gt;EIP&lt;/code&gt; will be pushed into the current stack.
Then, the instruction &lt;code&gt;iret&lt;/code&gt; will be executed.  The hardware will do what it does while returning from a call gate, such as poping the registers to corresponding one.&lt;/p&gt;
&lt;p&gt;The code is as follow:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#define move_to_user_mode() \                                                                                                                &lt;/span&gt;
&lt;span class="n"&gt;__asm__&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;movl %%esp,%%eax&lt;/span&gt;&lt;span class="se"&gt;\n\t&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt; \
        &lt;span class="s"&gt;&amp;quot;pushl $0x17&lt;/span&gt;&lt;span class="se"&gt;\n\t&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt; \
        &lt;span class="s"&gt;&amp;quot;pushl %%eax&lt;/span&gt;&lt;span class="se"&gt;\n\t&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt; \
        &lt;span class="s"&gt;&amp;quot;pushfl&lt;/span&gt;&lt;span class="se"&gt;\n\t&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt; \
        &lt;span class="s"&gt;&amp;quot;pushl $0x0f&lt;/span&gt;&lt;span class="se"&gt;\n\t&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt; \
        &lt;span class="s"&gt;&amp;quot;pushl $1f&lt;/span&gt;&lt;span class="se"&gt;\n\t&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt; \
        &lt;span class="s"&gt;&amp;quot;iret&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt; \
        &lt;span class="s"&gt;&amp;quot;1:&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s"&gt;movl $0x17,%%eax&lt;/span&gt;&lt;span class="se"&gt;\n\t&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt; \
        &lt;span class="s"&gt;&amp;quot;movw %%ax,%%ds&lt;/span&gt;&lt;span class="se"&gt;\n\t&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt; \
        &lt;span class="s"&gt;&amp;quot;movw %%ax,%%es&lt;/span&gt;&lt;span class="se"&gt;\n\t&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt; \
        &lt;span class="s"&gt;&amp;quot;movw %%ax,%%fs&lt;/span&gt;&lt;span class="se"&gt;\n\t&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt; \
        &lt;span class="s"&gt;&amp;quot;movw %%ax,%%gs&amp;quot;&lt;/span&gt; \
        &lt;span class="o"&gt;:::&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;ax&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;0x17&lt;/code&gt; in the code above indicates Privilege 3, LDT and Data Segment.
The &lt;code&gt;0x0f&lt;/code&gt; in the code above indicates Privilege 3, LDT and Code Segment.&lt;/p&gt;
&lt;h4&gt;17. Interrupt and exception are used widely in linux. What is the benefit?&lt;/h4&gt;
&lt;p&gt;Imporve the efficiency of CPU? (In fact, I do no really understand the question.)&lt;/p&gt;
&lt;h4&gt;18. The last five parameters of copy_process are 'long eip, long cs, long eflags, long esp, long ss', which reside in the stack when calling it. But there is no code about pushing the five arguments into the stack. Try to explain it.&lt;/h4&gt;
&lt;p&gt;The five arguments are pushed into stack by hardware when it executes the instruction &lt;code&gt;int 80&lt;/code&gt;.&lt;/p&gt;
&lt;h4&gt;19. Analyse the function 'get_free_page' and give an introduction.&lt;/h4&gt;
&lt;p&gt;The code is as follow:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt; * Get physical address of first (actually last :-) free page, and mark it&lt;/span&gt;
&lt;span class="cm"&gt; * used. If no free pages left, return 0.&lt;/span&gt;
&lt;span class="cm"&gt; */&lt;/span&gt;
&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="nf"&gt;get_free_page&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;register&lt;/span&gt; &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;__res&lt;/span&gt; &lt;span class="n"&gt;asm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;ax&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;__asm__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;std ; repne ; scasb&lt;/span&gt;&lt;span class="se"&gt;\n\t&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;
            &lt;span class="s"&gt;&amp;quot;jne 1f&lt;/span&gt;&lt;span class="se"&gt;\n\t&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;
            &lt;span class="s"&gt;&amp;quot;movb $1,1(%%edi)&lt;/span&gt;&lt;span class="se"&gt;\n\t&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;
            &lt;span class="s"&gt;&amp;quot;sall $12,%%ecx&lt;/span&gt;&lt;span class="se"&gt;\n\t&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;
            &lt;span class="s"&gt;&amp;quot;addl %2,%%ecx&lt;/span&gt;&lt;span class="se"&gt;\n\t&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;
            &lt;span class="s"&gt;&amp;quot;movl %%ecx,%%edx&lt;/span&gt;&lt;span class="se"&gt;\n\t&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;
            &lt;span class="s"&gt;&amp;quot;movl $1024,%%ecx&lt;/span&gt;&lt;span class="se"&gt;\n\t&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;
            &lt;span class="s"&gt;&amp;quot;leal 4092(%%edx),%%edi&lt;/span&gt;&lt;span class="se"&gt;\n\t&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;
            &lt;span class="s"&gt;&amp;quot;rep ; stosl&lt;/span&gt;&lt;span class="se"&gt;\n\t&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;
            &lt;span class="s"&gt;&amp;quot;movl %%edx,%%eax&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;
            &lt;span class="s"&gt;&amp;quot;1:&amp;quot;&lt;/span&gt;
            &lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;=a&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;0&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;i&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LOW_MEM&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;c&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PAGING_PAGES&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="s"&gt;&amp;quot;D&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mem_map&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;PAGING_PAGES&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;di&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;cx&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;dx&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;__res&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;                                                                                                                                         
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In linux 0.11, &lt;code&gt;mem_map&lt;/code&gt; is a table which keeps the usage of physical address.
Firstly, The code above scan &lt;code&gt;mem_map&lt;/code&gt; backward and find the first free page, whoes value in the &lt;code&gt;mem_map&lt;/code&gt; is 0.
Then, mark it used by changing its value to 1 and clear the free page.
Finally, return the address of the free page.
If no free pages left, return 0.&lt;/p&gt;
&lt;h4&gt;20. Analyse the function 'copy_page_tables' and give an introduction.&lt;/h4&gt;
&lt;p&gt;The code is as follow:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;copy_page_tables&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;from_page_table&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;to_page_table&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;this_page&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;from_dir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;to_dir&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;nr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="mh"&gt;0x3fffff&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="mh"&gt;0x3fffff&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;panic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;copy_page_tables called with wrong alignment&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;from_dir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mh"&gt;0xffc&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="cm"&gt;/* _pg_dir = 0 */&lt;/span&gt;
    &lt;span class="n"&gt;to_dir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mh"&gt;0xffc&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mh"&gt;0x3fffff&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;--&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;from_dir&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;to_dir&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;to_dir&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;panic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;copy_page_tables: already exist&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;from_dir&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="k"&gt;continue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;from_page_table&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0xfffff000&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;from_dir&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to_page_table&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;get_free_page&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="cm"&gt;/* Out of memory, see freeing */&lt;/span&gt;
        &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;to_dir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;to_page_table&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;nr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="mh"&gt;0xA0&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;nr&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;from_page_table&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;to_page_table&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;this_page&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;from_page_table&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;this_page&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
                &lt;span class="k"&gt;continue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;this_page&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;=&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;to_page_table&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;this_page&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;this_page&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;LOW_MEM&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;from_page_table&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;this_page&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="n"&gt;this_page&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="n"&gt;LOW_MEM&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="n"&gt;this_page&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="n"&gt;mem_map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;this_page&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;invalidate&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The answer is no very difficult but very complicated. Maybe I will finish it someday.&lt;/p&gt;
&lt;h4&gt;21. When Process 0 creates Process 1, Process allocate a page for Process 1 for task_struct as well as Privilege 0 stack and the first page table respectively. Whose linear address space does the two pages reside, Kernel, Process 0, Process 1 or nothing?&lt;/h4&gt;
&lt;p&gt;The two pages reside in the linear address space of Kernel.&lt;/p&gt;
&lt;p&gt;The code evidence is as follow:&lt;/p&gt;
&lt;p&gt;Setup paging and allocate pages in linear address space of Kernel.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nl"&gt;setup_paging:&lt;/span&gt;
    &lt;span class="nf"&gt;movl&lt;/span&gt; &lt;span class="no"&gt;$1024&lt;/span&gt;&lt;span class="p"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nv"&gt;%ecx&lt;/span&gt;       &lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="p"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="no"&gt;pages&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="no"&gt;pg_dir&lt;/span&gt;&lt;span class="err"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="no"&gt;page&lt;/span&gt; &lt;span class="no"&gt;tables&lt;/span&gt; &lt;span class="p"&gt;*&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;
    &lt;span class="nf"&gt;xorl&lt;/span&gt; &lt;span class="nv"&gt;%eax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nv"&gt;%eax&lt;/span&gt;
    &lt;span class="nf"&gt;xorl&lt;/span&gt; &lt;span class="nv"&gt;%edi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nv"&gt;%edi&lt;/span&gt;          &lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="p"&gt;*&lt;/span&gt; &lt;span class="no"&gt;pg_dir&lt;/span&gt; &lt;span class="no"&gt;is&lt;/span&gt; &lt;span class="no"&gt;at&lt;/span&gt; &lt;span class="mi"&gt;0x000&lt;/span&gt; &lt;span class="p"&gt;*&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;
    &lt;span class="nf"&gt;cld&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;&lt;span class="no"&gt;rep&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;&lt;span class="no"&gt;stosl&lt;/span&gt;
    &lt;span class="nf"&gt;movl&lt;/span&gt; &lt;span class="no"&gt;$pg0&lt;/span&gt;&lt;span class="err"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="no"&gt;_pg_dir&lt;/span&gt;     &lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="p"&gt;*&lt;/span&gt; &lt;span class="no"&gt;set&lt;/span&gt; &lt;span class="no"&gt;present&lt;/span&gt; &lt;span class="no"&gt;bit&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="no"&gt;user&lt;/span&gt; &lt;span class="no"&gt;r&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="no"&gt;w&lt;/span&gt; &lt;span class="p"&gt;*&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;
    &lt;span class="nf"&gt;movl&lt;/span&gt; &lt;span class="no"&gt;$pg1&lt;/span&gt;&lt;span class="err"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="no"&gt;_pg_dir&lt;/span&gt;&lt;span class="err"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;       &lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="p"&gt;*&lt;/span&gt;  &lt;span class="p"&gt;---------&lt;/span&gt; &lt;span class="err"&gt;&amp;quot;&lt;/span&gt; &lt;span class="err"&gt;&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;---------&lt;/span&gt; &lt;span class="p"&gt;*&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;
    &lt;span class="nf"&gt;movl&lt;/span&gt; &lt;span class="no"&gt;$pg2&lt;/span&gt;&lt;span class="err"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="no"&gt;_pg_dir&lt;/span&gt;&lt;span class="err"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;       &lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="p"&gt;*&lt;/span&gt;  &lt;span class="p"&gt;---------&lt;/span&gt; &lt;span class="err"&gt;&amp;quot;&lt;/span&gt; &lt;span class="err"&gt;&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;---------&lt;/span&gt; &lt;span class="p"&gt;*&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;
    &lt;span class="nf"&gt;movl&lt;/span&gt; &lt;span class="no"&gt;$pg3&lt;/span&gt;&lt;span class="err"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="no"&gt;_pg_dir&lt;/span&gt;&lt;span class="err"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;      &lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="p"&gt;*&lt;/span&gt;  &lt;span class="p"&gt;---------&lt;/span&gt; &lt;span class="err"&gt;&amp;quot;&lt;/span&gt; &lt;span class="err"&gt;&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;---------&lt;/span&gt; &lt;span class="p"&gt;*&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;
    &lt;span class="nf"&gt;movl&lt;/span&gt; &lt;span class="no"&gt;$pg3&lt;/span&gt;&lt;span class="err"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;4092&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nv"&gt;%edi&lt;/span&gt;
    &lt;span class="nf"&gt;movl&lt;/span&gt; &lt;span class="no"&gt;$0xfff007&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nv"&gt;%eax&lt;/span&gt;     &lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="p"&gt;*&lt;/span&gt;  &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="no"&gt;Mb&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;4096&lt;/span&gt; &lt;span class="err"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;r&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="no"&gt;w&lt;/span&gt; &lt;span class="no"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="no"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;*&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;
    &lt;span class="nf"&gt;std&lt;/span&gt;
&lt;span class="err"&gt;1:&lt;/span&gt;  &lt;span class="nf"&gt;stosl&lt;/span&gt;           &lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="p"&gt;*&lt;/span&gt; &lt;span class="no"&gt;fill&lt;/span&gt; &lt;span class="no"&gt;pages&lt;/span&gt; &lt;span class="no"&gt;backwards&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="no"&gt;more&lt;/span&gt; &lt;span class="no"&gt;efficient&lt;/span&gt; &lt;span class="p"&gt;:-)&lt;/span&gt; &lt;span class="p"&gt;*&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;
    &lt;span class="nf"&gt;subl&lt;/span&gt; &lt;span class="no"&gt;$0x1000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nv"&gt;%eax&lt;/span&gt;
    &lt;span class="nf"&gt;jge&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="no"&gt;b&lt;/span&gt;
    &lt;span class="nf"&gt;xorl&lt;/span&gt; &lt;span class="nv"&gt;%eax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nv"&gt;%eax&lt;/span&gt;      &lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="p"&gt;*&lt;/span&gt; &lt;span class="no"&gt;pg_dir&lt;/span&gt; &lt;span class="no"&gt;is&lt;/span&gt; &lt;span class="no"&gt;at&lt;/span&gt; &lt;span class="mi"&gt;0x0000&lt;/span&gt; &lt;span class="p"&gt;*&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;
    &lt;span class="nf"&gt;movl&lt;/span&gt; &lt;span class="nv"&gt;%eax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nv"&gt;%cr3&lt;/span&gt;      &lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="p"&gt;*&lt;/span&gt; &lt;span class="no"&gt;cr3&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="no"&gt;page&lt;/span&gt; &lt;span class="no"&gt;directory&lt;/span&gt; &lt;span class="no"&gt;start&lt;/span&gt; &lt;span class="p"&gt;*&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;
    &lt;span class="nf"&gt;movl&lt;/span&gt; &lt;span class="nv"&gt;%cr0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nv"&gt;%eax&lt;/span&gt;
    &lt;span class="nf"&gt;orl&lt;/span&gt; &lt;span class="no"&gt;$0x80000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nv"&gt;%eax&lt;/span&gt;
    &lt;span class="nf"&gt;movl&lt;/span&gt; &lt;span class="nv"&gt;%eax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nv"&gt;%cr0&lt;/span&gt;      &lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="p"&gt;*&lt;/span&gt; &lt;span class="no"&gt;set&lt;/span&gt; &lt;span class="no"&gt;paging&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;PG&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="no"&gt;bit&lt;/span&gt; &lt;span class="p"&gt;*&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;
    &lt;span class="nf"&gt;ret&lt;/span&gt;         &lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="p"&gt;*&lt;/span&gt; &lt;span class="no"&gt;this&lt;/span&gt; &lt;span class="no"&gt;also&lt;/span&gt; &lt;span class="no"&gt;flushes&lt;/span&gt; &lt;span class="no"&gt;prefetch-queue&lt;/span&gt; &lt;span class="p"&gt;*&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Allocate a page for task_struct and Privilege 0 stack&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;copy_process&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;nr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;ebp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;edi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;esi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;gs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;none&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;ebx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;ecx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;edx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;es&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;ds&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
        &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;eip&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;cs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;eflags&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;esp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;ss&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;task_struct&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 

    &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;task_struct&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;get_free_page&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="p"&gt;...&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Allocate pages for page tables&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;copy_page_tables&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;--&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;from_dir&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;to_dir&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="p"&gt;...&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to_page_table&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;get_free_page&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;    

        &lt;span class="p"&gt;...&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="p"&gt;...&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;22. Similar to question 21.&lt;/h4&gt;
&lt;h4&gt;23. Explain the code 'ljmp %0' in the function 'switch_to'.&lt;/h4&gt;
&lt;p&gt;The code is as follow:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#define switch_to(n) {\&lt;/span&gt;
&lt;span class="cp"&gt;    struct {long a,b;} __tmp; \&lt;/span&gt;
&lt;span class="cp"&gt;        __asm__(&amp;quot;cmpl %%ecx,_current\n\t&amp;quot; \&lt;/span&gt;
&lt;span class="cp"&gt;                &amp;quot;je 1f\n\t&amp;quot; \&lt;/span&gt;
&lt;span class="cp"&gt;                &amp;quot;movw %%dx,%1\n\t&amp;quot; \&lt;/span&gt;
&lt;span class="cp"&gt;                &amp;quot;xchgl %%ecx,_current\n\t&amp;quot; \&lt;/span&gt;
&lt;span class="cp"&gt;                &amp;quot;ljmp %0\n\t&amp;quot; \&lt;/span&gt;
&lt;span class="cp"&gt;                &amp;quot;cmpl %%ecx,_last_task_used_math\n\t&amp;quot; \&lt;/span&gt;
&lt;span class="cp"&gt;                &amp;quot;jne 1f\n\t&amp;quot; \&lt;/span&gt;
&lt;span class="cp"&gt;                &amp;quot;clts\n&amp;quot; \&lt;/span&gt;
&lt;span class="cp"&gt;                &amp;quot;1:&amp;quot; \&lt;/span&gt;
&lt;span class="cp"&gt;                ::&amp;quot;m&amp;quot; (*&amp;amp;__tmp.a),&amp;quot;m&amp;quot; (*&amp;amp;__tmp.b), \&lt;/span&gt;
&lt;span class="cp"&gt;                &amp;quot;d&amp;quot; (_TSS(n)),&amp;quot;c&amp;quot; ((long) task[n])); \&lt;/span&gt;
&lt;span class="cp"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The instruction &lt;code&gt;ljmp *mem48&lt;/code&gt; can use the high 2 bytes as CS and the low 4 bytes as EIP pointed by mem48.
Well, &lt;code&gt;__tmp.b&lt;/code&gt; is initialized with &lt;code&gt;_TSS(n)&lt;/code&gt;, which is owned by the Process n.
&lt;code&gt;ljmp to a TSS&lt;/code&gt; means task switching.&lt;/p&gt;
&lt;h4&gt;24. Process 0 creates Process 1 through the function 'fork();', but it is executed twice. Try to explain it.&lt;/h4&gt;
&lt;p&gt;Process 0 creates Process 1 throuth the function &lt;code&gt;fork()&lt;/code&gt;. During the time, Process 0 set the &lt;code&gt;EIP&lt;/code&gt; of Process 1 with the address of the next instruction after &lt;code&gt;int 0x80&lt;/code&gt;.
And the Process 0 and Process 1 share the same code.When transferring program control to the Porcess 1, it just executes the instruction pointed by &lt;code&gt;CS:EIP&lt;/code&gt;.
Therefore, the funtion &lt;code&gt;fork()&lt;/code&gt; seems to be executed twice. In fact, the Process 0 executes the whole of function &lt;code&gt;fork()&lt;/code&gt; while the Process 1 executes the rest of function &lt;code&gt;fork()&lt;/code&gt;, which is the part from &lt;code&gt;int 0x80&lt;/code&gt; to the end.&lt;/p&gt;
&lt;h3&gt;Reference&lt;/h3&gt;
&lt;p&gt;[1] The Art of Linux Kernel Design, Second Edition.&lt;/p&gt;
&lt;p&gt;[2] &lt;a href="http://www.intel.com/content/www/us/en/processors/architectures-software-developer-manuals.html?iid=tech_vt_tech+64-32_manuals"&gt;IA-32 Architectures Software Developer vol-3a-part-1 Manual&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[3] &lt;a href="https://www.wikipedia.org/"&gt;Wikipedia&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[4] &lt;a href="http://docs.oracle.com/cd/E19455-01/806-3773/instructionset-73/index.html"&gt;IA-32 Assembly Language Reference Manual&lt;/a&gt;&lt;/p&gt;</summary><category term="linux"></category><category term="os"></category></entry><entry><title>Trace Linux Kernel With Bochs(5)</title><link href="http://www.gotit.sinaapp.com/trace-linux-kernel-with-bochs5.html" rel="alternate"></link><updated>2014-03-29T00:00:00+08:00</updated><author><name>ictlxb</name></author><id>tag:www.gotit.sinaapp.com,2014-03-29:trace-linux-kernel-with-bochs5.html</id><summary type="html">&lt;div class="highlight"&gt;&lt;pre&gt;当bootsect.s成功执行完成时，它已经将setup.s加载到了内存中(0x90200)的位置上，也将内核代码加载到了内存中(0x10000)。它的生命就随着setup.s的执行走到了尽头，但我们知道它曾来过。
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;下面，我们一边介绍setup.s的功能，一边重写代码。&lt;/p&gt;
&lt;h2&gt;为内核运行准备数据&lt;/h2&gt;
&lt;p&gt;这些数据的获得大多来自由BIOS提供的中断，在关中断之前，我们必须将这些与机器硬件密切相关的数据保存起来，而保存的位置，就是从&lt;code&gt;0x90000&lt;/code&gt;开始的一段内存，如果你看过前面的几篇博文，应该知道这里曾是bootsect.s的位置。&lt;/p&gt;
&lt;h4&gt;获取光标位置&lt;/h4&gt;
&lt;p&gt;我们首先获取光标的位置,将它存储在0x90000开始的２个字节中。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="nf"&gt;movb&lt;/span&gt; &lt;span class="no"&gt;$0x03&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%ah&lt;/span&gt;     &lt;span class="c"&gt;# read cursor pos&lt;/span&gt;
    &lt;span class="nf"&gt;xor&lt;/span&gt; &lt;span class="nv"&gt;%bh&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%bh&lt;/span&gt;
    &lt;span class="nf"&gt;int&lt;/span&gt; &lt;span class="no"&gt;$0x10&lt;/span&gt;           &lt;span class="c"&gt;# save it in known place, con_init fetches&lt;/span&gt;
    &lt;span class="nf"&gt;movw&lt;/span&gt; &lt;span class="nv"&gt;%dx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="c"&gt;# it from 0x90000&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;获取扩展内存的大小&lt;/h4&gt;
&lt;p&gt;扩展内存指的是1M 以上的物理内存大小，单位是kB。存储在0x90002开始的２个字节中。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="nf"&gt;movb&lt;/span&gt; &lt;span class="no"&gt;$0x88&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%ah&lt;/span&gt;
    &lt;span class="nf"&gt;int&lt;/span&gt; &lt;span class="no"&gt;$0x15&lt;/span&gt;
    &lt;span class="nf"&gt;movw&lt;/span&gt; &lt;span class="nv"&gt;%ax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;获取显示的相关信息&lt;/h4&gt;
&lt;p&gt;获取显示相关信息，如当前显示模式，窗口宽度等。存储在0x90004开始的４个字节中。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="nf"&gt;movb&lt;/span&gt; &lt;span class="no"&gt;$0x0f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%ah&lt;/span&gt;
    &lt;span class="nf"&gt;int&lt;/span&gt; &lt;span class="no"&gt;$0x10&lt;/span&gt;
    &lt;span class="nf"&gt;movw&lt;/span&gt; &lt;span class="nv"&gt;%bx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;     &lt;span class="c"&gt;# BH = display page&lt;/span&gt;
    &lt;span class="nf"&gt;movw&lt;/span&gt; &lt;span class="nv"&gt;%ax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;     &lt;span class="c"&gt;# AL = video mode, AH = window width&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;获取EGA/VGA相关信息&lt;/h4&gt;
&lt;p&gt;存储在0x90008开始的６个字节中。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="nf"&gt;movb&lt;/span&gt; &lt;span class="no"&gt;$0x12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%ah&lt;/span&gt;
    &lt;span class="nf"&gt;movb&lt;/span&gt; &lt;span class="no"&gt;$0x10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%bl&lt;/span&gt;
    &lt;span class="nf"&gt;int&lt;/span&gt; &lt;span class="no"&gt;$0x10&lt;/span&gt;
    &lt;span class="nf"&gt;movw&lt;/span&gt; &lt;span class="nv"&gt;%ax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;
    &lt;span class="nf"&gt;movw&lt;/span&gt; &lt;span class="nv"&gt;%bx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
    &lt;span class="nf"&gt;movw&lt;/span&gt; &lt;span class="nv"&gt;%cx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;获取第一个硬盘的信息&lt;/h4&gt;
&lt;p&gt;存储在0x90080开始的16个字节中。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="nf"&gt;xor&lt;/span&gt; &lt;span class="nv"&gt;%ax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%ax&lt;/span&gt;
    &lt;span class="nf"&gt;movw&lt;/span&gt; &lt;span class="nv"&gt;%ax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%ds&lt;/span&gt;
    &lt;span class="nf"&gt;lds&lt;/span&gt; &lt;span class="mi"&gt;0x41&lt;/span&gt;&lt;span class="p"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%si&lt;/span&gt; 
    &lt;span class="no"&gt;movw&lt;/span&gt; &lt;span class="no"&gt;$INITSEG&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%ax&lt;/span&gt;
    &lt;span class="nf"&gt;movw&lt;/span&gt; &lt;span class="nv"&gt;%ax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%es&lt;/span&gt;
    &lt;span class="nf"&gt;movw&lt;/span&gt; &lt;span class="no"&gt;$0x0080&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%di&lt;/span&gt;
    &lt;span class="nf"&gt;movw&lt;/span&gt; &lt;span class="no"&gt;$0x10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%cx&lt;/span&gt;
    &lt;span class="na"&gt;rep&lt;/span&gt;
    &lt;span class="nf"&gt;movsb&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;获取第二个硬盘的信息&lt;/h4&gt;
&lt;p&gt;存储在0x90090开始的16个字节中。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="nf"&gt;xor&lt;/span&gt; &lt;span class="nv"&gt;%ax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%ax&lt;/span&gt;
    &lt;span class="nf"&gt;movw&lt;/span&gt; &lt;span class="nv"&gt;%ax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%ds&lt;/span&gt;
    &lt;span class="nf"&gt;lds&lt;/span&gt; &lt;span class="mi"&gt;0x46&lt;/span&gt;&lt;span class="p"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%si&lt;/span&gt; &lt;span class="c"&gt;# what is this? why is the address?&lt;/span&gt;
    &lt;span class="nf"&gt;movw&lt;/span&gt; &lt;span class="no"&gt;$INITSEG&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%ax&lt;/span&gt;
    &lt;span class="nf"&gt;movw&lt;/span&gt; &lt;span class="nv"&gt;%ax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%es&lt;/span&gt;
    &lt;span class="nf"&gt;movw&lt;/span&gt; &lt;span class="no"&gt;$0x0090&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%di&lt;/span&gt;
    &lt;span class="nf"&gt;movw&lt;/span&gt; &lt;span class="no"&gt;$0x10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%cx&lt;/span&gt;
    &lt;span class="na"&gt;rep&lt;/span&gt;
    &lt;span class="nf"&gt;movsb&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;检测是否存在第二个硬盘&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="nf"&gt;movw&lt;/span&gt; &lt;span class="no"&gt;$0x1500&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%ax&lt;/span&gt;
    &lt;span class="nf"&gt;movb&lt;/span&gt; &lt;span class="no"&gt;$0x81&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%dl&lt;/span&gt;
    &lt;span class="nf"&gt;int&lt;/span&gt; &lt;span class="no"&gt;$0x13&lt;/span&gt;
    &lt;span class="nf"&gt;jc&lt;/span&gt; &lt;span class="no"&gt;no_disk1&lt;/span&gt;
    &lt;span class="nf"&gt;cmp&lt;/span&gt; &lt;span class="no"&gt;$3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%ah&lt;/span&gt;
    &lt;span class="nf"&gt;je&lt;/span&gt; &lt;span class="no"&gt;is_disk1&lt;/span&gt;
&lt;span class="nl"&gt;no_disk1:&lt;/span&gt;
    &lt;span class="nf"&gt;movw&lt;/span&gt; &lt;span class="no"&gt;$INITSEG&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%ax&lt;/span&gt;
    &lt;span class="nf"&gt;movw&lt;/span&gt; &lt;span class="nv"&gt;%ax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%es&lt;/span&gt;
    &lt;span class="nf"&gt;movw&lt;/span&gt; &lt;span class="no"&gt;$0x0090&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%di&lt;/span&gt;
    &lt;span class="nf"&gt;movw&lt;/span&gt; &lt;span class="no"&gt;$0x10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%cx&lt;/span&gt;
    &lt;span class="nf"&gt;xor&lt;/span&gt; &lt;span class="nv"&gt;%ax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%ax&lt;/span&gt;
    &lt;span class="na"&gt;rep&lt;/span&gt;
    &lt;span class="nf"&gt;stosb&lt;/span&gt;
&lt;span class="nl"&gt;is_disk1:&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;｀在前面无聊的取数存数后，我们将进行一项意义深远的举动，我们将不再依赖BIOS提供的中断，我们将开始为内核启动做最后的准备，时间貌似不多了，Let us roll`&lt;/p&gt;
&lt;h2&gt;关中断&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;cli&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;搬内核&lt;/h2&gt;
&lt;p&gt;我们将系统代码从0x10000的位置，搬到0x00000开始的位置，在这个过程中，我们废弃了BIOS在内存低1k位置准备的中断向量表，当然也废弃了BIOS准备的中断服务程序。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="nf"&gt;xor&lt;/span&gt; &lt;span class="nv"&gt;%ax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%ax&lt;/span&gt;
    &lt;span class="nf"&gt;cld&lt;/span&gt;     &lt;span class="c"&gt;# &amp;#39;direction&amp;#39; = 0, &amp;#39;movs&amp;#39; moves forward&lt;/span&gt;

&lt;span class="nl"&gt;do_move:&lt;/span&gt;
    &lt;span class="nf"&gt;movw&lt;/span&gt; &lt;span class="nv"&gt;%ax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%es&lt;/span&gt;       &lt;span class="c"&gt;# destination segment&lt;/span&gt;
    &lt;span class="nf"&gt;add&lt;/span&gt; &lt;span class="no"&gt;$0x1000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%ax&lt;/span&gt;
    &lt;span class="nf"&gt;cmp&lt;/span&gt; &lt;span class="no"&gt;$0x9000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%ax&lt;/span&gt;
    &lt;span class="nf"&gt;jz&lt;/span&gt; &lt;span class="no"&gt;end_move&lt;/span&gt;
    &lt;span class="nf"&gt;movw&lt;/span&gt; &lt;span class="nv"&gt;%ax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%ds&lt;/span&gt;       &lt;span class="c"&gt;# source segment&lt;/span&gt;
    &lt;span class="nf"&gt;xor&lt;/span&gt; &lt;span class="nv"&gt;%di&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%di&lt;/span&gt;
    &lt;span class="nf"&gt;xor&lt;/span&gt; &lt;span class="nv"&gt;%si&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%si&lt;/span&gt;
    &lt;span class="nf"&gt;movw&lt;/span&gt; &lt;span class="no"&gt;$0x8000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%cx&lt;/span&gt;
    &lt;span class="na"&gt;rep&lt;/span&gt;
    &lt;span class="nf"&gt;movsw&lt;/span&gt;
    &lt;span class="nf"&gt;jmp&lt;/span&gt; &lt;span class="no"&gt;do_move&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;启用新的中断描述符表&lt;/h2&gt;
&lt;p&gt;设置中断描述符表和全局描述符表。在x86体系结构中，开启保护模式后，中断向量表将不再必须放在内存低１k的位置，而是采用了寄存器&lt;code&gt;idtr&lt;/code&gt;来指向中断描述符表在内存中的位置。同时我们也设置了&lt;code&gt;gdtr&lt;/code&gt;，稍后我们会解释它的作用。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nl"&gt;end_move:&lt;/span&gt;
    &lt;span class="nf"&gt;movw&lt;/span&gt; &lt;span class="no"&gt;$SETUPSEG&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%ax&lt;/span&gt; 
    &lt;span class="no"&gt;movw&lt;/span&gt; &lt;span class="nv"&gt;%ax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%ds&lt;/span&gt;
    &lt;span class="nf"&gt;lidt&lt;/span&gt; &lt;span class="no"&gt;idt_48&lt;/span&gt;     &lt;span class="c"&gt;# load idt with 0,0&lt;/span&gt;
    &lt;span class="nf"&gt;lgdt&lt;/span&gt; &lt;span class="no"&gt;gdt_48&lt;/span&gt;     &lt;span class="c"&gt;# load gdt with whatever appropriate&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;进入32位的世界&lt;/h2&gt;
&lt;p&gt;从这开始，我们打开A20,使用32位地址总线，进入32位的世界。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="nf"&gt;call&lt;/span&gt; &lt;span class="no"&gt;empty_8042&lt;/span&gt;
    &lt;span class="nf"&gt;movb&lt;/span&gt; &lt;span class="no"&gt;$0xD1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%al&lt;/span&gt;     &lt;span class="c"&gt;# command write&lt;/span&gt;
    &lt;span class="nf"&gt;outb&lt;/span&gt; &lt;span class="nv"&gt;%al&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;$0x64&lt;/span&gt;
    &lt;span class="nf"&gt;call&lt;/span&gt; &lt;span class="no"&gt;empty_8042&lt;/span&gt;
    &lt;span class="nf"&gt;movb&lt;/span&gt; &lt;span class="no"&gt;$0xDF&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%al&lt;/span&gt;     &lt;span class="c"&gt;# A20 on&lt;/span&gt;
    &lt;span class="nf"&gt;outb&lt;/span&gt; &lt;span class="nv"&gt;%al&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;$0x60&lt;/span&gt;
    &lt;span class="nf"&gt;call&lt;/span&gt; &lt;span class="no"&gt;empty_8042&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;重新设置8259A&lt;/h2&gt;
&lt;p&gt;8259A芯片是中断控制器，之所以说是重新设置，是因为在此之前，它已经被BIOS设置过一次，为了使用BIOS的中断。而现在，重新设置只是因为要符合Intel的要求。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="nf"&gt;movb&lt;/span&gt; &lt;span class="no"&gt;$0x11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%al&lt;/span&gt;     &lt;span class="c"&gt;# initialization sequence&lt;/span&gt;
    &lt;span class="nf"&gt;out&lt;/span&gt; &lt;span class="nv"&gt;%al&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;$0x20&lt;/span&gt;      &lt;span class="c"&gt;# send it to 8259A-1&lt;/span&gt;
    &lt;span class="na"&gt;.word&lt;/span&gt;   &lt;span class="mi"&gt;0x00eb&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0x00eb&lt;/span&gt;       &lt;span class="c"&gt;# jmp $+2, jmp $+2&lt;/span&gt;
    &lt;span class="nf"&gt;out&lt;/span&gt; &lt;span class="nv"&gt;%al&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;$0xA0&lt;/span&gt;      &lt;span class="c"&gt;# and to 8259A-2&lt;/span&gt;
    &lt;span class="na"&gt;.word&lt;/span&gt;   &lt;span class="mi"&gt;0x00eb&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0x00eb&lt;/span&gt;
    &lt;span class="nf"&gt;mov&lt;/span&gt; &lt;span class="no"&gt;$0x20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%al&lt;/span&gt;      &lt;span class="c"&gt;# start of hardware int&amp;#39;s (0x20)&lt;/span&gt;
    &lt;span class="nf"&gt;out&lt;/span&gt; &lt;span class="nv"&gt;%al&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;$0x21&lt;/span&gt;
    &lt;span class="na"&gt;.word&lt;/span&gt;   &lt;span class="mi"&gt;0x00eb&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0x00eb&lt;/span&gt;
    &lt;span class="nf"&gt;mov&lt;/span&gt; &lt;span class="no"&gt;$0x28&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%al&lt;/span&gt;      &lt;span class="c"&gt;# start of hardware int&amp;#39;s 2 (0x28)&lt;/span&gt;
    &lt;span class="nf"&gt;out&lt;/span&gt; &lt;span class="nv"&gt;%al&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;$0xA1&lt;/span&gt;
    &lt;span class="na"&gt;.word&lt;/span&gt;   &lt;span class="mi"&gt;0x00eb&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0x00eb&lt;/span&gt;
    &lt;span class="nf"&gt;mov&lt;/span&gt; &lt;span class="no"&gt;$0x04&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%al&lt;/span&gt;      &lt;span class="c"&gt;# 8259-1 is master&lt;/span&gt;
    &lt;span class="nf"&gt;out&lt;/span&gt; &lt;span class="nv"&gt;%al&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;$0x21&lt;/span&gt;
    &lt;span class="na"&gt;.word&lt;/span&gt;   &lt;span class="mi"&gt;0x00eb&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0x00eb&lt;/span&gt;
    &lt;span class="nf"&gt;mov&lt;/span&gt; &lt;span class="no"&gt;$0x02&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%al&lt;/span&gt;      &lt;span class="c"&gt;# 8259-2 is slave&lt;/span&gt;
    &lt;span class="nf"&gt;out&lt;/span&gt; &lt;span class="nv"&gt;%al&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;$0xA1&lt;/span&gt;
    &lt;span class="na"&gt;.word&lt;/span&gt;   &lt;span class="mi"&gt;0x00eb&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0x00eb&lt;/span&gt;
    &lt;span class="nf"&gt;mov&lt;/span&gt; &lt;span class="no"&gt;$0x01&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%al&lt;/span&gt;      &lt;span class="c"&gt;# 8086 mode for both&lt;/span&gt;
    &lt;span class="nf"&gt;out&lt;/span&gt; &lt;span class="nv"&gt;%al&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;$0x21&lt;/span&gt;
    &lt;span class="na"&gt;.word&lt;/span&gt;   &lt;span class="mi"&gt;0x00eb&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0x00eb&lt;/span&gt;
    &lt;span class="nf"&gt;out&lt;/span&gt; &lt;span class="nv"&gt;%al&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;$0xA1&lt;/span&gt;
    &lt;span class="na"&gt;.word&lt;/span&gt;   &lt;span class="mi"&gt;0x00eb&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0x00eb&lt;/span&gt;
    &lt;span class="nf"&gt;mov&lt;/span&gt; &lt;span class="no"&gt;$0xFF&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%al&lt;/span&gt;      &lt;span class="c"&gt;# mask off all interrupts for now&lt;/span&gt;
    &lt;span class="nf"&gt;out&lt;/span&gt; &lt;span class="nv"&gt;%al&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;$0x21&lt;/span&gt;
    &lt;span class="na"&gt;.word&lt;/span&gt;   &lt;span class="mi"&gt;0x00eb&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0x00eb&lt;/span&gt;
    &lt;span class="nf"&gt;out&lt;/span&gt; &lt;span class="nv"&gt;%al&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;$0xA1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;开启保护模式&lt;/h2&gt;
&lt;p&gt;经过一系列的准备工作之后，我们打开保护模式，这是一个与实模式相对的概念。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="nf"&gt;mov&lt;/span&gt; &lt;span class="no"&gt;$0x0001&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%ax&lt;/span&gt;    &lt;span class="c"&gt;# protected mode (PE) bit&lt;/span&gt;
    &lt;span class="nf"&gt;lmsw&lt;/span&gt;    &lt;span class="nv"&gt;%ax&lt;/span&gt;         &lt;span class="c"&gt;# This is it!&lt;/span&gt;
    &lt;span class="nf"&gt;ljmp&lt;/span&gt;    &lt;span class="no"&gt;$8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;$0&lt;/span&gt;          &lt;span class="c"&gt;# jmp offset 0 of segment 8 (cs)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在我们ljmp之前，有些事情要说清楚：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;gdtr 和 gdt&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;gdtr是一个48位置的系统地址寄存器，保存了全局描述符表(gdt)的基址(32位)和限长(16位)&lt;/p&gt;
&lt;p&gt;gdt则是一个保存了段相关信息的数组，每个元素的大小为64 bit。&lt;/p&gt;
&lt;p&gt;关于段机制的详细内容可以参看&lt;a href="http://oss.org.cn/kernel-book/ch02/2.3.1.htm"&gt;资料&lt;/a&gt;
关于lgdt和lidt命令的详细内容可以参看&lt;a href="http://pdos.csail.mit.edu/6.828/2008/readings/i386/LGDT.htm"&gt;资料&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ljmp $8, $0&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在打开A20和开启保护模式后,段寄存器的用法发生了改变:&lt;/p&gt;
&lt;p&gt;在16位模式时，段寄存器保存的是段基址。&lt;/p&gt;
&lt;p&gt;而在32位保护模式时，显然无法将32位的地址保存在16位的寄存器中，又由于要保持良好的兼容性，段寄存器中改为保存16位的段选择子，用来选取gdt或ldt中的某一个段描述符。&lt;/p&gt;
&lt;p&gt;这里$8的低２位是RPL(Request Privilege Level)，第三位是使用gdt还是ldt，高13位是gdt或ldt数组的index。&lt;/p&gt;
&lt;h2&gt;数据和辅助函数&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;INITSEG&lt;/span&gt;  &lt;span class="err"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0x9000&lt;/span&gt;   &lt;span class="c"&gt;# we move boot here - out of the way&lt;/span&gt;
&lt;span class="nf"&gt;SYSSEG&lt;/span&gt;   &lt;span class="err"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0x1000&lt;/span&gt;   &lt;span class="c"&gt;# system loaded at 0x10000 (65536).&lt;/span&gt;
&lt;span class="nf"&gt;SETUPSEG&lt;/span&gt; &lt;span class="err"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0x9020&lt;/span&gt;   &lt;span class="c"&gt;# this is the current segment&lt;/span&gt;

&lt;span class="nl"&gt;empty_8042:&lt;/span&gt;
    &lt;span class="na"&gt;.word&lt;/span&gt;   &lt;span class="mi"&gt;0x00eb&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0x00eb&lt;/span&gt;
    &lt;span class="nf"&gt;in&lt;/span&gt;  &lt;span class="no"&gt;$0x64&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%al&lt;/span&gt;  &lt;span class="c"&gt;# 8042 status port&lt;/span&gt;
    &lt;span class="nf"&gt;test&lt;/span&gt; &lt;span class="no"&gt;$2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%al&lt;/span&gt;    &lt;span class="c"&gt;# is input buffer full?&lt;/span&gt;
    &lt;span class="nf"&gt;jnz&lt;/span&gt; &lt;span class="no"&gt;empty_8042&lt;/span&gt;  &lt;span class="c"&gt;# yes - loop&lt;/span&gt;
    &lt;span class="nf"&gt;ret&lt;/span&gt;

&lt;span class="nl"&gt;gdt:&lt;/span&gt;
    &lt;span class="na"&gt;.word&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="c"&gt;# dummy&lt;/span&gt;

    &lt;span class="na"&gt;.word&lt;/span&gt;   &lt;span class="mi"&gt;0x07FF&lt;/span&gt;      &lt;span class="c"&gt;# 8Mb - limit=2047 (2048*4096=8Mb)&lt;/span&gt;
    &lt;span class="na"&gt;.word&lt;/span&gt;   &lt;span class="mi"&gt;0x0000&lt;/span&gt;      &lt;span class="c"&gt;# base address=0&lt;/span&gt;
    &lt;span class="na"&gt;.word&lt;/span&gt;   &lt;span class="mi"&gt;0x9A00&lt;/span&gt;      &lt;span class="c"&gt;# code read/exec&lt;/span&gt;
    &lt;span class="na"&gt;.word&lt;/span&gt;   &lt;span class="mi"&gt;0x00C0&lt;/span&gt;      &lt;span class="c"&gt;# granularity=4096, 386&lt;/span&gt;

    &lt;span class="na"&gt;.word&lt;/span&gt;   &lt;span class="mi"&gt;0x07FF&lt;/span&gt;      &lt;span class="c"&gt;# 8Mb - limit=2047 (2048*4096=8Mb)&lt;/span&gt;
    &lt;span class="na"&gt;.word&lt;/span&gt;   &lt;span class="mi"&gt;0x0000&lt;/span&gt;      &lt;span class="c"&gt;# base address=0&lt;/span&gt;
    &lt;span class="na"&gt;.word&lt;/span&gt;   &lt;span class="mi"&gt;0x9200&lt;/span&gt;      &lt;span class="c"&gt;# data read/write&lt;/span&gt;
    &lt;span class="na"&gt;.word&lt;/span&gt;   &lt;span class="mi"&gt;0x00C0&lt;/span&gt;      &lt;span class="c"&gt;# granularity=4096, 386&lt;/span&gt;

&lt;span class="nl"&gt;idt_48:&lt;/span&gt;
    &lt;span class="na"&gt;.word&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;           &lt;span class="c"&gt;# idt limit=0&lt;/span&gt;
    &lt;span class="na"&gt;.word&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;         &lt;span class="c"&gt;# idt base=0L&lt;/span&gt;

&lt;span class="nl"&gt;gdt_48:&lt;/span&gt;
    &lt;span class="na"&gt;.word&lt;/span&gt;   &lt;span class="mi"&gt;0x800&lt;/span&gt;       &lt;span class="c"&gt;# gdt limit=2048, 256 GDT entries&lt;/span&gt;
    &lt;span class="na"&gt;.word&lt;/span&gt;   &lt;span class="mi"&gt;512&lt;/span&gt;&lt;span class="err"&gt;+&lt;/span&gt;&lt;span class="no"&gt;gdt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0x9&lt;/span&gt; &lt;span class="c"&gt;# gdt base = 0X9xxxx&lt;/span&gt;

&lt;span class="na"&gt;.org&lt;/span&gt; &lt;span class="mi"&gt;2048&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="linux"></category><category term="bochs"></category><category term="os"></category></entry><entry><title>Trace Linux Kernel With Bochs(4)</title><link href="http://www.gotit.sinaapp.com/trace-linux-kernel-with-bochs4.html" rel="alternate"></link><updated>2014-03-12T00:00:00+08:00</updated><author><name>ictlxb</name></author><id>tag:www.gotit.sinaapp.com,2014-03-12:trace-linux-kernel-with-bochs4.html</id><summary type="html">&lt;p&gt;&lt;a href="/linux/2014/03/10/trace-linux-kernel-with-bochs3/"&gt;上一节&lt;/a&gt;中我们使用AT&amp;amp;T汇编重写了bootsect.s，这里我们利用bochs来跟踪我们的程序，加深对一些关键操作的认识和理解。&lt;/p&gt;
&lt;h2&gt;修改Makefile&lt;/h2&gt;
&lt;p&gt;在原来Makefile的基础上，我们简单地修改一下，将我们重写的bootsect.s放在软盘的第一个扇区，然后将之前打印Hello OS World!的程序(称之为hellosect.s)放在第二个扇区，这样当我们执行完bootsect的代码，跳转到setup section时，就会跳转到hellosect，在屏幕上打印出&lt;code&gt;Hello OS World!&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;代码如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;CC&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; gcc
&lt;span class="nv"&gt;LD&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; ld
&lt;span class="nv"&gt;LDFILE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; ld_script.ld
&lt;span class="nv"&gt;OBJCOPY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; objcopy
&lt;span class="nv"&gt;DUMP&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; objdump
&lt;span class="nv"&gt;DUMP_FLAGS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; -D -b binary -mi386 -M addr16 -M data16

&lt;span class="nv"&gt;ASM_SRC&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;wildcard *.s&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;ASM_OBJ&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;patsubst %.s, %.o, &lt;span class="k"&gt;$(&lt;/span&gt;ASM_SRC&lt;span class="k"&gt;))&lt;/span&gt;
&lt;span class="nv"&gt;ASM_ELF&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;patsubst %.s, %.elf, &lt;span class="k"&gt;$(&lt;/span&gt;ASM_SRC&lt;span class="k"&gt;))&lt;/span&gt;
&lt;span class="nv"&gt;ASM_BIN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;patsubst %.s, %.bin, &lt;span class="k"&gt;$(&lt;/span&gt;ASM_SRC&lt;span class="k"&gt;))&lt;/span&gt;
&lt;span class="nv"&gt;ASM_DMP&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;patsubst %.s, %.dmp, &lt;span class="k"&gt;$(&lt;/span&gt;ASM_SRC&lt;span class="k"&gt;))&lt;/span&gt;


&lt;span class="nf"&gt;.PHONY&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="n"&gt;clean&lt;/span&gt; &lt;span class="n"&gt;dump&lt;/span&gt;

&lt;span class="nf"&gt;all&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;linux&lt;/span&gt;.&lt;span class="n"&gt;img&lt;/span&gt;

&lt;span class="nf"&gt;dump&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nv"&gt;ASM_DMP&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;

&lt;span class="nf"&gt;linux.img&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nv"&gt;ASM_BIN&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
    @dd &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;bootsect.bin &lt;span class="nv"&gt;of&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$@&lt;/span&gt; &lt;span class="nv"&gt;bs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;512&lt;/span&gt; &lt;span class="nv"&gt;count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1
    @dd &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;hellosect.bin &lt;span class="nv"&gt;of&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$@&lt;/span&gt; &lt;span class="nv"&gt;seek&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="nv"&gt;bs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;512&lt;/span&gt; &lt;span class="nv"&gt;count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1
    @dd &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/dev/zero &lt;span class="nv"&gt;of&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$@&lt;/span&gt; &lt;span class="nv"&gt;seek&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="nv"&gt;bs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;512&lt;/span&gt; &lt;span class="nv"&gt;count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;2878

&lt;span class="nf"&gt;$(ASM_BIN)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; %.&lt;span class="n"&gt;bin&lt;/span&gt;: %.&lt;span class="n"&gt;elf&lt;/span&gt;
    @&lt;span class="k"&gt;$(&lt;/span&gt;OBJCOPY&lt;span class="k"&gt;)&lt;/span&gt; -R .pdr -R .comment -R .note -S -O binary &lt;span class="nv"&gt;$&amp;lt;&lt;/span&gt; &lt;span class="nv"&gt;$@&lt;/span&gt;

&lt;span class="nf"&gt;$(ASM_ELF)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; %.&lt;span class="n"&gt;elf&lt;/span&gt;: %.&lt;span class="n"&gt;o&lt;/span&gt;
    &lt;span class="k"&gt;$(&lt;/span&gt;LD&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;$&amp;lt;&lt;/span&gt; -o &lt;span class="nv"&gt;$@&lt;/span&gt; -e c -T&lt;span class="k"&gt;$(&lt;/span&gt;LDFILE&lt;span class="k"&gt;)&lt;/span&gt;

&lt;span class="nf"&gt;$(ASM_OBJ)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; %.&lt;span class="n"&gt;o&lt;/span&gt;: %.&lt;span class="n"&gt;s&lt;/span&gt;
    &lt;span class="k"&gt;$(&lt;/span&gt;CC&lt;span class="k"&gt;)&lt;/span&gt; -c &lt;span class="nv"&gt;$&amp;lt;&lt;/span&gt; -o &lt;span class="nv"&gt;$@&lt;/span&gt;


&lt;span class="nf"&gt;$(ASM_DMP)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; %.&lt;span class="n"&gt;dmp&lt;/span&gt;: %.&lt;span class="n"&gt;bin&lt;/span&gt;
    &lt;span class="k"&gt;$(&lt;/span&gt;DUMP&lt;span class="k"&gt;)&lt;/span&gt;  &lt;span class="k"&gt;$(&lt;/span&gt;DUMP_FLAGS&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;$&amp;lt;&lt;/span&gt; &amp;gt; &lt;span class="nv"&gt;$@&lt;/span&gt;

&lt;span class="nf"&gt;clean&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    @rm -rf &lt;span class="k"&gt;$(&lt;/span&gt;ASM_OBJ&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;ASM_ELF&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;ASM_BIN&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;ASM_DMP&lt;span class="k"&gt;)&lt;/span&gt; linux.img
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;其他文件可以到&lt;a href="https://github.com/buptlxb/kernel-test"&gt;这里&lt;/a&gt;下载&lt;/p&gt;
&lt;h2&gt;Just Trace It!&lt;/h2&gt;
&lt;h4&gt;1.输入命令开始跟踪之旅 -- &lt;code&gt;bochs -q -f bochsrc&lt;/code&gt;。&lt;/h4&gt;
&lt;p&gt;&lt;img alt="bochs-start" src="/assets/images/bochs-start.png" /&gt;&lt;/p&gt;
&lt;h4&gt;2.在BIOS约定的入口处打断点 -- &lt;code&gt;vb 0x0:0x7c00&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;&lt;img alt="bochs-entry-break" src="/assets/images/bochs-entry-break.png" /&gt;&lt;/p&gt;
&lt;h4&gt;3.执行到下一下断点处 -- &lt;code&gt;c&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;&lt;img alt="bochs-bios-print" src="/assets/images/bochs-bios-print.png" /&gt;&lt;/p&gt;
&lt;h4&gt;4.查看当前位置后的10条指令 -- &lt;code&gt;u/10&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;&lt;img alt="bochs-10-inst" src="/assets/images/bochs-10-inst.png" /&gt;&lt;/p&gt;
&lt;h4&gt;5.查看setup section(此处为hellosect)入口处的10条指令 -- &lt;code&gt;u/10 0x9020:0x0&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;&lt;img alt="bochs-9020-inst" src="/assets/images/bochs-9020-inst.png" /&gt;&lt;/p&gt;
&lt;h4&gt;6.观察bootsect的自我复制移动&lt;/h4&gt;
&lt;h5&gt;6.1.利用dump文件可知指令&lt;code&gt;rep movsw %ds:(%si), %es:(%di)&lt;/code&gt;的地址，在此处打断点 -- &lt;code&gt;vb cs:0x7c17&lt;/code&gt;&lt;/h5&gt;
&lt;p&gt;&lt;img alt="bochs-7c17-break" src="/assets/images/bochs-7c17-break.png" /&gt;&lt;/p&gt;
&lt;h5&gt;6.2.运行到此断点，查看内存0x9000:0x0处的内容 -- &lt;code&gt;u/10 0x9000:0x0&lt;/code&gt;&lt;/h5&gt;
&lt;p&gt;&lt;img alt="bochs-9000-before" src="/assets/images/bochs-9000-before.png" /&gt;&lt;/p&gt;
&lt;h5&gt;6.3再执行一条指令（复制一条指令），现查看内存0x9000:0x0处的内容 -- &lt;code&gt;u/10 0x9000:0x0&lt;/code&gt;&lt;/h5&gt;
&lt;p&gt;&lt;img alt="bochs-9000-after" src="/assets/images/bochs-9000-after.png" /&gt;&lt;/p&gt;
&lt;h4&gt;7.利用同样的方式可以观察bootsect加载hellosect的过程&lt;/h4&gt;
&lt;p&gt;&lt;img alt="bochs-hello-load" src="/assets/images/bochs-hello-load.png" /&gt;&lt;/p&gt;
&lt;h4&gt;8.获取每磁道扇区数&lt;/h4&gt;
&lt;p&gt;&lt;img alt="bochs-disk-param" src="/assets/images/bochs-disk-param.png" /&gt;&lt;/p&gt;
&lt;h4&gt;9.打印"Loading system..."提示信息&lt;/h4&gt;
&lt;p&gt;&lt;img alt="bochs-load-system" src="/assets/images/bochs-load-system.png" /&gt;&lt;/p&gt;
&lt;h4&gt;10.检查根设备&lt;/h4&gt;
&lt;p&gt;&lt;img alt="bochs-root-dev" src="/assets/images/bochs-root-dev.png" /&gt;&lt;/p&gt;
&lt;h4&gt;11.执行hellosect&lt;/h4&gt;
&lt;p&gt;&lt;img alt="bochs-hello-world" src="/assets/images/bochs-hello-world.png" /&gt;&lt;/p&gt;
&lt;h4&gt;&lt;/h4&gt;</summary><category term="linux"></category><category term="bochs"></category><category term="os"></category></entry><entry><title>Trace Linux Kernel With Bochs(3)</title><link href="http://www.gotit.sinaapp.com/trace-linux-kernel-with-bochs3.html" rel="alternate"></link><updated>2014-03-10T00:00:00+08:00</updated><author><name>ictlxb</name></author><id>tag:www.gotit.sinaapp.com,2014-03-10:trace-linux-kernel-with-bochs3.html</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;这里我们将重写bootsect.s完成其真正的功能，重写使用AT&amp;amp;T汇编。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;bootsect.s&lt;/h2&gt;
&lt;h4&gt;内存规划&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="na"&gt;.code16&lt;/span&gt; &lt;span class="c"&gt;#use 16bit&lt;/span&gt;
&lt;span class="na"&gt;.text&lt;/span&gt; &lt;span class="c"&gt;#code segment start&lt;/span&gt;

&lt;span class="nf"&gt;SYSSIZE&lt;/span&gt; &lt;span class="err"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0x3000&lt;/span&gt;
&lt;span class="nf"&gt;SETUPLEN&lt;/span&gt; &lt;span class="err"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;                &lt;span class="c"&gt;# nr of setup-sectors&lt;/span&gt;
&lt;span class="nf"&gt;BOOTSEG&lt;/span&gt;  &lt;span class="err"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0x07c0&lt;/span&gt;           &lt;span class="c"&gt;# original address of boot-sector&lt;/span&gt;
&lt;span class="nf"&gt;INITSEG&lt;/span&gt;  &lt;span class="err"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0x9000&lt;/span&gt;           &lt;span class="c"&gt;# we move boot here - out of the way&lt;/span&gt;
&lt;span class="nf"&gt;SETUPSEG&lt;/span&gt; &lt;span class="err"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0x9020&lt;/span&gt;           &lt;span class="c"&gt;# setup starts here&lt;/span&gt;
&lt;span class="nf"&gt;SYSSEG&lt;/span&gt;   &lt;span class="err"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0x1000&lt;/span&gt;           &lt;span class="c"&gt;# system loaded at 0x10000 (65536).&lt;/span&gt;
&lt;span class="nf"&gt;ENDSEG&lt;/span&gt;   &lt;span class="err"&gt;=&lt;/span&gt; &lt;span class="no"&gt;SYSSEG&lt;/span&gt; &lt;span class="err"&gt;+&lt;/span&gt; &lt;span class="no"&gt;SYSSIZE&lt;/span&gt;     &lt;span class="c"&gt;# where to stop loading&lt;/span&gt;

&lt;span class="c"&gt;# ROOT_DEV: 0x000 - same type of floppy as boot.&lt;/span&gt;
&lt;span class="c"&gt;#           0x301 - first partition on first drive etc&lt;/span&gt;
&lt;span class="nf"&gt;ROOT_DEV&lt;/span&gt; &lt;span class="err"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0x306&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;bootsect将自己复制到0x90000处&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="nf"&gt;movw&lt;/span&gt; &lt;span class="nv"&gt;%cs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%ax&lt;/span&gt; &lt;span class="c"&gt;#cs:ip was initialized by BOIS instruction &amp;#39;jmpi 0, 0x07c0&amp;#39;&lt;/span&gt;
    &lt;span class="nf"&gt;movw&lt;/span&gt; &lt;span class="nv"&gt;%ax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%ds&lt;/span&gt; &lt;span class="c"&gt;#initialize ds, es and ss with cs&lt;/span&gt;
    &lt;span class="nf"&gt;movw&lt;/span&gt; &lt;span class="nv"&gt;%ax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%es&lt;/span&gt;

    &lt;span class="nf"&gt;movw&lt;/span&gt; &lt;span class="no"&gt;$BOOTSEG&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%ax&lt;/span&gt;
    &lt;span class="nf"&gt;movw&lt;/span&gt; &lt;span class="nv"&gt;%ax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%ds&lt;/span&gt;
    &lt;span class="nf"&gt;movw&lt;/span&gt; &lt;span class="no"&gt;$INITSEG&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%ax&lt;/span&gt;
    &lt;span class="nf"&gt;movw&lt;/span&gt; &lt;span class="nv"&gt;%ax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%es&lt;/span&gt;
    &lt;span class="nf"&gt;movw&lt;/span&gt; &lt;span class="no"&gt;$256&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%cx&lt;/span&gt;
    &lt;span class="nf"&gt;xor&lt;/span&gt; &lt;span class="nv"&gt;%si&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%si&lt;/span&gt;
    &lt;span class="nf"&gt;xor&lt;/span&gt; &lt;span class="nv"&gt;%di&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%di&lt;/span&gt;
    &lt;span class="na"&gt;rep&lt;/span&gt;
    &lt;span class="nf"&gt;movsw&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;跳到复制后的地方&lt;em&gt;继续&lt;/em&gt;执行&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="nf"&gt;ljmp&lt;/span&gt; &lt;span class="no"&gt;$INITSEG&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;$go&lt;/span&gt;
&lt;span class="nl"&gt;go:&lt;/span&gt;
    &lt;span class="nf"&gt;movw&lt;/span&gt; &lt;span class="nv"&gt;%cs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%ax&lt;/span&gt;
    &lt;span class="nf"&gt;movw&lt;/span&gt; &lt;span class="nv"&gt;%ax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%ds&lt;/span&gt;
    &lt;span class="nf"&gt;movw&lt;/span&gt; &lt;span class="nv"&gt;%ax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%es&lt;/span&gt;
&lt;span class="c"&gt;# put stack at 0x9ff00&lt;/span&gt;
    &lt;span class="nf"&gt;movw&lt;/span&gt; &lt;span class="nv"&gt;%ax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%ss&lt;/span&gt;
    &lt;span class="nf"&gt;movw&lt;/span&gt; &lt;span class="no"&gt;$0xFF00&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%sp&lt;/span&gt;   &lt;span class="c"&gt;# arbitrary value &amp;gt;&amp;gt; 512&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;将setup section加载至内存&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nl"&gt;load_setup:&lt;/span&gt;
    &lt;span class="nf"&gt;movw&lt;/span&gt; &lt;span class="no"&gt;$0x0000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%dx&lt;/span&gt;   &lt;span class="c"&gt;# DL = drive 0, DH = head 0&lt;/span&gt;
    &lt;span class="nf"&gt;movw&lt;/span&gt; &lt;span class="no"&gt;$0x0002&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%cx&lt;/span&gt;   &lt;span class="c"&gt;# CL = sector 2, CH = track 0&lt;/span&gt;
    &lt;span class="nf"&gt;movw&lt;/span&gt; &lt;span class="no"&gt;$0x0200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%bx&lt;/span&gt;   &lt;span class="c"&gt;# address = 512, in INITSEG&lt;/span&gt;
    &lt;span class="nf"&gt;movw&lt;/span&gt; &lt;span class="no"&gt;$0x0200&lt;/span&gt;&lt;span class="err"&gt;+&lt;/span&gt;&lt;span class="no"&gt;SETUPLEN&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%ax&lt;/span&gt;  &lt;span class="c"&gt;# servie 2, nr of sectors&lt;/span&gt;
    &lt;span class="nf"&gt;int&lt;/span&gt; &lt;span class="no"&gt;$0x13&lt;/span&gt;           &lt;span class="c"&gt;# read it&lt;/span&gt;
    &lt;span class="nf"&gt;jnc&lt;/span&gt; &lt;span class="no"&gt;ok_load_setup&lt;/span&gt;   &lt;span class="c"&gt;# ok - continue&lt;/span&gt;
    &lt;span class="nf"&gt;movw&lt;/span&gt; &lt;span class="no"&gt;$0x0000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%dx&lt;/span&gt;   
    &lt;span class="no"&gt;movw&lt;/span&gt; &lt;span class="no"&gt;$0x0000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%ax&lt;/span&gt;   &lt;span class="c"&gt;#reset the diskette&lt;/span&gt;
    &lt;span class="nf"&gt;int&lt;/span&gt; &lt;span class="no"&gt;$0x13&lt;/span&gt;
    &lt;span class="nf"&gt;jmp&lt;/span&gt; &lt;span class="no"&gt;load_setup&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;获得每磁道的扇区数&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nl"&gt;ok_load_setup:&lt;/span&gt;

&lt;span class="c"&gt;# Get disk drive parameters, specificlly nr of sectors/track&lt;/span&gt;

    &lt;span class="nf"&gt;movb&lt;/span&gt; &lt;span class="no"&gt;$0x00&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%dl&lt;/span&gt; &lt;span class="c"&gt;# DL = drive index&lt;/span&gt;
    &lt;span class="nf"&gt;movw&lt;/span&gt; &lt;span class="no"&gt;$0x0800&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%ax&lt;/span&gt;   &lt;span class="c"&gt;# AH = service number&lt;/span&gt;
    &lt;span class="nf"&gt;int&lt;/span&gt; &lt;span class="no"&gt;$0x13&lt;/span&gt;   &lt;span class="c"&gt;# return CX[0:5] = nr of sectors per track&lt;/span&gt;
                &lt;span class="c"&gt;# CX[6:7][8:15] = nr of cylinders&lt;/span&gt;
                &lt;span class="c"&gt;# es has changed&lt;/span&gt;
    &lt;span class="nf"&gt;movb&lt;/span&gt; &lt;span class="no"&gt;$0x00&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%ch&lt;/span&gt; &lt;span class="c"&gt;# clear CH because only nr of sectors per stack&lt;/span&gt;
                    &lt;span class="c"&gt;# will be needed. CX[6:7] is zero in floppy.&lt;/span&gt;
    &lt;span class="nf"&gt;movw&lt;/span&gt; &lt;span class="nv"&gt;%cx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%cs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="no"&gt;sectors&lt;/span&gt;   &lt;span class="c"&gt;# save nr of sectors per stack&lt;/span&gt;
    &lt;span class="nf"&gt;movw&lt;/span&gt; &lt;span class="no"&gt;$INITSEG&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%ax&lt;/span&gt;
    &lt;span class="nf"&gt;movw&lt;/span&gt; &lt;span class="nv"&gt;%ax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%es&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;打印提示信息&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Print some inane message&lt;/span&gt;

    &lt;span class="nf"&gt;movb&lt;/span&gt; &lt;span class="no"&gt;$0x03&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%ah&lt;/span&gt; &lt;span class="c"&gt;# read cursor pos (AH = function number)&lt;/span&gt;
    &lt;span class="nf"&gt;xor&lt;/span&gt; &lt;span class="nv"&gt;%bh&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%bh&lt;/span&gt;    &lt;span class="c"&gt;# BH = page number&lt;/span&gt;
    &lt;span class="nf"&gt;int&lt;/span&gt; &lt;span class="no"&gt;$0x10&lt;/span&gt;       &lt;span class="c"&gt;# return (DH = row, DL = column&lt;/span&gt;
                    &lt;span class="c"&gt;# CH = cursor start line CL = cursor bottom line)&lt;/span&gt;

    &lt;span class="nf"&gt;movw&lt;/span&gt; &lt;span class="no"&gt;$24&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%cx&lt;/span&gt;   &lt;span class="c"&gt;# number of characters in string&lt;/span&gt;
    &lt;span class="nf"&gt;movw&lt;/span&gt; &lt;span class="no"&gt;$0x0007&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%bx&lt;/span&gt;   &lt;span class="c"&gt;# BH = page number BL = attribute if string &lt;/span&gt;
                        &lt;span class="c"&gt;# contains only characters (bit 1 of AL = 0)&lt;/span&gt;
    &lt;span class="nf"&gt;movw&lt;/span&gt; &lt;span class="no"&gt;$msg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%bp&lt;/span&gt; &lt;span class="c"&gt;# ES:BP points to string to be printed&lt;/span&gt;
    &lt;span class="nf"&gt;movw&lt;/span&gt; &lt;span class="no"&gt;$0x1301&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%ax&lt;/span&gt;   &lt;span class="c"&gt;# AH = function number&lt;/span&gt;
                        &lt;span class="c"&gt;# AL = write mode:&lt;/span&gt;
                        &lt;span class="c"&gt;# bit 0:update cursor after writing&lt;/span&gt;
                        &lt;span class="c"&gt;# bit 1:string contains attribute&lt;/span&gt;
    &lt;span class="nf"&gt;int&lt;/span&gt; &lt;span class="no"&gt;$0x10&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;将system section加载至内存&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# ok, we have written the message, now&lt;/span&gt;
&lt;span class="c"&gt;# we want to load the system (at 0x10000)&lt;/span&gt;

    &lt;span class="nf"&gt;movw&lt;/span&gt; &lt;span class="no"&gt;$SYSSEG&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%ax&lt;/span&gt;
    &lt;span class="nf"&gt;movw&lt;/span&gt; &lt;span class="nv"&gt;%ax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%es&lt;/span&gt;   &lt;span class="c"&gt;# segment of 0x10000&lt;/span&gt;
    &lt;span class="nf"&gt;call&lt;/span&gt; &lt;span class="no"&gt;read_it&lt;/span&gt;
    &lt;span class="nf"&gt;call&lt;/span&gt; &lt;span class="no"&gt;kill_motor&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;检查根设备&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# After that we check which root-device to use. if the device is&lt;/span&gt;
&lt;span class="c"&gt;# defined (!= 0), nothing is done and the given device is used.&lt;/span&gt;
&lt;span class="c"&gt;# Otherwise, either /dev/PS0 (2,28) or /dev/at0 (2,8), depending&lt;/span&gt;
&lt;span class="c"&gt;# on the number of sectors that the BIOS reports currently.&lt;/span&gt;

    &lt;span class="nf"&gt;movw&lt;/span&gt; &lt;span class="nv"&gt;%cs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="no"&gt;root_dev&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%ax&lt;/span&gt;
    &lt;span class="nf"&gt;cmp&lt;/span&gt; &lt;span class="no"&gt;$0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%ax&lt;/span&gt;
    &lt;span class="nf"&gt;jne&lt;/span&gt; &lt;span class="no"&gt;root_defined&lt;/span&gt;
    &lt;span class="nf"&gt;movw&lt;/span&gt; &lt;span class="nv"&gt;%cs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="no"&gt;sectors&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%bx&lt;/span&gt;
    &lt;span class="nf"&gt;movw&lt;/span&gt; &lt;span class="no"&gt;$0x0208&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%ax&lt;/span&gt;   &lt;span class="c"&gt;# /dev/ps0 - 1.2Mb&lt;/span&gt;
    &lt;span class="nf"&gt;cmp&lt;/span&gt; &lt;span class="no"&gt;$15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%bx&lt;/span&gt;
    &lt;span class="nf"&gt;je&lt;/span&gt; &lt;span class="no"&gt;root_defined&lt;/span&gt;
    &lt;span class="nf"&gt;movw&lt;/span&gt; &lt;span class="no"&gt;$0x021c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%ax&lt;/span&gt;   &lt;span class="c"&gt;# /dev/PS0 - 1.44Mb&lt;/span&gt;
    &lt;span class="nf"&gt;cmp&lt;/span&gt; &lt;span class="no"&gt;$18&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%bx&lt;/span&gt;
    &lt;span class="nf"&gt;je&lt;/span&gt; &lt;span class="no"&gt;root_defined&lt;/span&gt;
&lt;span class="nl"&gt;undef_root:&lt;/span&gt;
    &lt;span class="nf"&gt;jmp&lt;/span&gt; &lt;span class="no"&gt;undef_root&lt;/span&gt;
&lt;span class="nl"&gt;root_defined:&lt;/span&gt;
    &lt;span class="nf"&gt;movw&lt;/span&gt; &lt;span class="nv"&gt;%ax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%cs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="no"&gt;root_dev&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;开始执行setup.s&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# after that (everything loaded), we jump to &lt;/span&gt;
&lt;span class="c"&gt;# the setup-routine loaded directly after&lt;/span&gt;
&lt;span class="c"&gt;# the bootblock:&lt;/span&gt;

    &lt;span class="nf"&gt;ljmp&lt;/span&gt; &lt;span class="no"&gt;$SETUPSEG&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;$0x0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;读取system section子程序&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# This routine loads the system at address 0x10000, making sure&lt;/span&gt;
&lt;span class="c"&gt;# no 64kB boundaries are crossed. We try to load it as fast as&lt;/span&gt;
&lt;span class="c"&gt;# possible, loading whole tracks whenever we can.&lt;/span&gt;
&lt;span class="c"&gt;#&lt;/span&gt;
&lt;span class="c"&gt;# in: es - starting address segment (normally 0x1000)&lt;/span&gt;
&lt;span class="c"&gt;#&lt;/span&gt;
&lt;span class="nl"&gt;sread:&lt;/span&gt; &lt;span class="na"&gt;.word&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="err"&gt;+&lt;/span&gt;&lt;span class="no"&gt;SETUPLEN&lt;/span&gt; &lt;span class="c"&gt;# sectors read of current track&lt;/span&gt;
&lt;span class="nl"&gt;head:&lt;/span&gt; &lt;span class="na"&gt;.word&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="c"&gt;# current head&lt;/span&gt;
&lt;span class="nl"&gt;track:&lt;/span&gt; &lt;span class="na"&gt;.word&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;  &lt;span class="c"&gt;# current track&lt;/span&gt;

&lt;span class="nl"&gt;read_it:&lt;/span&gt;
    &lt;span class="nf"&gt;movw&lt;/span&gt; &lt;span class="nv"&gt;%es&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%ax&lt;/span&gt;
    &lt;span class="nf"&gt;test&lt;/span&gt; &lt;span class="no"&gt;$0x0fff&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%ax&lt;/span&gt;
&lt;span class="nf"&gt;die&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nf"&gt;jne&lt;/span&gt; &lt;span class="no"&gt;die&lt;/span&gt; &lt;span class="c"&gt;# es must be at 64kB boundary&lt;/span&gt;

    &lt;span class="nf"&gt;xor&lt;/span&gt; &lt;span class="nv"&gt;%bx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%bx&lt;/span&gt;    &lt;span class="c"&gt;# bx is starting addresss within segment&lt;/span&gt;
&lt;span class="nl"&gt;rp_read:&lt;/span&gt;
    &lt;span class="nf"&gt;movw&lt;/span&gt; &lt;span class="nv"&gt;%es&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%ax&lt;/span&gt;
    &lt;span class="nf"&gt;cmp&lt;/span&gt; &lt;span class="no"&gt;$ENDSEG&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%ax&lt;/span&gt;    &lt;span class="c"&gt;# have we loaded all yet?&lt;/span&gt;
    &lt;span class="nf"&gt;jb&lt;/span&gt;  &lt;span class="no"&gt;ok1_read&lt;/span&gt;
    &lt;span class="nf"&gt;ret&lt;/span&gt;
&lt;span class="nl"&gt;ok1_read:&lt;/span&gt;
    &lt;span class="nf"&gt;movw&lt;/span&gt; &lt;span class="nv"&gt;%cs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="no"&gt;sectors&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%ax&lt;/span&gt;
    &lt;span class="nf"&gt;subw&lt;/span&gt; &lt;span class="no"&gt;sread&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%ax&lt;/span&gt; &lt;span class="c"&gt;# nr of sectors in the track have not been read.&lt;/span&gt;
    &lt;span class="nf"&gt;movw&lt;/span&gt; &lt;span class="nv"&gt;%ax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%cx&lt;/span&gt;   
    &lt;span class="no"&gt;shlw&lt;/span&gt; &lt;span class="no"&gt;$9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%cx&lt;/span&gt;        &lt;span class="c"&gt;# nr of Bytes = nr of sectors * 512&lt;/span&gt;
    &lt;span class="nf"&gt;addw&lt;/span&gt; &lt;span class="nv"&gt;%bx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%cx&lt;/span&gt;   &lt;span class="c"&gt;# end address&lt;/span&gt;
    &lt;span class="nf"&gt;jnc&lt;/span&gt; &lt;span class="no"&gt;ok2_read&lt;/span&gt;    &lt;span class="c"&gt;# is out of 64kB boundary&lt;/span&gt;
    &lt;span class="nf"&gt;je&lt;/span&gt; &lt;span class="no"&gt;ok2_read&lt;/span&gt;
    &lt;span class="nf"&gt;xor&lt;/span&gt; &lt;span class="nv"&gt;%ax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%ax&lt;/span&gt;    &lt;span class="c"&gt;# 0 = 64kB mod 2^16&lt;/span&gt;
    &lt;span class="nf"&gt;subw&lt;/span&gt; &lt;span class="nv"&gt;%bx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%ax&lt;/span&gt;   &lt;span class="c"&gt;# free memory size in current segment&lt;/span&gt;
    &lt;span class="nf"&gt;shrw&lt;/span&gt; &lt;span class="no"&gt;$9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%ax&lt;/span&gt;        &lt;span class="c"&gt;# nr of sectors can be read in current segment&lt;/span&gt;
&lt;span class="nl"&gt;ok2_read:&lt;/span&gt;
    &lt;span class="nf"&gt;call&lt;/span&gt; &lt;span class="no"&gt;read_track&lt;/span&gt;
    &lt;span class="nf"&gt;movw&lt;/span&gt; &lt;span class="nv"&gt;%ax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%cx&lt;/span&gt;
    &lt;span class="nf"&gt;add&lt;/span&gt; &lt;span class="no"&gt;sread&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%ax&lt;/span&gt;  &lt;span class="c"&gt;# nr of sectors which have been read in the track &lt;/span&gt;
    &lt;span class="nf"&gt;cmp&lt;/span&gt; &lt;span class="nv"&gt;%cs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="no"&gt;sectors&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%ax&lt;/span&gt;
    &lt;span class="nf"&gt;jne&lt;/span&gt; &lt;span class="no"&gt;ok3_read&lt;/span&gt;    &lt;span class="c"&gt;# have we read all sectors in the track?&lt;/span&gt;
    &lt;span class="nf"&gt;movw&lt;/span&gt; &lt;span class="no"&gt;$1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%ax&lt;/span&gt;
    &lt;span class="nf"&gt;subw&lt;/span&gt; &lt;span class="no"&gt;head&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%ax&lt;/span&gt;
    &lt;span class="nf"&gt;jne&lt;/span&gt; &lt;span class="no"&gt;ok4_read&lt;/span&gt;    &lt;span class="c"&gt;# Is current head zero?&lt;/span&gt;
    &lt;span class="nf"&gt;incw&lt;/span&gt; &lt;span class="no"&gt;track&lt;/span&gt;      &lt;span class="c"&gt;# current head = 1, so increase track&lt;/span&gt;
&lt;span class="nl"&gt;ok4_read:&lt;/span&gt;
    &lt;span class="nf"&gt;movw&lt;/span&gt; &lt;span class="nv"&gt;%ax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;head&lt;/span&gt;  &lt;span class="c"&gt;# set current head = 1 if current head = 0&lt;/span&gt;
                    &lt;span class="c"&gt;# set current head = 0 if current head = 1 &lt;/span&gt;
    &lt;span class="nf"&gt;xor&lt;/span&gt; &lt;span class="nv"&gt;%ax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%ax&lt;/span&gt;    &lt;span class="c"&gt;# reset sectors have been read in the track&lt;/span&gt;
&lt;span class="nl"&gt;ok3_read:&lt;/span&gt;   &lt;span class="c"&gt;# continue reading sectors in the track&lt;/span&gt;
    &lt;span class="nf"&gt;movw&lt;/span&gt; &lt;span class="nv"&gt;%ax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;sread&lt;/span&gt; &lt;span class="c"&gt;# update sread after read_track&lt;/span&gt;
    &lt;span class="nf"&gt;shlw&lt;/span&gt; &lt;span class="no"&gt;$9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%cx&lt;/span&gt;    
    &lt;span class="no"&gt;addw&lt;/span&gt; &lt;span class="nv"&gt;%cx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%bx&lt;/span&gt;   &lt;span class="c"&gt;# update offset(BX) in the segment&lt;/span&gt;
    &lt;span class="nf"&gt;jnc&lt;/span&gt; &lt;span class="no"&gt;rp_read&lt;/span&gt;     &lt;span class="c"&gt;# is out of 64kB boundary&lt;/span&gt;
    &lt;span class="nf"&gt;movw&lt;/span&gt; &lt;span class="nv"&gt;%es&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%ax&lt;/span&gt;
    &lt;span class="nf"&gt;addw&lt;/span&gt; &lt;span class="no"&gt;$0x1000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%ax&lt;/span&gt;
    &lt;span class="nf"&gt;movw&lt;/span&gt; &lt;span class="nv"&gt;%ax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%es&lt;/span&gt;   &lt;span class="c"&gt;# increase segment base address(ES) by 64kB&lt;/span&gt;
    &lt;span class="nf"&gt;xor&lt;/span&gt; &lt;span class="nv"&gt;%bx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%bx&lt;/span&gt;    &lt;span class="c"&gt;# reset the offset(BX)&lt;/span&gt;
    &lt;span class="nf"&gt;jmp&lt;/span&gt; &lt;span class="no"&gt;rp_read&lt;/span&gt;

&lt;span class="nl"&gt;read_track:&lt;/span&gt;
    &lt;span class="nf"&gt;push&lt;/span&gt; &lt;span class="nv"&gt;%ax&lt;/span&gt;
    &lt;span class="nf"&gt;push&lt;/span&gt; &lt;span class="nv"&gt;%bx&lt;/span&gt;
    &lt;span class="nf"&gt;push&lt;/span&gt; &lt;span class="nv"&gt;%cx&lt;/span&gt;
    &lt;span class="nf"&gt;push&lt;/span&gt; &lt;span class="nv"&gt;%dx&lt;/span&gt;
    &lt;span class="nf"&gt;movw&lt;/span&gt; &lt;span class="no"&gt;track&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%dx&lt;/span&gt;
    &lt;span class="nf"&gt;movw&lt;/span&gt; &lt;span class="no"&gt;sread&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%cx&lt;/span&gt;
    &lt;span class="nf"&gt;inc&lt;/span&gt; &lt;span class="nv"&gt;%cx&lt;/span&gt;
    &lt;span class="nf"&gt;movb&lt;/span&gt; &lt;span class="nv"&gt;%dl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%ch&lt;/span&gt;   &lt;span class="c"&gt;# CH = track, CL = sector&lt;/span&gt;
    &lt;span class="nf"&gt;movw&lt;/span&gt; &lt;span class="no"&gt;head&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%dx&lt;/span&gt;
    &lt;span class="nf"&gt;movb&lt;/span&gt; &lt;span class="nv"&gt;%dl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%dh&lt;/span&gt;
    &lt;span class="nf"&gt;movb&lt;/span&gt; &lt;span class="no"&gt;$0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%dl&lt;/span&gt;
    &lt;span class="nf"&gt;and&lt;/span&gt; &lt;span class="no"&gt;$0x0100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%dx&lt;/span&gt;    &lt;span class="c"&gt;# DH = head, DL = drive&lt;/span&gt;
                        &lt;span class="c"&gt;# make sure only drive 0, head 0/1 will be read&lt;/span&gt;
    &lt;span class="nf"&gt;movb&lt;/span&gt; &lt;span class="no"&gt;$2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%ah&lt;/span&gt;    &lt;span class="c"&gt;# AH = service nr, AL = nr of sectors to be read&lt;/span&gt;
    &lt;span class="nf"&gt;int&lt;/span&gt; &lt;span class="no"&gt;$0x13&lt;/span&gt;
    &lt;span class="nf"&gt;jc&lt;/span&gt; &lt;span class="no"&gt;bad_rt&lt;/span&gt;
    &lt;span class="nf"&gt;pop&lt;/span&gt; &lt;span class="nv"&gt;%dx&lt;/span&gt;
    &lt;span class="nf"&gt;pop&lt;/span&gt; &lt;span class="nv"&gt;%cx&lt;/span&gt;
    &lt;span class="nf"&gt;pop&lt;/span&gt; &lt;span class="nv"&gt;%bx&lt;/span&gt;
    &lt;span class="nf"&gt;pop&lt;/span&gt; &lt;span class="nv"&gt;%ax&lt;/span&gt;
    &lt;span class="nf"&gt;ret&lt;/span&gt;
&lt;span class="nl"&gt;bad_rt:&lt;/span&gt;
    &lt;span class="nf"&gt;xor&lt;/span&gt; &lt;span class="nv"&gt;%ax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%ax&lt;/span&gt;
    &lt;span class="nf"&gt;xor&lt;/span&gt; &lt;span class="nv"&gt;%dx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%dx&lt;/span&gt;
    &lt;span class="nf"&gt;int&lt;/span&gt; &lt;span class="no"&gt;$0x13&lt;/span&gt;
    &lt;span class="nf"&gt;pop&lt;/span&gt; &lt;span class="nv"&gt;%dx&lt;/span&gt;
    &lt;span class="nf"&gt;pop&lt;/span&gt; &lt;span class="nv"&gt;%cx&lt;/span&gt;
    &lt;span class="nf"&gt;pop&lt;/span&gt; &lt;span class="nv"&gt;%bx&lt;/span&gt;
    &lt;span class="nf"&gt;pop&lt;/span&gt; &lt;span class="nv"&gt;%ax&lt;/span&gt;
    &lt;span class="nf"&gt;jmp&lt;/span&gt; &lt;span class="no"&gt;read_track&lt;/span&gt;

&lt;span class="c"&gt;# This procedure turns off the floppy drive motor, so&lt;/span&gt;
&lt;span class="c"&gt;# that we enter the kernel in a known state, and&lt;/span&gt;
&lt;span class="c"&gt;# don not have to worry about it later.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;关闭马达&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nl"&gt;kill_motor:&lt;/span&gt;
    &lt;span class="nf"&gt;push&lt;/span&gt; &lt;span class="nv"&gt;%dx&lt;/span&gt;
    &lt;span class="nf"&gt;movw&lt;/span&gt; &lt;span class="no"&gt;$0x3f2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%dx&lt;/span&gt;
    &lt;span class="nf"&gt;movb&lt;/span&gt; &lt;span class="no"&gt;$0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%al&lt;/span&gt;
    &lt;span class="nf"&gt;outb&lt;/span&gt; &lt;span class="nv"&gt;%al&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%dx&lt;/span&gt;
    &lt;span class="nf"&gt;pop&lt;/span&gt; &lt;span class="nv"&gt;%dx&lt;/span&gt;
    &lt;span class="nf"&gt;ret&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;用到的一些变量&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nl"&gt;sectors:&lt;/span&gt;
    &lt;span class="na"&gt;.word&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

&lt;span class="nl"&gt;msg1:&lt;/span&gt;
    &lt;span class="na"&gt;.byte&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;
    &lt;span class="na"&gt;.ascii&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Loading system ...&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;.byte&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;

&lt;span class="na"&gt;.org&lt;/span&gt; &lt;span class="mi"&gt;508&lt;/span&gt;
&lt;span class="nl"&gt;root_dev:&lt;/span&gt;
    &lt;span class="na"&gt;.word&lt;/span&gt; &lt;span class="no"&gt;ROOT_DEV&lt;/span&gt;
&lt;span class="nl"&gt;boot_flag:&lt;/span&gt;
    &lt;span class="na"&gt;.word&lt;/span&gt; &lt;span class="mi"&gt;0xAA55&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;完整的代码可以在&lt;a href="/assets/src/linux-0.11-rewrite/boot.s"&gt;这里&lt;/a&gt;下载&lt;/p&gt;
&lt;h2&gt;存在的问题&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;这里在读取完setup section(4个sectors)，并不是像很多书上说的读240个扇区，而是读了0x30000个字节，也就是384个扇区？&lt;/li&gt;
&lt;/ol&gt;</summary><category term="linux"></category><category term="bochs"></category><category term="os"></category></entry><entry><title>Ubuntu 12.04 Ethernet Controller Problem</title><link href="http://www.gotit.sinaapp.com/ubuntu-1204-ethernet-controller-problem.html" rel="alternate"></link><updated>2014-03-09T00:00:00+08:00</updated><author><name>ictlxb</name></author><id>tag:www.gotit.sinaapp.com,2014-03-09:ubuntu-1204-ethernet-controller-problem.html</id><summary type="html">&lt;h2&gt;Problem&lt;/h2&gt;
&lt;p&gt;Ethernet controller can not detect the cable.&lt;/p&gt;
&lt;h2&gt;Solution&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;wget http://r8168.googlecode.com/files/r8168-8.037.00.tar.bz2
tar xjf r8168-8.037.00.tar.bz2
&lt;span class="nb"&gt;cd &lt;/span&gt;r8168-8.037.00
./autorun.sh
&lt;/pre&gt;&lt;/div&gt;</summary><category term="Linux"></category><category term="Network"></category><category term="Ubuntu"></category></entry><entry><title>Trace Linux Kernel With Bochs(2)</title><link href="http://www.gotit.sinaapp.com/trace-linux-kernel-with-bochs2.html" rel="alternate"></link><updated>2014-03-07T00:00:00+08:00</updated><author><name>ictlxb</name></author><id>tag:www.gotit.sinaapp.com,2014-03-07:trace-linux-kernel-with-bochs2.html</id><summary type="html">&lt;div class="highlight"&gt;&lt;pre&gt;boot section是被BIOS加载至内存的第一段OS代码，它的寿命不长，却意义深远：初步归化内存，加载OS的剩余部分进入内存。
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;创世者的遗志&lt;/h2&gt;
&lt;h4&gt;志继&lt;/h4&gt;
&lt;p&gt;从&lt;a href="http://www.gotit.sinaapp.com/trace-linux-kernel-with-bochs1.html"&gt;上一篇文章&lt;/a&gt;中，我们知道了BIOS通过&lt;code&gt;INT 0x19&lt;/code&gt;将硬盘(软盘)的&lt;code&gt;0&lt;/code&gt;号磁头(head)，&lt;code&gt;0&lt;/code&gt;号磁道(track),&lt;code&gt;第一个&lt;/code&gt;扇区(sector)读入到&lt;code&gt;0x07c00&lt;/code&gt;的内存位置上。这个扇区就称作&lt;code&gt;boot section&lt;/code&gt;。BIOS跳转到这里开始执行，boot section的代码。&lt;/p&gt;
&lt;h4&gt;规划&lt;/h4&gt;
&lt;p&gt;boot section的代码 首先将自己从内存&lt;code&gt;0x07c00&lt;/code&gt;复制到&lt;code&gt;0x90000&lt;/code&gt;，然后将它后续的&lt;code&gt;4&lt;/code&gt;个扇区(&lt;code&gt;setup section&lt;/code&gt;)读入内存&lt;code&gt;0x90200&lt;/code&gt;开始的位置。这个操作是通过&lt;code&gt;INT 0x13&lt;/code&gt;完成的。同样的方式，也就可以把剩余的240个扇区读入到内存中&lt;code&gt;0x10000&lt;/code&gt;的位置。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;通常，一个扇区是512Bytes，512转换成16进制就是0x200，由此可见，boot section 后续的4个扇区被它放在了内存中与自己紧挨着的位置。
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;其它的一些工作就不过多叙述了，有兴趣的读者可以阅读一下&lt;a href="/assets/src/linux-0.11/boot/bootsect.S"&gt;bootsect.S源码&lt;/a&gt;。最后，boot section通过&lt;code&gt;jmpi 0, 0x9020&lt;/code&gt;跳转到setup section的第一条指令处开始执行。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;实模式下的cpu通过两个16Bits的寄存器: 段基址寄存器CS(Code Segment)和段偏移寄存器IP(Instruction Pointer)，来指示执行指令的位置。

早期的8086 cpu字长是16位，地址总线宽度为20，因此其寻址方式采用CS:IP的方式。

这种形式构成的线性地址为(CS&amp;lt;&amp;lt;4) + IP。如CS=0x9020,IP=0x0时，形成的线性地址为0x9020&amp;lt;&amp;lt;4 + 0x0 = 0x90200。

jmpi 0, 0x9020通过将CS置成0x9020，将IP置成0，来执行CS:IP处的代码。
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Hello OS World!&lt;/h2&gt;
&lt;h4&gt;写源码&lt;/h4&gt;
&lt;p&gt;因为工具的原因，你可能需要了解&lt;a href="http://www.ibm.com/developerworks/cn/linux/l-gas-nasm.html"&gt;GAS和NASM的区别&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;代码如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#Filename: boot.S&lt;/span&gt;

&lt;span class="na"&gt;.code16&lt;/span&gt; &lt;span class="c"&gt;#use 16bit&lt;/span&gt;
&lt;span class="na"&gt;.text&lt;/span&gt;   &lt;span class="c"&gt;#code segment start&lt;/span&gt;

    &lt;span class="nf"&gt;movw&lt;/span&gt;    &lt;span class="nv"&gt;%cs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%ax&lt;/span&gt;    &lt;span class="c"&gt;#cs:ip was initialized by BOIS instruction &amp;#39;jmpi 0, 0x07c0&amp;#39;&lt;/span&gt;
    &lt;span class="nf"&gt;movw&lt;/span&gt;    &lt;span class="nv"&gt;%ax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%ds&lt;/span&gt;    &lt;span class="c"&gt;#initialize ds, es and ss with cs&lt;/span&gt;
    &lt;span class="nf"&gt;movw&lt;/span&gt;    &lt;span class="nv"&gt;%ax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%es&lt;/span&gt;
    &lt;span class="nf"&gt;movw&lt;/span&gt;    &lt;span class="nv"&gt;%ax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%ss&lt;/span&gt;
    &lt;span class="nf"&gt;movw&lt;/span&gt;    &lt;span class="no"&gt;$0x7c00&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%sp&lt;/span&gt;    &lt;span class="c"&gt;#allocate stack, get ready for call&lt;/span&gt;
    &lt;span class="nf"&gt;call&lt;/span&gt; &lt;span class="no"&gt;disp_msg&lt;/span&gt;   &lt;span class="c"&gt;#call the function of display message&lt;/span&gt;
&lt;span class="nl"&gt;inf:&lt;/span&gt;
    &lt;span class="nf"&gt;jmp&lt;/span&gt; &lt;span class="no"&gt;inf&lt;/span&gt; &lt;span class="c"&gt;#infinite loop to see the result&lt;/span&gt;

&lt;span class="nl"&gt;disp_msg:&lt;/span&gt;
    &lt;span class="nf"&gt;movw&lt;/span&gt; &lt;span class="no"&gt;$msg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%ax&lt;/span&gt;  &lt;span class="c"&gt;#initialize bp with the msg address&lt;/span&gt;
    &lt;span class="nf"&gt;movw&lt;/span&gt; &lt;span class="nv"&gt;%ax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%bp&lt;/span&gt;   
    &lt;span class="no"&gt;movw&lt;/span&gt; &lt;span class="no"&gt;len&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%cx&lt;/span&gt;   &lt;span class="c"&gt;#prepare the arguments for int 0x10 &lt;/span&gt;
    &lt;span class="nf"&gt;movw&lt;/span&gt; &lt;span class="no"&gt;$0x1301&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%ax&lt;/span&gt;
    &lt;span class="nf"&gt;movw&lt;/span&gt; &lt;span class="no"&gt;$0x00c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%bx&lt;/span&gt;
    &lt;span class="nf"&gt;movb&lt;/span&gt; &lt;span class="no"&gt;$0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%dl&lt;/span&gt;
    &lt;span class="nf"&gt;int&lt;/span&gt; &lt;span class="no"&gt;$0x10&lt;/span&gt;
    &lt;span class="nf"&gt;ret&lt;/span&gt;

&lt;span class="nl"&gt;msg:&lt;/span&gt;
    &lt;span class="na"&gt;.ascii&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Hello, OS world!&amp;quot;&lt;/span&gt;
&lt;span class="nl"&gt;len:&lt;/span&gt;
    &lt;span class="na"&gt;.int&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="no"&gt;msg&lt;/span&gt;
    &lt;span class="na"&gt;.org&lt;/span&gt; &lt;span class="mi"&gt;510&lt;/span&gt;    &lt;span class="c"&gt;#fill the blank&lt;/span&gt;
    &lt;span class="na"&gt;.word&lt;/span&gt; &lt;span class="mi"&gt;0xaa55&lt;/span&gt;    &lt;span class="c"&gt;#maybe a magic number&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;注：通过&lt;code&gt;INT 0x10&lt;/code&gt;将字符串输出的显示设备上。&lt;/p&gt;
&lt;h4&gt;编写Makefile&lt;/h4&gt;
&lt;p&gt;Makefile是linux下常用的组织工程和自动化编译的方式。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;CC&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; gcc
&lt;span class="nv"&gt;LD&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; ld
&lt;span class="nv"&gt;LDFILE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; ld_script.ld
&lt;span class="nv"&gt;OBJCOPY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; objcopy

&lt;span class="nf"&gt;all&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;boot&lt;/span&gt;.&lt;span class="n"&gt;img&lt;/span&gt;

&lt;span class="nf"&gt;boot.img&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;boot&lt;/span&gt;.&lt;span class="n"&gt;bin&lt;/span&gt;
    @dd &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/dev/zero &lt;span class="nv"&gt;of&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;empty_floppy.img &lt;span class="nv"&gt;bs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;512&lt;/span&gt; &lt;span class="nv"&gt;count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;2880
    @dd &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;boot.bin &lt;span class="nv"&gt;of&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;boot.img &lt;span class="nv"&gt;bs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;512&lt;/span&gt; &lt;span class="nv"&gt;count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1
    @dd &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;empty_floppy.img &lt;span class="nv"&gt;of&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;boot.img &lt;span class="nv"&gt;skip&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="nv"&gt;seek&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="nv"&gt;bs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;512&lt;/span&gt; &lt;span class="nv"&gt;count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;2879

&lt;span class="nf"&gt;boot.bin&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;boot&lt;/span&gt;.&lt;span class="n"&gt;elf&lt;/span&gt;
    @&lt;span class="k"&gt;$(&lt;/span&gt;OBJCOPY&lt;span class="k"&gt;)&lt;/span&gt; -R .pdr -R .comment -R .note -S -O binary boot.elf boot.bin

&lt;span class="nf"&gt;boot.elf&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;boot&lt;/span&gt;.&lt;span class="n"&gt;o&lt;/span&gt;
    &lt;span class="k"&gt;$(&lt;/span&gt;LD&lt;span class="k"&gt;)&lt;/span&gt; boot.o -o boot.elf -e c -T&lt;span class="k"&gt;$(&lt;/span&gt;LDFILE&lt;span class="k"&gt;)&lt;/span&gt;

&lt;span class="nf"&gt;boot.o&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;boot&lt;/span&gt;.&lt;span class="n"&gt;S&lt;/span&gt;
    &lt;span class="k"&gt;$(&lt;/span&gt;CC&lt;span class="k"&gt;)&lt;/span&gt; -c boot.S

&lt;span class="nf"&gt;clean&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    @rm -rf boot.o boot.elf boot.bin boot.img
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;首先通过gcc(实际上是gcc调用了汇编器&lt;code&gt;as&lt;/code&gt;) 将boot.S汇编成boot.o,ELF格式的可重定位文件(ELF Relocatable File)。可重定位文件给了我们足够的自由，毕竟BIOS只会简单的跳转到&lt;code&gt;0x07c00&lt;/code&gt;的位置上执行。&lt;/p&gt;
&lt;p&gt;利用ld命令可以方便地将boot.o进行链接(重定位)，进而得到boot.elf,ELF格式的可执行文件(ELF Executable File)。&lt;/p&gt;
&lt;p&gt;但是这里所谓的可执行文件，却无法在没有操作系统的情况下执行，boot.elf的执行需要操作系统提供的ELF Loader才能正常执行。&lt;/p&gt;
&lt;p&gt;因此还需要关键的一步，利用objcopy去掉ELF中多余的东西(如comment 段，note 段，符号表)，进而生成boot.bin，Raw Binary文件。&lt;/p&gt;
&lt;p&gt;最后，利用&lt;code&gt;dd&lt;/code&gt;命令生成软盘镜像(实际就是个块文件？)&lt;/p&gt;
&lt;h4&gt;链接脚本&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;SECTIONS
&lt;span class="o"&gt;{&lt;/span&gt;
    . &lt;span class="o"&gt;=&lt;/span&gt; 0x0&lt;span class="p"&gt;;&lt;/span&gt;
    .text :
    &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;_ftext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; .&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 0
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;所有的东西都准备好之后，轻轻敲下&lt;code&gt;make&lt;/code&gt;，得到下面的结果：&lt;/p&gt;
&lt;p&gt;&lt;img alt="make" src="/assets/images/make.png" /&gt;&lt;/p&gt;
&lt;h4&gt;编写bochs配置文件&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;megs: 32
mouse: &lt;span class="nv"&gt;enabled&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;0

floppya: &lt;span class="nv"&gt;1_44&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;./boot.img, &lt;span class="nv"&gt;status&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;inserted
&lt;span class="c"&gt;# ata0-master: type=disk, path=&amp;quot;./c.img&amp;quot;, mode=flat, cylinders=20, heads=16, spt=63&lt;/span&gt;

log: bochsout.log

boot:floppy

&lt;span class="c"&gt;#display_library: sdl&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;运行命令&lt;code&gt;bochs -f bochsrc&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Hello OS World" src="/assets/images/hello_os_world.png" /&gt;&lt;/p&gt;</summary><category term="linux"></category><category term="bochs"></category><category term="os"></category></entry><entry><title>Trace Linux Kernel With Bochs(1)</title><link href="http://www.gotit.sinaapp.com/trace-linux-kernel-with-bochs1.html" rel="alternate"></link><updated>2014-03-03T00:00:00+08:00</updated><author><name>ictlxb</name></author><id>tag:www.gotit.sinaapp.com,2014-03-03:trace-linux-kernel-with-bochs1.html</id><summary type="html">&lt;div class="highlight"&gt;&lt;pre&gt;操作系统是一个神秘的东西，希望我和你都能因为这个博客对它有个一知半解。以下所写均是针对IA32进行的叙述,内核版本为0.11，如有错误，敬请指正。
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;BIOS--创世者的功劳&lt;/h2&gt;
&lt;h4&gt;简单的理解&lt;/h4&gt;
&lt;p&gt;BIOS(&lt;code&gt;Basic Input/Output System&lt;/code&gt;) 是大部分人都会说的一个词，说起它的作用，也都像我这样的菜鸟也知道它进行一些硬件的检查然后启动操作系统。&lt;/p&gt;
&lt;p&gt;至于它如何启动操作系统，就不太清楚了。最近总算又比原来多了点一知半解。&lt;/p&gt;
&lt;h4&gt;开机加电后的样子&lt;/h4&gt;
&lt;p&gt;当我们按下电源按键或复位(Reset)按键时，计算机通过硬件的逻辑强行将CS:IP置为&lt;code&gt;0xf000:fff0&lt;/code&gt;，&lt;/p&gt;
&lt;p&gt;除些之外，可以想到很多控制寄存器的值也被重置了，比如控制cpu运行在16位实模式下的寄存器位要置位等。&lt;/p&gt;
&lt;p&gt;这时的cpu工作在实模式下，所谓实模式是与保护模式对应的，也就是内存没有进行分页管理，页表、权限一类的东西都不存在。&lt;/p&gt;
&lt;p&gt;此时cpu字长是16，地址总线宽度为20。此时的cpu只能访问有限的1MB空间。&lt;/p&gt;
&lt;p&gt;而BIOS就被映射在这1MB空间的高地址的位置，当CS:IP被重置后，cpu开始执行BIOS中0xffff0位置的指令，这也是cpu执行的内存中的第一条指令。&lt;/p&gt;
&lt;h4&gt;“鸡生蛋，蛋生鸡”的解法&lt;/h4&gt;
&lt;p&gt;一般认为BIOS是一个&lt;code&gt;ROM&lt;/code&gt;，当它被映射到地址空间的高处时，cpu访问CS:IP指向的指令时，在cpu看来BIOS与内存，并没有区别。&lt;/p&gt;
&lt;p&gt;这就是创世者的功劳，解决了“鸡生蛋，蛋生鸡”的难题，也就是如何在掉电就丢失所有内容的内存(&lt;code&gt;RAM&lt;/code&gt;)中，在加电开后，有指令可以执行的问题。&lt;/p&gt;
&lt;p&gt;解决的思路异常简单，就是找一个掉电不丢失内容的“内存”，它就是BIOS。&lt;/p&gt;
&lt;h4&gt;BIOS的由来&lt;/h4&gt;
&lt;p&gt;当然，创世者并不是这么容易就当的，BIOS还有很多工作要做，至少它应该把真正的操作系统的代码(一部分），从硬盘(软盘)读到内存中(至于为什么一定要读到内存中，这怕是要归咎(归功)于冯.诺依曼了)。&lt;/p&gt;
&lt;p&gt;从外设中读写数据，BIOS应该是由此得名的。&lt;/p&gt;
&lt;p&gt;BIOS在1MB地址空间的从0开始的1KB空间中写入&lt;code&gt;中断向量表&lt;/code&gt;，并在其后的适当位置写入&lt;code&gt;中断服务程序&lt;/code&gt;，这样折腾的原因，无非是与cpu约定如此，否则也没必要在内存中搬来搬去（后面还可以看到这种情形）。&lt;/p&gt;
&lt;p&gt;有了中断，BIOS执行了&lt;code&gt;INT 0x19&lt;/code&gt;，将硬盘（软盘）的第一个扇区的512字节，读到&lt;code&gt;0x07c00&lt;/code&gt;位置上。并跳转到这里，开始执行操作系统的代码。&lt;/p&gt;
&lt;h2&gt;Bochs--虚拟的力量&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;bochs&lt;/code&gt;是一种x86虚拟机，用来调试操作系统是个不错的选择，与&lt;code&gt;qemu&lt;/code&gt;相比，它更小巧，同样也是开源免费，更多的内容可以到&lt;a href="http://en.wikipedia.org/wiki/Bochs"&gt;wikipedia&lt;/a&gt;去了解。&lt;/p&gt;
&lt;h4&gt;安装&lt;/h4&gt;
&lt;p&gt;对于ubuntu用户，直接使用&lt;code&gt;sudo apt-get install bochs&lt;/code&gt;即可完成安装，对于安装中出现的问题，google一下，大部分都能解决，不能解决的我也解决不了。。。&lt;/p&gt;
&lt;p&gt;这样安装虽然简单易用，但安装的bochs是不带debug功能的。&lt;/p&gt;
&lt;p&gt;所以我个人推荐下载源码自己编译安装，在&lt;a href="http://sourceforge.net/projects/bochs/files/bochs/"&gt;这里&lt;/a&gt;可以找到bochs的源码。我下载的是bochs-2.6.2.tar.gz，安装方法也很简单。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;解压源码包&lt;/p&gt;
&lt;p&gt;&lt;code&gt;tar -xzvf bochs-2.6.2.tar.gz&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;进入源码目录，定制&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cd bochs-2.6.2/;./configure --enable-debugger --enable-disam --with-all-libs&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;编译,安装&lt;/p&gt;
&lt;p&gt;&lt;code&gt;make &amp;amp;&amp;amp; sudo make install&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;运行&lt;/p&gt;
&lt;p&gt;&lt;code&gt;bochs&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;若出现如下内容说明安装成功：
    &lt;img alt="bochs运行" src="/assets/images/bochs-test.png" /&gt;&lt;/p&gt;</summary><category term="linux"></category><category term="bochs"></category><category term="os"></category></entry><entry><title>apt-get error</title><link href="http://www.gotit.sinaapp.com/apt-get-error.html" rel="alternate"></link><updated>2014-03-01T00:00:00+08:00</updated><author><name>ictlxb</name></author><id>tag:www.gotit.sinaapp.com,2014-03-01:apt-get-error.html</id><summary type="html">&lt;p&gt;今天在安装软件时遇到了apt-get发生的一些问题，导致无法安装成功，错误如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;E&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;Encountered&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;section&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;no&lt;/span&gt; &lt;span class="n"&gt;Package&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;header&lt;/span&gt; 
&lt;span class="n"&gt;E&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;Problem&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;MergeList&lt;/span&gt; &lt;span class="sr"&gt;/var/lib/apt/lists/&lt;/span&gt;&lt;span class="n"&gt;cn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;archive&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;ubuntu&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;com_ubuntu_dists_natty_main_binary&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;i386_Packages&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;解决方法如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo rm /var/lib/apt/lists/* -vf
sudo apt-get update
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;最后耐心等待即可。&lt;/p&gt;</summary><category term="ubuntu"></category><category term="linux"></category></entry><entry><title>Connect to vpn with ppp</title><link href="http://www.gotit.sinaapp.com/connect-to-vpn-with-ppp.html" rel="alternate"></link><updated>2014-03-01T00:00:00+08:00</updated><author><name>ictlxb</name></author><id>tag:www.gotit.sinaapp.com,2014-03-01:connect-to-vpn-with-ppp.html</id><summary type="html">&lt;div class="highlight"&gt;&lt;pre&gt;很多时候，我们都需要用VPN，当然如果你问我：“那是什么，能吃吗？”，如果你喜欢卖萌，那你可以选择继续看下去，如果你是认真的，最后也认真；google一下VPN是什么。
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;图形界面版&lt;/h2&gt;
&lt;p&gt;找到下面的界面，无脑配置即可，方便快捷。
    &lt;img alt="Network Manager VPN" src="/assets/images/network-manager-vpn.png" /&gt;&lt;/p&gt;
&lt;h2&gt;命令行版&lt;/h2&gt;
&lt;p&gt;使用pptp可以在linux下方便地连接到VPN,利用如下命令可以方便地创建VPN连接配置：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo pptpsetup --create VPN_NAME --server SERVER_IP --username NAME --password PASSWD --encrypt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后使用命令&lt;code&gt;sudo pon VPN_NAME&lt;/code&gt;或&lt;code&gt;sudo poff VPN_NAME&lt;/code&gt;来开启或关闭vpn连接&lt;/p&gt;
&lt;p&gt;利用命令&lt;code&gt;plog -f&lt;/code&gt;查看vpn连接情况&lt;/p&gt;
&lt;p&gt;vpn连接成功后，并不能直接使用，而是需要调整路由表，具体如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo route add -net NET_IP netmask NETMASK dev ppp0
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;更Geek点&lt;/h2&gt;
&lt;p&gt;参见&lt;a href="http://www.jiangmiao.org/blog/1914.html"&gt;Geek&lt;/a&gt;&lt;/p&gt;</summary><category term="linux"></category><category term="network"></category><category term="vpn"></category></entry><entry><title>Hello World</title><link href="http://www.gotit.sinaapp.com/hello-world.html" rel="alternate"></link><updated>2014-01-20T00:00:00+08:00</updated><author><name>ictlxb</name></author><id>tag:www.gotit.sinaapp.com,2014-01-20:hello-world.html</id><summary type="html">&lt;p&gt;Test without jekyll installed &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Hello World!&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="C/CPP"></category></entry></feed>