<!DOCTYPE html>
<html lang="zh-cn">
<head>
    <meta charset="utf-8">
    <title>BLxG</title>
    <meta name="author" content="ictlxb">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <meta property="wb:webmaster" content="35e06a32947da88a" />

    <meta name="description" content="Programming and Life -- http://www.gotit.sinaapp.com">
    <meta name="keywords" content="算法,软件开发,Algorithm,C++,Coding,Debug,Google,Linux,,OS,,Programmer,programming,language,Python,Ubuntu,Unix,vim">

    <!-- Le HTML5 shim, for IE6-8 support of HTML elements -->
    <!--[if lt IE 9]>
    <script src="./theme/html5.js"></script>
    <![endif]-->
    <link rel="shortcut icon" href="./theme/images/icons/favicon.ico"/>
    <link rel="bookmark" href="./theme/images/icons/favicon.ico"/>
    <!-- Le styles -->
    <link href="./theme/bootstrap.min.css" rel="stylesheet">
    <link href="./theme/bootstrap.min.responsive.css" rel="stylesheet">
    <link href="./theme/local.css" rel="stylesheet">
    <link href="./theme/pygments.css" rel="stylesheet">

    <!-- So Firefox can bookmark->"abo this site" -->
        <link href="http://gotit.applinzi.com/feeds/all.atom.xml" rel="alternate" title="BLxG" type="application/atom+xml">

</head>

<body>

<div class="navbar">
    <div class="navbar-inner">
    <div class="container">

         <a class="btn btn-navbar" data-toggle="collapse" data-target=".nav-collapse">
             <span class="icon-bar"></span>
             <span class="icon-bar"></span>
             <span class="icon-bar"></span>
         </a>

        <a class="brand" href=".">BLxG</a>

        <div class="nav-collapse">
        <ul class="nav">
            
            <li><a href="./pages/about.html">About</a></li>
        </ul>
        </div>
        
    </div>
    </div>
</div>

<div class="container">
    <div class="content">
    <div class="row">

        <div class="span9">
        

        


    <div class='article'>
        <div class="content-title">
            <a href="./offershou-ge-bian-cheng-lian-xi-sai-4ti-jie.html"><h1>[Offer收割]编程练习赛4题解</h1></a>
Mon 08 August 2016

by <a class="url fn" href="./author/ictlxb.html">ictlxb</a>
 

Filed under <a href="./category/ccpp.html">C/CPP</a>

 
    Tags <a href="./tag/cpp.html">cpp</a> <a href="./tag/algorithm.html">algorithm</a> <a href="./tag/hihocoder.html">hihocoder</a> <a href="./tag/spfa.html">spfa</a>  
        </div>
        
        <div><blockquote>
<p>If all you have is a hammer, everything looks like a nail.  ---Maslow</p>
</blockquote>
<h2>A.满减优惠</h2>
<h3>问题</h3>
<p>时间限制:10000ms
单点时限:1000ms
内存限制:256MB</p>
<h4>描述</h4>
<p>最近天气炎热，小Ho天天宅在家里叫外卖。他常吃的一家餐馆一共有N道菜品，价格分别是A1, A2, ... AN元。并且如果消费总计满X元，还能享受优惠。小Ho是一个不薅羊毛不舒服斯基的人，他希望选择若干道不同的菜品，使得总价在不低于X元的同时尽量低。</p>
<p>你能算出这一餐小Ho最少消费多少元吗？</p>
<h4>输入</h4>
<p>第一行包含两个整数N和X，(1 &lt;= N &lt;= 20, 1 &lt;= X &lt;= 100)</p>
<p>第二行包含N个整数A1, A2, ...， AN。(1 &lt;= Ai &lt;= 100)</p>
<h4>输出</h4>
<p>输出最少的消费。如果小Ho把N道菜都买了还不能达到X元的优惠标准，输出-1。</p>
<p>样例输入</p>
<div class="highlight"><pre>10 50
9 9 9 9 9 9 9 9 9 8
</pre></div>


<p>样例输出</p>
<div class="highlight"><pre>53
</pre></div>


<h3>分析</h3>
<p>题目简单理解起来就是，从数组中选出若干个数，使得这些数的和大于X，并且尽可能的小。</p>
<p>根据数据范围的限制，数组中最多只有20个数，所有这些和的数量为1^20个。数据量并不大。</p>
<p>暴力应该可以搞定：枚举数的所有数的组合情况，使用int32_t表示每个数的选择情况，int32_t的第i位表示数组中下标为i的数是否选中。</p>
<h3>AC程序</h3>
<p>下面是C++实现的完整代码：</p>
<div class="highlight"><pre><span class="cp">#include &lt;iostream&gt;</span>
<span class="cp">#include &lt;vector&gt;</span>

<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">n</span> <span class="o">&gt;&gt;</span> <span class="n">x</span><span class="p">;</span>
    <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">nums</span><span class="p">(</span><span class="n">n</span><span class="p">);</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
        <span class="n">sum</span> <span class="o">+=</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
    <span class="p">}</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">sum</span> <span class="o">&lt;</span> <span class="n">x</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="o">-</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="kt">int</span> <span class="n">ret</span> <span class="o">=</span> <span class="n">sum</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="n">iend</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">iend</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">ret</span> <span class="o">==</span> <span class="n">x</span><span class="p">)</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">cur</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="o">++</span><span class="n">j</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(((</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="n">j</span><span class="p">)</span> <span class="o">&amp;</span> <span class="n">i</span><span class="p">))</span> <span class="c1">// select jth number from nums</span>
                <span class="n">cur</span> <span class="o">+=</span> <span class="n">nums</span><span class="p">[</span><span class="n">j</span><span class="p">];</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">cur</span> <span class="o">&gt;=</span> <span class="n">x</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// because there is no negative number in nums</span>
                <span class="k">break</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="c1">// update minimum value greater than x</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">cur</span> <span class="o">&gt;=</span> <span class="n">x</span> <span class="o">&amp;&amp;</span> <span class="n">cur</span> <span class="o">&lt;</span> <span class="n">ret</span><span class="p">)</span>
            <span class="n">ret</span> <span class="o">=</span> <span class="n">cur</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">ret</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>


<hr />
<h2>B. 积水的城市</h2>
<h3>问题</h3>
<p>时间限制:11000ms
单点时限:1000ms
内存限制:256MB</p>
<h4>描述</h4>
<p>如下图所示，某市市区由M条南北向的大街和N条东西向的道路组成。其中由北向南第i条路和第i+1条路之间的距离是Bi (1 &lt;= i &lht; N)，由西向东第i条街和第i+1条街之间的距离是Ai (1 &lt;= i &lt; M)。</p>
<p><img alt="drown" src="/assets/images/drown.png" /></p>
<p>小Ho现在位于第x条路和第y条街的交叉口，他的目的地是第p条路和第q条街的交叉口。由于连日降雨，城市中有K个交叉口积水太深不能通行。小Ho想知道到达目的地的最短路径的长度是多少。</p>
<h4>输入</h4>
<p>第一行包含两个整数N和M。(1 &lt;= N, M &lt;= 500)  </p>
<p>第二行包含N-1个整数, B1, B2, B3, ... BN-1。(1 &lt;= Bi &lt;= 100)  </p>
<p>第三行包含M-1个整数, A1, A2, A3, ... AM-1。(1 &lt;= Ai &lt;= 100)  </p>
<p>第四行包含一个整数K，表示积水的交叉口的数目。 (0 &lt;= K &lt;= 30)  </p>
<p>以下K行每行包含2个整数，X和Y，表示第X条路和第Y条街的交叉口积水。(1 &lt;= X &lt;= N, 1 &lt;= Y &lt;= M)  </p>
<p>第K+5行包含一个整数Q，表示询问的数目。 (1 &lt;= Q &lt;= 10)  </p>
<p>以下Q行每行包含4个整数x, y, p, q，表示小Ho的起止点。起止点保证不在积水的交叉口处。  (1 &lt;= x, p &lt;= N, 1 &lt;= y, q &lt;= M)</p>
<h4>输出</h4>
<p>对于每组询问，输出最短路的长度。如果小Ho不能到达目的地，输出-1。</p>
<p>样例输入</p>
<div class="highlight"><pre>4 5  
2 4 1  
3 3 3 2  
3  
1 3  
2 3  
3 2  
1  
1 2 2 4
</pre></div>


<p>样例输出</p>
<div class="highlight"><pre>24
</pre></div>


<h3>分析</h3>
<p>有障碍的最短路径问题，对于无权的格子问题，只需要利用BFS探索即可。本题中“路”和“街”的长度可能不同，因此，利用SPFA算法。
也就是在BFS的基础上，记录源点到其它每个点的距离，当新探索出的路径长度更小时，更新记录，并将当前状态入栈。
当遇到“积水”的路口时，直接丢弃该状态即可表示不能通过本路口。</p>
<h3>AC程序</h3>
<div class="highlight"><pre><span class="cp">#include &lt;iostream&gt;</span>
<span class="cp">#include &lt;cstring&gt;</span>
<span class="cp">#include &lt;set&gt;</span>
<span class="cp">#include &lt;queue&gt;</span>
<span class="cp">#include &lt;utility&gt;</span>

<span class="cp">#define N 501</span>
<span class="cp">#define M 501</span>
<span class="cp">#define UDF 0x3f3f3f3f</span>

<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="kt">int</span> <span class="n">A</span><span class="p">[</span><span class="n">M</span><span class="p">];</span>
<span class="kt">int</span> <span class="n">B</span><span class="p">[</span><span class="n">N</span><span class="p">];</span>
<span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="n">m</span><span class="p">;</span>
<span class="n">set</span><span class="o">&lt;</span><span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="n">dead</span><span class="p">;</span>

<span class="k">struct</span> <span class="n">Status</span><span class="p">{</span>
    <span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">d</span><span class="p">;</span>
    <span class="n">Status</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">b</span><span class="p">,</span> <span class="kt">int</span> <span class="n">c</span><span class="p">)</span> <span class="o">:</span> <span class="n">x</span><span class="p">(</span><span class="n">a</span><span class="p">),</span> <span class="n">y</span><span class="p">(</span><span class="n">b</span><span class="p">),</span> <span class="n">d</span><span class="p">(</span><span class="n">c</span><span class="p">)</span> <span class="p">{}</span>
<span class="p">};</span>

<span class="kt">int</span> <span class="n">visit</span><span class="p">[</span><span class="n">N</span><span class="p">][</span><span class="n">M</span><span class="p">];</span>

<span class="kt">int</span> <span class="nf">solve</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">y</span><span class="p">,</span> <span class="kt">int</span> <span class="n">p</span><span class="p">,</span> <span class="kt">int</span> <span class="n">q</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">static</span> <span class="kt">int</span> <span class="n">dx</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">};</span>
    <span class="k">static</span> <span class="kt">int</span> <span class="n">dy</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">};</span>

    <span class="n">queue</span><span class="o">&lt;</span><span class="n">Status</span><span class="o">&gt;</span> <span class="n">sq</span><span class="p">;</span>
    <span class="n">sq</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">Status</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="mi">0</span><span class="p">));</span>
    <span class="n">visit</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="n">sq</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span> <span class="p">{</span>
        <span class="kt">int</span> <span class="n">cx</span> <span class="o">=</span> <span class="n">sq</span><span class="p">.</span><span class="n">front</span><span class="p">().</span><span class="n">x</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">cy</span> <span class="o">=</span> <span class="n">sq</span><span class="p">.</span><span class="n">front</span><span class="p">().</span><span class="n">y</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">cd</span> <span class="o">=</span> <span class="n">sq</span><span class="p">.</span><span class="n">front</span><span class="p">().</span><span class="n">d</span><span class="p">;</span>
        <span class="n">sq</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
        <span class="c1">// explore 4 directions</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">4</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
            <span class="kt">int</span> <span class="n">nx</span> <span class="o">=</span> <span class="n">cx</span> <span class="o">+</span> <span class="n">dx</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
            <span class="kt">int</span> <span class="n">ny</span> <span class="o">=</span> <span class="n">cy</span> <span class="o">+</span> <span class="n">dy</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
            <span class="c1">// skip invalid coordinates and water crossing</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">nx</span> <span class="o">&lt;=</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">ny</span> <span class="o">&lt;=</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">nx</span> <span class="o">&gt;</span> <span class="n">n</span> <span class="o">||</span> <span class="n">ny</span> <span class="o">&gt;</span> <span class="n">m</span> <span class="o">||</span> <span class="n">dead</span><span class="p">.</span><span class="n">find</span><span class="p">(</span><span class="n">make_pair</span><span class="p">(</span><span class="n">nx</span><span class="p">,</span> <span class="n">ny</span><span class="p">))</span> <span class="o">!=</span> <span class="n">dead</span><span class="p">.</span><span class="n">end</span><span class="p">())</span>
                <span class="k">continue</span><span class="p">;</span>
            <span class="kt">int</span> <span class="n">nd</span> <span class="o">=</span> <span class="n">dx</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">?</span> <span class="n">cd</span> <span class="o">+</span> <span class="n">A</span><span class="p">[</span><span class="n">min</span><span class="p">(</span><span class="n">cy</span><span class="p">,</span> <span class="n">ny</span><span class="p">)]</span> <span class="o">:</span> <span class="n">cd</span> <span class="o">+</span> <span class="n">B</span><span class="p">[</span><span class="n">min</span><span class="p">(</span><span class="n">cx</span><span class="p">,</span> <span class="n">nx</span><span class="p">)];</span>
            <span class="c1">// skip longer path</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">visit</span><span class="p">[</span><span class="n">nx</span><span class="p">][</span><span class="n">ny</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="n">nd</span><span class="p">)</span>
                <span class="k">continue</span><span class="p">;</span>
            <span class="c1">// skip the destination itself</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">nx</span> <span class="o">!=</span> <span class="n">p</span> <span class="o">||</span> <span class="n">ny</span> <span class="o">!=</span> <span class="n">q</span><span class="p">)</span>
                <span class="n">sq</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">Status</span><span class="p">(</span><span class="n">nx</span><span class="p">,</span> <span class="n">ny</span><span class="p">,</span> <span class="n">nd</span><span class="p">));</span>
            <span class="n">visit</span><span class="p">[</span><span class="n">nx</span><span class="p">][</span><span class="n">ny</span><span class="p">]</span> <span class="o">=</span> <span class="n">nd</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">visit</span><span class="p">[</span><span class="n">p</span><span class="p">][</span><span class="n">q</span><span class="p">]</span> <span class="o">==</span> <span class="n">UDF</span> <span class="o">?</span> <span class="o">-</span><span class="mi">1</span> <span class="o">:</span> <span class="n">visit</span><span class="p">[</span><span class="n">p</span><span class="p">][</span><span class="n">q</span><span class="p">];</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">n</span> <span class="o">&gt;&gt;</span> <span class="n">m</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
        <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">B</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">m</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
        <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">A</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
    <span class="kt">int</span> <span class="n">k</span><span class="p">;</span>
    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">k</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">k</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">;</span>
        <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">x</span> <span class="o">&gt;&gt;</span> <span class="n">y</span><span class="p">;</span>
        <span class="n">dead</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="n">make_pair</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">));</span>
    <span class="p">}</span>
    <span class="kt">int</span> <span class="n">t</span><span class="p">;</span>
    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">t</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">t</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">q</span><span class="p">;</span>
        <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">x</span> <span class="o">&gt;&gt;</span> <span class="n">y</span> <span class="o">&gt;&gt;</span> <span class="n">p</span> <span class="o">&gt;&gt;</span> <span class="n">q</span><span class="p">;</span>
        <span class="n">memset</span><span class="p">(</span><span class="n">visit</span><span class="p">,</span> <span class="n">UDF</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">visit</span><span class="p">));</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">solve</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">q</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>


<hr />
<h2>C. 罚抄一百遍</h2>
<h3>问题</h3>
<p>时间限制:10000ms
单点时限:1000ms
内存限制:256MB</p>
<h4>描述</h4>
<p>小Ho忘了做英语作业，被老师罚抄某段文本N遍。抄写用的作业纸每行包含M个格子，每个格子恰好能填写一个字符或者空格。抄写过程中单词不能跨行，如果某行剩余的格子不足以写完一个单词，那么这个单词需要写在下一行。单词间的空格不能省略。</p>
<p>例如在M=9的作业纸上写2遍"Good good study day day up"：</p>
<div class="highlight"><pre>123456789
Good good
study   
day day   
up Good  
good     
study day
day up
</pre></div>


<p>小Ho想知道当他抄写完N遍以后，最后一个字符在第几行、第几列。</p>
<h4>输入</h4>
<p>第一行包含两个整数N和M。  </p>
<p>第二行包含要抄写的文本。文本只包含大小字母和空格，并且单词之间只有一个空格。</p>
<p>对于40%的数据，1 &lt;= N, M &lt;= 1000  </p>
<p>对于100%的数据，1 &lt;= N, M &lt;= 1000000000, M &gt;= 文本中最长的单词的长度，文本长度不超过100个字符。</p>
<h4>输出</h4>
<p>最后一个字符的行号和列号。</p>
<p>样例输入</p>
<div class="highlight"><pre>2 9
Good good study day day up
</pre></div>


<p>样例输出</p>
<div class="highlight"><pre>7 7
</pre></div>


<h3>分析</h3>
<p>根据题意的描述，可知当抄写的次数足够多时，必须存在循环节，也就是当抄写次数足够多时，必然存在i,
j，使得第i次抄写和第j次抄写开始的列数相同。寻找循环节的方法也很简单，只需要用Hash表记录，每次抄写时开始的行数x,列数y即可。</p>
<p>由于题目要求每两个单词之间必须存在一个空格，第二遍抄写的第一个单词与第一遍的最后一个单词之间，也要存在一个空格。
所以我们可以把要抄写的字符串前加上一个空格，以方便处理。那么此时，第一遍抄写时开始的行x=1，列y=-1。</p>
<p>当我们利用Hash表找到循环节后，即可以跳过中间重复的模拟过程。</p>
<p>此外，要小心行数x溢出int32_t表示范围。</p>
<h3>AC程序</h3>
<div class="highlight"><pre><span class="cp">#include &lt;iostream&gt;</span>
<span class="cp">#include &lt;unordered_map&gt;</span>
<span class="cp">#include &lt;vector&gt;</span>

<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="c1">// copy n times starting at (x, y)</span>
<span class="kt">void</span> <span class="nf">ncopy</span><span class="p">(</span><span class="k">const</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">nums</span><span class="p">,</span> <span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="kt">int</span> <span class="n">m</span><span class="p">,</span> <span class="kt">long</span> <span class="kt">long</span> <span class="o">&amp;</span><span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="o">&amp;</span><span class="n">y</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">for</span> <span class="p">(</span><span class="k">auto</span> <span class="nl">num</span> <span class="p">:</span> <span class="n">nums</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">y</span> <span class="o">==</span> <span class="n">m</span><span class="p">)</span>
                <span class="n">y</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="o">++</span><span class="n">x</span><span class="p">;</span>
            <span class="o">++</span><span class="n">y</span><span class="p">;</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">y</span> <span class="o">+</span> <span class="n">num</span> <span class="o">&gt;</span> <span class="n">m</span><span class="p">)</span>
                <span class="n">y</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="o">++</span><span class="n">x</span><span class="p">;</span>
            <span class="n">y</span> <span class="o">+=</span> <span class="n">num</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="n">m</span><span class="p">;</span>
    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">n</span> <span class="o">&gt;&gt;</span> <span class="n">m</span><span class="p">;</span>
    <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">nums</span><span class="p">;</span>
    <span class="n">string</span> <span class="n">s</span><span class="p">;</span>
    <span class="k">while</span><span class="p">(</span><span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">s</span><span class="p">)</span>
        <span class="n">nums</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">s</span><span class="p">.</span><span class="n">size</span><span class="p">());</span>

    <span class="c1">// record nth copy starting at (x, y) =&gt; dict[y] = make_pair(n, x)</span>
    <span class="n">unordered_map</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">long</span> <span class="kt">long</span><span class="o">&gt;&gt;</span> <span class="n">dict</span><span class="p">;</span>
    <span class="kt">long</span> <span class="kt">long</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">y</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">n</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">ncopy</span><span class="p">(</span><span class="n">nums</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">m</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">);</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">dict</span><span class="p">.</span><span class="n">find</span><span class="p">(</span><span class="n">y</span><span class="p">)</span> <span class="o">!=</span> <span class="n">dict</span><span class="p">.</span><span class="n">end</span><span class="p">())</span> <span class="p">{</span> <span class="c1">// find the repetend</span>
            <span class="c1">// fast forward to skip the repetend</span>
            <span class="kt">long</span> <span class="kt">long</span> <span class="n">remain</span> <span class="o">=</span> <span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="n">i</span><span class="p">)</span> <span class="o">%</span> <span class="p">(</span><span class="n">i</span> <span class="o">-</span> <span class="n">dict</span><span class="p">[</span><span class="n">y</span><span class="p">].</span><span class="n">first</span><span class="p">);</span> 
            <span class="c1">// add x by repetend&#39;s rows</span>
            <span class="n">x</span> <span class="o">+=</span> <span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="n">i</span><span class="p">)</span> <span class="o">/</span> <span class="p">(</span><span class="n">i</span> <span class="o">-</span> <span class="n">dict</span><span class="p">[</span><span class="n">y</span><span class="p">].</span><span class="n">first</span><span class="p">)</span> <span class="o">*</span> <span class="p">(</span><span class="n">x</span> <span class="o">-</span> <span class="n">dict</span><span class="p">[</span><span class="n">y</span><span class="p">].</span><span class="n">second</span><span class="p">);</span>
            <span class="c1">// copy the reset times</span>
            <span class="n">ncopy</span><span class="p">(</span><span class="n">nums</span><span class="p">,</span> <span class="n">remain</span><span class="p">,</span> <span class="n">m</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">);</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="c1">// record ith copy starting at (x, y)</span>
        <span class="n">dict</span><span class="p">.</span><span class="n">emplace</span><span class="p">(</span><span class="n">y</span><span class="p">,</span> <span class="n">make_pair</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">x</span><span class="p">));</span>
    <span class="p">}</span>

    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">x</span> <span class="o">&lt;&lt;</span> <span class="sc">&#39; &#39;</span> <span class="o">&lt;&lt;</span> <span class="n">y</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>


<hr />
<h2>D. 分隔相同整数</h2>
<h3>问题</h3>
<p>时间限制:10000ms
单点时限:1000ms
内存限制:256MB</p>
<h4>描述</h4>
<p>给定一个包含N个整数的数组A。你的任务是将A重新排列，使得任意两个相等的整数在数组中都不相邻。  </p>
<p>如果存在多个重排后的数组满足条件，输出字典序最小的数组。  </p>
<p>这里字典序最小指：首先尽量使第一个整数最小，其次使第二个整数最小，以此类推。</p>
<h4>输入</h4>
<p>第一行包含一个整数N，表示数组的长度。(1 &lt;= N &lt;= 100000)  </p>
<p>第二行包含N个整数，依次是 A1, A2, ... AN。(1 &lt;= Ai &lt;= 1000000000)</p>
<h4>输出</h4>
<p>输出字典序最小的重排数组。如果这样的数组不存在，输出-1。</p>
<p>样例输入</p>
<div class="highlight"><pre>4  
2 1 3 3
</pre></div>


<p>样例输出</p>
<div class="highlight"><pre>1 3 2 3
</pre></div>


<h3>分析</h3>
<p>将一个由长度为n(n&gt;1)同一字母组成的字符串分隔开，显然需要n-1个其它字符。
由此，我们可以统计，输入字符串的每个数字出现的次数Bi，我们可以按照如下规则排列数字：</p>
<ol>
<li>若出现最多的数字x的次数为Bx，则分隔x至少需要Bx-1个数字，若Bx + Bx - 1 &lt;
   N，说明还有充足的字符可以分隔x，故输出与前次输出不同的最小数字即可;</li>
<li>否则，说明此时必须输出x，因为，分隔x的字符即将不足。此时，若x与前次输出数字相同，则无解。</li>
</ol>
<p>因此，我们可以利用Hash表，统计各数字出现的次数，将利用二叉查找树，得到次数最多的数字。
此处，不使用大根堆的原因是，当输出的数字不是次数最多的数字，即输出的数字不是大根堆的堆顶元素，
此时，更新相应元素的次数后，需要调整堆，以满足大根堆的性质，这个操作比较麻烦。</p>
<h3>AC程序</h3>
<div class="highlight"><pre><span class="cp">#include &lt;iostream&gt;</span>
<span class="cp">#include &lt;algorithm&gt;</span>
<span class="cp">#include &lt;map&gt;</span>
<span class="cp">#include &lt;set&gt;</span>
<span class="cp">#include &lt;vector&gt;</span>
<span class="cp">#include &lt;queue&gt;</span>
<span class="cp">#include &lt;cassert&gt;</span>

<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="kt">bool</span> <span class="nf">solve</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">s</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">map</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;</span> <span class="n">dict</span><span class="p">;</span>
    <span class="c1">// count every number&#39;s times</span>
    <span class="k">for</span> <span class="p">(</span><span class="k">auto</span> <span class="nl">c</span> <span class="p">:</span> <span class="n">s</span><span class="p">)</span>
        <span class="o">++</span><span class="n">dict</span><span class="p">[</span><span class="n">c</span><span class="p">];</span>
    <span class="n">set</span><span class="o">&lt;</span><span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="n">heap</span><span class="p">;</span>
    <span class="c1">// use black-red tree simulate heap</span>
    <span class="k">for</span> <span class="p">(</span><span class="k">auto</span> <span class="nl">d</span> <span class="p">:</span> <span class="n">dict</span><span class="p">)</span>
        <span class="n">heap</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="n">make_pair</span><span class="p">(</span><span class="n">d</span><span class="p">.</span><span class="n">second</span><span class="p">,</span> <span class="n">d</span><span class="p">.</span><span class="n">first</span><span class="p">));</span>
    <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;::</span><span class="n">size_type</span> <span class="n">size</span> <span class="o">=</span> <span class="n">s</span><span class="p">.</span><span class="n">size</span><span class="p">(),</span> <span class="n">idx</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">last</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
    <span class="k">while</span> <span class="p">(</span><span class="n">size</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">auto</span> <span class="n">iter</span> <span class="o">=</span> <span class="n">dict</span><span class="p">.</span><span class="n">find</span><span class="p">(</span><span class="n">heap</span><span class="p">.</span><span class="n">rbegin</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">second</span><span class="p">);</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">size</span><span class="o">/</span><span class="mi">2</span> <span class="o">&lt;</span> <span class="n">iter</span><span class="o">-&gt;</span><span class="n">second</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// rule 2</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">last</span> <span class="o">==</span> <span class="n">iter</span><span class="o">-&gt;</span><span class="n">first</span><span class="p">)</span> <span class="c1">// fail to rearrange</span>
                <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span> <span class="c1">// rule 1</span>
            <span class="n">iter</span> <span class="o">=</span> <span class="n">dict</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">iter</span><span class="o">-&gt;</span><span class="n">first</span> <span class="o">==</span> <span class="n">last</span><span class="p">)</span>
                <span class="o">++</span><span class="n">iter</span><span class="p">;</span>
            <span class="n">assert</span><span class="p">(</span><span class="n">iter</span> <span class="o">!=</span> <span class="n">dict</span><span class="p">.</span><span class="n">end</span><span class="p">());</span>
        <span class="p">}</span>
        <span class="c1">// output a number</span>
        <span class="n">s</span><span class="p">[</span><span class="n">idx</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">iter</span><span class="o">-&gt;</span><span class="n">first</span><span class="p">;</span>
        <span class="c1">// update heap</span>
        <span class="n">heap</span><span class="p">.</span><span class="n">erase</span><span class="p">(</span><span class="n">make_pair</span><span class="p">(</span><span class="n">iter</span><span class="o">-&gt;</span><span class="n">second</span><span class="p">,</span> <span class="n">iter</span><span class="o">-&gt;</span><span class="n">first</span><span class="p">));</span>
        <span class="n">iter</span><span class="o">-&gt;</span><span class="n">second</span> <span class="o">-=</span> <span class="mi">1</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">iter</span><span class="o">-&gt;</span><span class="n">second</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
            <span class="n">dict</span><span class="p">.</span><span class="n">erase</span><span class="p">(</span><span class="n">iter</span><span class="p">);</span>
        <span class="k">else</span>
            <span class="n">heap</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="n">make_pair</span><span class="p">(</span><span class="n">iter</span><span class="o">-&gt;</span><span class="n">second</span><span class="p">,</span> <span class="n">iter</span><span class="o">-&gt;</span><span class="n">first</span><span class="p">));</span>
        <span class="n">last</span> <span class="o">=</span> <span class="n">s</span><span class="p">[</span><span class="n">idx</span><span class="o">-</span><span class="mi">1</span><span class="p">];</span>
        <span class="o">--</span><span class="n">size</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">n</span><span class="p">;</span>
    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">n</span><span class="p">;</span>
    <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">nums</span><span class="p">(</span><span class="n">n</span><span class="p">);</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
        <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">solve</span><span class="p">(</span><span class="n">nums</span><span class="p">))</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="o">-</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="k">else</span> <span class="p">{</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">nums</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="sc">&#39; &#39;</span> <span class="o">&lt;&lt;</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>


<p>更多AC程序欢迎follow我的<a href="https://github.com/buptlxb/hihoCoder">github</a></p>
<p>（全文完）</p>
<p>（转载本站文章请注明作者和出处，请勿用于任何商业用途）</p></div>
        <hr />
    </div>
		

 
        

 

    <div class='article'>
        <a href="./hihocodertai-ge-zui-xin-mian-jing-suan-fa-jing-sai-4.html"><h2>hihoCoder太阁最新面经算法竞赛4</h2></a>
        <div class= "well small"> Wed 15 June 2016

by <a class="url fn" href="./author/ictlxb.html">ictlxb</a>
 

Filed under <a href="./category/ccpp.html">C/CPP</a>

 
    Tags <a href="./tag/cpp.html">cpp</a> <a href="./tag/algorithm.html">algorithm</a> <a href="./tag/hihocoder.html">hihocoder</a>  </div>
        <div class="summary"><blockquote>
<p>If all you have is a hammer, everything looks like a nail.  ---Maslow</p>
</blockquote>
<h2>树结构判定</h2>
<h3>问题</h3>
<p>时间限制:10000ms
单点时限:1000ms
内存限制:256MB</p>
<h4>描述</h4>
<p>给定一个包含 N 个顶点 M 条边的无向图 G ，判断 G 是不是一棵树。</p>
<h4>输入</h4>
<p>第一个是一个整数 T ，代表测试数据的组数。 (1 ≤ T ≤ 10)</p>
<p>每组测试数据第一行包含两个整数 N 和 M 。(2 ≤ N ≤ 500, 1 ≤ M ≤ 100000)</p>
<p>以下 M ...</p> <a class="btn btn-info xsmall" href="./hihocodertai-ge-zui-xin-mian-jing-suan-fa-jing-sai-4.html">read more</a></div>
    </div>	
				

 
        

 

    <div class='article'>
        <a href="./xian-duan-shu.html"><h2>线段树</h2></a>
        <div class= "well small"> Fri 13 May 2016

by <a class="url fn" href="./author/ictlxb.html">ictlxb</a>
 

Filed under <a href="./category/ccpp.html">C/CPP</a>

 
    Tags <a href="./tag/cpp.html">cpp</a> <a href="./tag/algorithm.html">algorithm</a> <a href="./tag/segment-tree.html">segment tree</a>  </div>
        <div class="summary"><blockquote>
<p>One thing I know is that I know nothing. ---Socrates</p>
</blockquote>
<h2>What is that?</h2>
<p>线段树是一种二叉搜索树，它的每一个节点表示一段区间，节点[a, b]的左子树表示的区间是[a, (a+b)/2]，而其右节点表示的区间为[(a+b)/2+1, b]。利用数组可以很好的表示一棵线段树，对于表示区间[1, n]的线段树所需要的数组大小大概为<strong>4n</strong>。</p>
<h2>Why should I care?</h2>
<p>线段树对于解决一些区间更新、查询的问题非常有效。</p>
<p>通常情况下，其具有O(logn)的更新和查询时间复杂度。
线段树可以解决RMQ（Range Maximum/Minimum
Query ...</p> <a class="btn btn-info xsmall" href="./xian-duan-shu.html">read more</a></div>
    </div>	
				

 
        

 

    <div class='article'>
        <a href="./cheng-xu-yuan-de-mo-yun-suan.html"><h2>程序员的模运算</h2></a>
        <div class= "well small"> Fri 22 April 2016

by <a class="url fn" href="./author/ictlxb.html">ictlxb</a>
 

Filed under <a href="./category/ccpp.html">C/CPP</a>

 
    Tags <a href="./tag/cpp.html">cpp</a> <a href="./tag/algorithm.html">algorithm</a> <a href="./tag/hihocoder.html">hihocoder</a>  </div>
        <div class="summary"><blockquote>
<p>One thing I know is that I know nothing.  ---Socrates</p>
</blockquote>
<h2>What is that?</h2>
<p>求模运算是程序员的常用操作，C/CPP中使用<code>%</code>进行运算。程序员的描述通常是对于整数<code>a</code>和<code>b</code>，<code>a %
b</code>表示a除以b后，除不尽的那部分。（好吧，不是程序员，这是我的常用描述，小学水平。。。）</p>
<p><code>3 % 2 = 1</code>, <code>6 % 10 = 6</code>这东西很难吗？</p>
<h2>Why should I care?</h2>
<p>有些时候还是有点麻烦的：</p>
<ol>
<li><span id='p1'> <code>-1 % 2 = ???</code> </span></li>
<li><span id='p2'> <code>2 % -1 = ???</code> </span></li>
<li><span id='p3'> <code>(a * b) % c =? (a%c ...</code></span></li></ol> <a class="btn btn-info xsmall" href="./cheng-xu-yuan-de-mo-yun-suan.html">read more</a></div>
    </div>	
				

 
        

 

    <div class='article'>
        <a href="./wei-ruan-2016xiao-yuan-zhao-pin-4yue-zai-xian-bi-shi-ti-jie-si.html"><h2>微软2016校园招聘4月在线笔试题解(四)</h2></a>
        <div class= "well small"> Sat 09 April 2016

by <a class="url fn" href="./author/ictlxb.html">ictlxb</a>
 

Filed under <a href="./category/ccpp.html">C/CPP</a>

 
    Tags <a href="./tag/cpp.html">cpp</a> <a href="./tag/algorithm.html">algorithm</a> <a href="./tag/hihocoder.html">hihocoder</a>  </div>
        <div class="summary"><blockquote>
<p>If all you have is a hammer, everything looks like a nail.  ---Maslow</p>
</blockquote>
<h2>D. Buiding in Sandbox</h2>
<h3>Problem</h3>
<p>时间限制:30000ms
单点时限:3000ms
内存限制:256MB</p>
<h4>描述</h4>
<p>Little Hi is playing a sandbox voxel game. In the game the whole world is constructed by massive 1x1x1 cubes. The edges of cubes are ...</p> <a class="btn btn-info xsmall" href="./wei-ruan-2016xiao-yuan-zhao-pin-4yue-zai-xian-bi-shi-ti-jie-si.html">read more</a></div>
    </div>	
				
<div class="pagination">
<ul>
    <li class="prev disabled"><a href="#">&larr; Previous</a></li>

    <li class="active"><a href="./index.html">1</a></li>
    <li class=""><a href="./index2.html">2</a></li>
    <li class=""><a href="./index3.html">3</a></li>
    <li class=""><a href="./index4.html">4</a></li>
    <li class=""><a href="./index5.html">5</a></li>
    <li class=""><a href="./index6.html">6</a></li>
    <li class=""><a href="./index7.html">7</a></li>

    <li class="next"><a href="./index2.html">Next &rarr;</a></li>

</ul>
</div>
 
  
        </div>
        
        <div class="span3">

            <div class="well" style="padding: 8px 0; background-color: #FBFBFB;">
            <ul class="nav nav-list">
                <li class="nav-header"> 
                Site
                </li>
            
                <li><a href="./archives.html">Archives</a>
                <li><a href="./tags.html">Tags</a>



                <li><a href="http://gotit.applinzi.com/feeds/all.atom.xml" rel="alternate">Atom feed</a></li>

            </ul>
            </div>


            <div class="well" style="padding: 8px 0; background-color: #FBFBFB;">
            <ul class="nav nav-list">
                <li class="nav-header"> 
                Categories
                </li>
                
                <li><a href="./category/ccpp.html">C/CPP</a></li>
                <li><a href="./category/english.html">English</a></li>
                <li><a href="./category/linux.html">Linux</a></li>
                <li><a href="./category/security.html">Security</a></li>
                   
            </ul>
            </div>


            <div class="well" style="padding: 8px 0; background-color: #FBFBFB;">
            <ul class="nav nav-list">
                <li class="nav-header"> 
                Links
                </li>
            
                <li><a href="http://getpelican.com/">Pelican</a></li>
                <li><a href="http://python.org/">Python.org</a></li>
                <li><a href="http://jinja.pocoo.org/">Jinja2</a></li>
            </ul>
            </div>


            <div class="social">
            <div class="well" style="padding: 8px 0; background-color: #FBFBFB;">
            <ul class="nav nav-list">
                <li class="nav-header"> 
                Social
                </li>
           
                <li><a href="https://github.com/buptlxb">Github</a></li>
                <li><a href="http://weibo.com/ictlxb">Weibo</a></li>
            </ul>
            </div>


            <div class="tagcloud">
            <div class="well" style="padding: 8px 0; background-color: #FBFBFB;">
            <ul class="tagcloud">
                <li class="tag-3"><a href="./tag/network.html">Network</a></li>
                <li class="tag-1"><a href="./tag/algorithm.html">algorithm</a></li>
                <li class="tag-4"><a href="./tag/contructor.html">contructor</a></li>
                <li class="tag-2"><a href="./tag/security.html">Security</a></li>
                <li class="tag-4"><a href="./tag/type.html">type</a></li>
                <li class="tag-4"><a href="./tag/cache-miss.html">cache miss</a></li>
                <li class="tag-3"><a href="./tag/constructor.html">constructor</a></li>
                <li class="tag-4"><a href="./tag/voa-special-english.html">VOA Special English</a></li>
                <li class="tag-1"><a href="./tag/linux.html">linux</a></li>
                <li class="tag-4"><a href="./tag/spfa.html">spfa</a></li>
                <li class="tag-1"><a href="./tag/bochs.html">bochs</a></li>
                <li class="tag-3"><a href="./tag/ubuntu.html">Ubuntu</a></li>
                <li class="tag-4"><a href="./tag/vpn.html">vpn</a></li>
                <li class="tag-4"><a href="./tag/linxu.html">linxu</a></li>
                <li class="tag-1"><a href="./tag/os.html">os</a></li>
                <li class="tag-4"><a href="./tag/array.html">array</a></li>
                <li class="tag-4"><a href="./tag/segment-tree.html">segment tree</a></li>
                <li class="tag-4"><a href="./tag/python.html">python</a></li>
                <li class="tag-1"><a href="./tag/cpp.html">cpp</a></li>
                <li class="tag-4"><a href="./tag/row-major.html">row-major</a></li>
                <li class="tag-4"><a href="./tag/ccpp.html">C/CPP</a></li>
                <li class="tag-4"><a href="./tag/optimization.html">optimization</a></li>
                <li class="tag-4"><a href="./tag/inheritance.html">inheritance</a></li>
                <li class="tag-1"><a href="./tag/hihocoder.html">hihocoder</a></li>
                <li class="tag-3"><a href="./tag/vocabulary.html">vocabulary</a></li>
            </ul>
            </div>

            </div>


        </div>  
    </div>     </div> 
<footer>
<br />
<p><a href=".">BLxG</a> &copy; ictlxb 2016</p>
</footer>

</div> <!-- /container -->
<script src="http://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js"></script>
<script src="./theme/bootstrap-collapse.js"></script>
<script>
    $(document).ready(function () {
        $(".article table").addClass("table table-striped table-bordered");
    });
</script>

 
</body>
</html>