<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>BLxG</title><link href="http://www.gotit.sinaapp.com/" rel="alternate"></link><link href="http://gotit.applinzi.com/feeds/security.atom.xml" rel="self"></link><id>http://www.gotit.sinaapp.com/</id><updated>2014-09-21T00:00:00+08:00</updated><entry><title>On Runtime Monitoring Tools</title><link href="http://www.gotit.sinaapp.com/on-runtime-monitoring-tools.html" rel="alternate"></link><published>2014-09-21T00:00:00+08:00</published><updated>2014-09-21T00:00:00+08:00</updated><author><name>ictlxb</name></author><id>tag:www.gotit.sinaapp.com,2014-09-21:on-runtime-monitoring-tools.html</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;Runtime monitoring tools make use of runtime information to
detect bugs that are difficult to detect statically. Existing
dynamic monitoring schemes fall into three categories: programming-rule based
(PRB), invariant-rule-based (IRB), and execution-statistics based (ESB).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Programming Rule Based (PRB)&lt;/h2&gt;
&lt;p&gt;PRB checks for violations of &lt;strong&gt;programming language specifications&lt;/strong&gt;,
&lt;strong&gt;programming paradigms&lt;/strong&gt;, or &lt;strong&gt;software development specifications&lt;/strong&gt;.
For example &lt;code&gt;array index cannot exceed the array bounds''
and&lt;/code&gt;concurrent accesses to a shared variable should be
synchronized''
are the kinds of rules PRB checkers use to detect bugs.&lt;/p&gt;
&lt;h2&gt;Invariant Rule Based (IRB)&lt;/h2&gt;
&lt;p&gt;IRB extracts invariant rules (e.g. PC and value invariants) from
&lt;strong&gt;successful runs&lt;/strong&gt; or &lt;strong&gt;multiple periods of a single long-running
execution&lt;/strong&gt;, and then uses these rules to check for violations in a
later execution or later periods of an execution in a long-running
job. Valueinvariance maintains, for each variable, a set of values
that the variable hes held. When a value not in the set is found at
runtime, it is recorded as an invariant violation. Program Counter
(PC) invariance maintains for each memory location a set of program
counter values(i.e. program locations) that access the variable. When
a datum is accessed by a program location that has not previously
accessed it, the access is recorded as an anomalous access.&lt;/p&gt;
&lt;h2&gt;Execution Statistics Based (ESB)&lt;/h2&gt;
&lt;p&gt;ESB extracts &lt;strong&gt;statistics that characterize the program's runtime
behavior&lt;/strong&gt;, and uses statistical analysis to detect bugs on the fly.&lt;/p&gt;</summary><category term="Security"></category></entry><entry><title>Basic Concept on Security</title><link href="http://www.gotit.sinaapp.com/basic-concept-on-security.html" rel="alternate"></link><published>2014-09-17T00:00:00+08:00</published><updated>2014-09-17T00:00:00+08:00</updated><author><name>ictlxb</name></author><id>tag:www.gotit.sinaapp.com,2014-09-17:basic-concept-on-security.html</id><summary type="html">&lt;h2&gt;Authentication vs. Authorization&lt;/h2&gt;
&lt;h4&gt;Authentication&lt;/h4&gt;
&lt;p&gt;Authentication verifies &lt;strong&gt;who you are&lt;/strong&gt;. It is the process of
ascertaining that somebody really is who he/she claims to be.&lt;/p&gt;
&lt;h4&gt;Authorization&lt;/h4&gt;
&lt;p&gt;Authorization verifies &lt;strong&gt;what you are authorized to do&lt;/strong&gt;. It refers
ot rules that determine who is allowed to do what.&lt;/p&gt;</summary><category term="Security"></category></entry><entry><title>Web Vulnerability</title><link href="http://www.gotit.sinaapp.com/web-vulnerability.html" rel="alternate"></link><published>2014-09-16T00:00:00+08:00</published><updated>2014-09-16T00:00:00+08:00</updated><author><name>ictlxb</name></author><id>tag:www.gotit.sinaapp.com,2014-09-16:web-vulnerability.html</id><summary type="html">&lt;h4&gt;Two Main Approaches to Testing Software Application&lt;/h4&gt;
&lt;p&gt;In &lt;strong&gt;white-box&lt;/strong&gt; testing, the source code of application is analyzed in an
attempt to track down defective or vulnerable lines of code. This operation is
often integrated into the development process by creating add-on tools for
common deveploment environments.&lt;/p&gt;
&lt;p&gt;In &lt;strong&gt;black-blox&lt;/strong&gt; testing, the source code is not examined directly. Instead,
special input test cases are generated and sent to the application. Then, the
results returned by the application are analyzed for unexpected behavior that
indicate errors or vulnerabilities.&lt;/p&gt;</summary><category term="Security"></category></entry><entry><title>Some Common Weakness Enumeration</title><link href="http://www.gotit.sinaapp.com/some-common-weakness-enumeration.html" rel="alternate"></link><published>2014-09-11T00:00:00+08:00</published><updated>2014-09-11T00:00:00+08:00</updated><author><name>ictlxb</name></author><id>tag:www.gotit.sinaapp.com,2014-09-11:some-common-weakness-enumeration.html</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;Here is a common weakness enumeration. Maybe simple but useful.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Insecure Interaction Between Components&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;These weaknesses are related to insecure ways in which data is sent adn
received between separate components, modules, programs, procesces, threads
or systems.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')&lt;/h4&gt;
&lt;p&gt;The software constructs all or part of an OS command using
externally-influenced input from an upstream component, but it does not
neutralize or incorrectly neutralizes special elements that could modify
the intended OS command when it is sent to a downstream component.&lt;/p&gt;
&lt;h4&gt;Improper Neutralization of Input During Web Page Generation ('Cross-size Scripting')&lt;/h4&gt;
&lt;p&gt;The software does not neutralize or incorrectly neutralizes user-controllable
input before it is placed in output that is used as a web page that is served
to other users.&lt;/p&gt;
&lt;h4&gt;Improper Neutralization of Special Elements used in an SQL Command('SQL Injection')&lt;/h4&gt;
&lt;p&gt;The software constructs all or part of an SQL command using
externally-influenced input form an upstream component, but it does not
neutralization or incorrectly neutralizes special elements that could modify
the intended SQL command when it sent to downstream component.&lt;/p&gt;
&lt;h4&gt;Cross-Site Request Forgery (CSRF)&lt;/h4&gt;
&lt;p&gt;The web page does not, or cannot, sufficiently verify whether a well-formed, valid,
constient request was intentionally provided by the user who submitted the
request.&lt;/p&gt;
&lt;h4&gt;Unrestricted Upload of File with Dangerous Type&lt;/h4&gt;
&lt;p&gt;The software allows attackers to upload or transfer files of dangerous types
that can be automatically processed within the product`s environment.&lt;/p&gt;
&lt;h4&gt;URL Redirected to Untrusted Site ('Open Redirect')&lt;/h4&gt;
&lt;p&gt;A web page accepts user-controllable input that specifies a link to external
site, and use that link in a Redirect. This simpilifies phishing attacks.&lt;/p&gt;
&lt;h2&gt;Risky Resource Management&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;These weaknesses are related to ways in which software does not properly
manage the creation, usage, transfer, or destruction of important system
resources.
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Imporper Limitation of Pathname to a Restricted Directory ('Path Tranversal')&lt;/h4&gt;
&lt;p&gt;The software uses external input to construct a pathname that is intended to
identify a file or directory that is located underneath a restricted parent
directory, but the software does not properly neutralize special elements
within pathname that can cause the pathname to resolve to a location that is
outside of the restricted directory.&lt;/p&gt;
&lt;h4&gt;Buffer Copy without Checkint Size of Input ('Classic Buffer Overflow')&lt;/h4&gt;
&lt;p&gt;The program copies an input buffer to an output buffer without verifying that
the size of input buffer is less than the size of output buffer, leading to a
buffer overflow.&lt;/p&gt;
&lt;h4&gt;Incorrect Calculation of Buffer Size&lt;/h4&gt;
&lt;p&gt;The software does not correctly calculate the size to be used when allocating a
buffer, which could lead to a buffer overflow.&lt;/p&gt;
&lt;h4&gt;Uncontrolled Format String&lt;/h4&gt;
&lt;p&gt;The software uses externally-controlled strings in print-style functions, which
can lead to buffer overflow or data representation problem.&lt;/p&gt;
&lt;h4&gt;Integer Overflow or Wraparound&lt;/h4&gt;
&lt;p&gt;The software performs a calculation that can produce an integer overflow or
wraparound, when the logic assumes that the resulting value will always be
larger than the original value. This can introduce other weaknesses when the
calculation is used for resource management or execution control.&lt;/p&gt;
&lt;h4&gt;Download of Code without Integrity Check&lt;/h4&gt;
&lt;p&gt;The product downloads source code or an executable from a remote location and
executes that code without sufficiently verifying the origin or integrity of
the code.&lt;/p&gt;
&lt;h4&gt;Use of Potentially Dangerous Function&lt;/h4&gt;
&lt;p&gt;The program invokes a potentially dangerous function that could introduce a
vulnerability if it is used incorrectly, but the function can also be used
safely.&lt;/p&gt;
&lt;h4&gt;Inclusion of Functionality from Untrusted Control Sphere&lt;/h4&gt;
&lt;p&gt;The software imports, requires, or includes executable functionality (such as a
library) from a source that is outside of the intended control sphere.&lt;/p&gt;</summary><category term="Security"></category></entry></feed>